openapi: 3.0.0
info:
  contact:
    email: support@aurinko.io
  description: |
    ## Introduction
    The Aurinko API is a unified API platform allowing developers to quickly build integrations with
    many mailbox providers and services like Google, Office 365, Outlook.com, MS Exchange, IMAP.
    The unified API abstracts away differences between many email, calendar, contact, task APIs
    to make it easy to connect and sync the mailbox data.

    The Aurinko API's focus is convenient and reliable data synchronization for all supported
    data categories (email, calendar, contacts, tasks) so the API provides methods to receive changes/deltas
    and be notified of the changes (through webhooks) in a unified manner. The API's sync/deltas model
    should allow developers to build reliable event based solutions easily.

    The Aurinko API is built on HTTP. Our API is RESTful. It has predictable resource URLs.
    It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body.

    ## API Authentication
    When you [sign up for an account](https://app.aurinko.io/#/signUp), you are given a Client Id and Secret
    for every application that you create. You use those to go through OAuth flows that allow you
    to start syncing remote account data through Aurinko. An account OAuth flow can be started with
    just the Client Id and the Client Secret will be required to obtain an account access token in the
    "authorization code" flow ("implicit grant" flow does is secured by the "trusted domains" setting).

    Aurinko offers two forms of authentication:

    - `Basic <Client Id, Client Secret>` - used for authentication flows and administrative requests made from the server side.
    - `Bearer <Account Access Token>` - used for working with an account data.
    - `Api Key in Cookie` - for in-browser apps that use Aurinko as their backend API with user sessions.
    - `Api Key in Header (X-Aurinko-Session)` - for server side apps that need user sessions

    Never share your client secret or access token. Keep them guarded and secure.

    ## Getting Started Guide
    If you have a use case you would like to implement, please consult us for feedback on the best API operations for the task.

    [Click here to visit our API Guides](https://docs.aurinko.io/ctg-getting-started/getting-started).
  termsOfService: https://www.aurinko.io/terms-of-service/
  title: Aurinko.io API
  version: 1.0.0
servers:
- description: Production server
  url: https://api.aurinko.io
security:
- AccountToken: []
- AppAuth: []
  AccountIdHeader: []
- UserSessionHeader: []
  AccountIdHeader: []
- UserSessionCookie: []
  ClientIdHeader: []
  AccountIdHeader: []
- AuthTypeHeader: []
  ExchangeIdToken: []
  ClientIdHeader: []
  AccountIdHeader: []
tags:
- name: calendar
- name: email
- name: followup
- name: contact
- name: booking
- name: user
- name: account
- name: am
- name: auth
- name: subscriptions
- name: task
- description: |
    Aurinko's Unified OAuth Flows are backed by providers’ OAuth2 flows (i.e. Google, Office 365, Salesforce, HubSpot,...)
    or by secure password-based authentications (i.e. MS Exchange, IMAP accounts). The following three flows are supported:

    1. Account OAuth - User delegated authorization that produces an Aurinko account and an access token.
    2. Service Account OAuth - Admin/Org-level authorization that produces an Auirnko service account and an access token.
    3. User OAuth - User delegated authorization that produces an Aurinko User, its primary account, and a user session token or cookie.

    See [this user guide](https://docs.aurinko.io/authentication/authentication-flow) for more information.
  name: Auth
  x-displayName: Authorization
- description: "## Failing requests\nAPI clients must expect and gracefully handle\
    \ transient errors, such as rate limiting or server errors.\nWe recommend baking\
    \ 5xx and 429 response handling into your low-level HTTP client so your integration\n\
    can handle most errors automatically.\n\nIf a request fails, the error information\
    \ is returned with the HTTP status code and error details are\nusually sent as\
    \ JSON content. For instance, if a requested record could not be found, the HTTP\
    \ response\nmight look something like:\n```\nHTTP/1.1 404 The record could not\
    \ be found\nDate: Thu, 16 Mar 2020 17:41:40 GMT\nContent-Type:\tapplication/json\n\
    ...\n\n{\n  \"code\": \"badRequest\",\n  \"message\": \"Bad Request\",\n  \"requestId\"\
    : \"3cd38fee-714b-4fe2-8e41-0f358246526a\",\n  \"originalError\": {\n    \"error\"\
    : {\n      \"code\": \"ErrorInvalidIdMalformed\",\n      \"message\": \"Id is\
    \ malformed.\",\n      \"innerError\": {\n        \"date\": \"2020-08-17T22:56:24\"\
    ,\n        \"request-id\": \"be4b9a5c-9c29-4cd4-b815-90b5e5bf8f07\"\n      }\n\
    \    }\n  }\n}\n```\n\nNote that, in general, if a request causes a new record\
    \ to be created (like a new event, or contact, etc.),\nthe response will use the\
    \ \"201 Created\" status. Any other successful operation (like a successful query,\n\
    delete, or update) will use a 200 status code.\n\n## Rate limiting (429 Too Many\
    \ Requests)\nIf you exceed rate limits imposed by a remote API like Google, Graph,\
    \ MS Exchange, you will\nget a 429 Too Many Requests response. Your application\
    \ should retry with exponential backoff.\n\n## 5xx server errors\nIf Aurinko is\
    \ having trouble, you will get a response with a 5xx status code indicating a\
    \ server error.\n500 (Internal Server Error), 502 (Bad Gateway), 503 (Service\
    \ Unavailable), and 504 (Gateway Timeout)\nmay be retried with exponential backoff.\n\
    \n## 404 Not Found\nAPI requests may get 404 due to a deleted item or insufficient\
    \ permissions, etc. Do not automatically\nretry these requests.\n\n## 412 Precondition\
    \ Failed\nPATCH API requests may get 412 due to a mismatching ETag header (If-Match)\
    \ which indicates\nthe contact has changed since its data was read.\n"
  name: Errors
  x-displayName: Handling errors
  x-traitTag: true
- description: |
    An account corresponds to an email address, mailbox, and/or calendar. When connecting to the Aurinko API, a specific access token gives you access to a specific account’s data.
  name: Account
- description: |
    `User` is an Aurinko managed entity that your app can leverage to implement user session management. Multiple regular Aurinko accounts can be linked to a `User` however there is always one primary account that acts as the user id-provider. The `User` sessions allow browser apps to store all their account access tokens securely on the Aurinko servers.
  name: User
  x-displayName: User sessions
- description: |
    These endpoints allow for account management outside the developer console interface. You can list, cancel, update, and delete accounts associated with your application.
  name: Accounts
- description: |
    Service accounts represent admin/service/organization level connections. List, cancel, update, and delete service accounts associated with your application.
  name: Services
  x-displayName: Service accounts
- description: |
    Manage accounts rely on service accounts for their connections. List, cancel, update, and delete managed accounts associated with service accounts.
  name: Managed accounts
  x-displayName: Managed accounts
- description: |
    Each account connected to Aurino can have zero or more calendars, and each calendar has a collection of individual events.
  name: Calendars
- description: |
    Sync/delta methods.
  name: CalSync
  x-displayName: Calendar sync
- description: |
    Events are objects within a calendar, generally supporting all features of modern scheduling apps. Using the calendar APIs, your application can schedule events, send meeting invitations, RSVP, and more.
  name: Events
  x-displayName: Calendar events
- description: |
    Check free/busy status for a calendar or available time slots for a meeting in multiple calendars.
  name: FreeBusySchedule
  x-displayName: Free/Busy schedule
- description: |
    Booking profiles allow you to build calendar availability and meeting scheduling apps. List, create, update, and delete booking profiles associated with a user calendar. See meeting time availability according to a booking profile configuration.
  name: Booking
  x-displayName: Booking
- description: Sync/delta methods.
  name: EmailSync
  x-displayName: Email sync
- description: |
    Messages contain several pieces of information, such as when a message was sent, the sender's address, to whom it was sent, and the message body. They can also contain files (attachments), calendar event invitations, and more.
  name: Messages
  x-displayName: Email messages
- description: |
    A draft message is a message which has not been sent yet. The drafts endpoints let you create new drafts, read existing drafts, and send drafts.
  name: Drafts
  x-displayName: Draft messages
- description: |
    Track email opens.
  name: EmailTracking
  x-displayName: Email tracking
- description: |
    Follow-up rules allow you to define automatic email follow-up (drip) sequences and email templates. List, create, update, and delete follow-up rules associated with a mailbox account. Check status of a drip sequence for a given email thread, or activate a drip sequence.
  name: FollowUpRobot
  x-displayName: Follow-up and templates
- description: |
    Contacts are objects within an address book, containing several pieces of information, such as email addresses, phone numbers,  postal addresses, work place details.
  name: Contacts
- description: |
    Sync/delta methods.
  name: ContSync
  x-displayName: Contacts sync
- description: |
    TaskLists a container objects for tasks.
  name: TaskLists
  x-displayName: Task Lists
- description: |
    Tasks a work to be done.
  name: Tasks
  x-displayName: Tasks
- description: Sync/delta methods.
  name: TaskSync
  x-displayName: Task sync
- description: |
    Webhooks allow your application to receive simple notifications when certain events occur.
    They essentially tell your application that it can run incremental syncs to obtain the changed records (updated/deleted).

    ## Prerequisites
    Gmail notifications require a special configuration, explained in [this article](https://developers.google.com/gmail/api/guides/push).
    A PubSub PUSH subscription should specify your Aurinko endpoint `https://{yourAurinkoDomain}/push/google/email`
    so that Gmail notifications are delivered to Aurinko first. Once the PubSub subscription is configured
    and the `publish` rights are granted to `gmail-api-push@system.gserviceaccount.com` please specify your
    PubSub topic in the Application settings (Google OAuth) in the Aurinko portal.

    ## Notification URL verification
    To ensure that notifications are being delivered to a server under your direct control, we must verify
    your ownership by issuing you a challenge request. Please make sure your notification endpoint
    (specified in the notificationUrl property) responds to a validation request. If validation fails,
    the request to create the subscription returns a 400 Bad Request error.

    1. Aurinko sends a POST request to the notification URL:
      ```
      Content-Type: text/plain; charset=utf-8
      POST https://{notificationUrl}?validationToken={challenge}
      ```
    2. The client must provide a response:
      * A 200 (OK) status code.
      * The body must include the validation token provided by the validationToken query parameter

    ## Notifications
    Aurinko sends notifications as POST requests with the following json payload:
    ```
    {
      "subscription" : integer, // subscription Id
      "resource" : string,
      "accountId": integer,
      "error": string,          // if any
      "lifecycleEvent": string, // Enum of `error` or `active`, when subscription state changes
      "payloads" : [...]
    }
    ```

    You notification endpoint should respond with the 200 (OK) status code when a notification is successfully processed.

    ### Notification validation
    Aurinko signs its requests using a secret unique to your app.
    Here's an overview of the process to validate a signed request from Aurinko:

    1. Retrieve the `X-Aurinko-Request-Timestamp` header on the HTTP request, and the body of the request (Use the raw request body, before it has been deserialized from JSON or other forms.).
    2. Concatenate the version number, the timestamp, and the body of the request to form a basestring. Use a colon as the delimiter between the three elements.
    The version number right now is always `v0`.
    ```
    final byte[] signData = org.apache.commons.lang3.ArrayUtils.addAll(
        ("v0:" + timestampSeconds + ":").getBytes(StandardCharsets.UTF_8),
        payloadBytes
    );
    ```
    3. With the help of HMAC SHA256 implemented in your favorite programming language, hash the above basestring, using the Aurinko Signing Secret as the key.
    4. Compare this computed signature to the `X-Aurinko-Signature` header on the request.
    If it matches - request is valid, if not - request must be discarded.
  name: Webhooks
paths:
  /v1/calendars/freeBusy:
    post:
      operationId: freeBusy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FreeBusyRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FreeBusySchedulePage'
          description: Success
      summary: "Get the free/busy availability information for a collection of users,\
        \ or resources"
      tags:
      - FreeBusySchedule
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X POST https://api.aurinko.io/v1/calendars/freeBusy \
              -d '{
                  "timeMin": "2020-02-03T10:00:00-07:00",
                  "timeMax": "2020-06-03T10:00:00-07:00",
                  "emails": ["user1@corp.com","user2@corp.com"]
                 }'
      x-content-type: application/json
      x-accepts: application/json
  /v1/calendars/suggestMeetingTimes:
    post:
      operationId: suggestMeetingTimes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuggestMeetingTimesRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestMeetingTimesResponse'
          description: Success
      summary: "Suggest meeting times for a collection of users, or resources"
      tags:
      - FreeBusySchedule
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X POST https://api.aurinko.io/v1/calendars/suggestMeetingTimes \
              -d '{
                  "timeMin": "2020-02-03T10:00:00-07:00",
                  "timeMax": "2020-06-03T10:00:00-07:00",
                  "durationMinutes": 45,
                  "attendees": [
                      {"email": "user1@corp.com"},
                      {"email": "user2@corp.com"}
                  ],
                  "defaultTimezone": "America/New_York"
                 }'
      x-content-type: application/json
      x-accepts: application/json
  /v1/calendars:
    get:
      operationId: calendars
      parameters:
      - description: A token received as nextPageToken from a previous page request
          (for the first page it must be empty)
        explode: true
        in: query
        name: pageToken
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - explode: true
        in: query
        name: withShared
        required: false
        schema:
          nullable: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarsPage'
          description: Success
      summary: Request list of calendars
      tags:
      - Calendars
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X GET https://api.aurinko.io/v1/calendars
      x-accepts: application/json
    post:
      operationId: createCalendar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarCreate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Calendar'
          description: Success
      summary: Create new calendar
      tags:
      - Calendars
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X POST https://api.aurinko.io/v1/calendars \
              -d '{ "name": "New calendar" }'
      x-content-type: application/json
      x-accepts: application/json
  /v1/calendars/{id}:
    get:
      operationId: calendarById
      parameters:
      - description: Calendar id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Calendar'
          description: Success
      summary: Get a calendar
      tags:
      - Calendars
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X GET https://api.aurinko.io/v1/calendars/primary
      x-accepts: application/json
    patch:
      operationId: updateCalendar
      parameters:
      - description: Calendar id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarUpdate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Calendar'
          description: Success
      summary: Update a calendar
      tags:
      - Calendars
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X PATCH https://api.aurinko.io/v1/calendars/{calendarId} \
              -d '{ "name": "Updated calendar" }'
      x-content-type: application/json
      x-accepts: application/json
  /v1/calendars/{calendarId}/sync:
    post:
      operationId: calSyncStart
      parameters:
      - description: Calendar id
        explode: false
        in: path
        name: calendarId
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Lower bound (exclusive) for an event's end time to filter by. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. If timeMax is set, timeMin must be smaller than timeMax.
        explode: true
        in: query
        name: timeMin
        required: true
        schema:
          format: date-time
          type: string
        style: form
      - description: |
          Upper bound (exclusive) for an event's start time to filter by. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMin is set, timeMax must be greater than timeMin.
        explode: true
        in: query
        name: timeMax
        required: true
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncStatus'
          description: Success
      summary: Start a new calendar sync
      tags:
      - CalSync
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X POST -H 'Authorization: Bearer <access token>' \
              -G https://api.aurinko.io/v1/calendars/primary/sync \
              -d timeMin=2019-06-03T10:00:00-07:00 \
              -d timeMax=2020-06-03T10:00:00-07:00
      x-accepts: application/json
  /v1/calendars/{calendarId}/sync/updated:
    get:
      operationId: calSyncUpdated
      parameters:
      - description: Calendar id
        explode: false
        in: path
        name: calendarId
        required: true
        schema:
          type: string
        style: simple
      - description: A token received as nextDeltaToken from a previous sync request
          or a start sync request
        explode: true
        in: query
        name: deltaToken
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: A token received as nextPageToken from a previous page request
        explode: true
        in: query
        name: pageToken
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsPage'
          description: Success
      summary: Request changed events (deltas)
      tags:
      - CalSync
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              -G https://api.aurinko.io/v1/calendars/primary/sync/updated \
              -d deltaToken='a8b7c6d5e4f3g2h1'
      x-accepts: application/json
  /v1/calendars/{calendarId}/sync/deleted:
    get:
      operationId: calSyncDeleted
      parameters:
      - description: Calendar id
        explode: false
        in: path
        name: calendarId
        required: true
        schema:
          type: string
        style: simple
      - description: A token received as nextDeltaToken from a previous sync request
          or a start sync request
        explode: true
        in: query
        name: deltaToken
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: A token received as nextPageToken from a previous page request
        explode: true
        in: query
        name: pageToken
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedPage'
          description: Success
      summary: Request deleted events (deltas)
      tags:
      - CalSync
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              -G https://api.aurinko.io/v1/calendars/primary/sync/deleted \
              -d deltaToken='a8b7c6d5e4f3g2h1'
      x-accepts: application/json
  /v1/calendars/{calendarId}/events/range:
    get:
      operationId: range
      parameters:
      - description: Calendar id
        explode: false
        in: path
        name: calendarId
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Lower bound (exclusive) for an event's end time to filter by. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. If timeMax is set, timeMin must be smaller than timeMax.
        explode: true
        in: query
        name: timeMin
        required: true
        schema:
          format: date-time
          type: string
        style: form
      - description: |
          Upper bound (exclusive) for an event's start time to filter by. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMin is set, timeMax must be greater than timeMin.
        explode: true
        in: query
        name: timeMax
        required: true
        schema:
          format: date-time
          type: string
        style: form
      - explode: true
        in: query
        name: pageToken
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsPageNext'
          description: Success
      summary: Request events in a range
      tags:
      - Events
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              -G https://api.aurinko.io/v1/calendars/primary/events/range \
              -d timeMin=2019-06-03T10:00:00-07:00 \
              -d timeMax=2020-06-03T10:00:00-07:00
      x-accepts: application/json
  /v1/calendars/{calendarId}/events/find:
    get:
      operationId: eventsByICalUIds
      parameters:
      - description: Calendar id
        explode: false
        in: path
        name: calendarId
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Find all events that match specified ICalUid's
        explode: true
        in: query
        name: iCalUId
        required: true
        schema:
          items:
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: pageToken
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsPageNext'
          description: Success
      summary: Request events by ICalUid's
      tags:
      - Events
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              -G https://api.aurinko.io/v1/calendars/primary/events/find \
              -d ICalUid=ABCID1 \
              -d ICalUid=XYZID2
      x-accepts: application/json
  /v1/calendars/{calendarId}/events/{eventId}:
    delete:
      operationId: deleteEvent
      parameters:
      - description: Calendar id
        explode: false
        in: path
        name: calendarId
        required: true
        schema:
          type: string
        style: simple
      - description: Event id
        explode: false
        in: path
        name: eventId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: notifyAttendees
        required: false
        schema:
          default: true
          nullable: true
          type: boolean
        style: form
      responses:
        "200":
          description: Success
      summary: Delete an event
      tags:
      - Events
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X DELETE -H 'Authorization: Bearer <access token>' \
              https://api.aurinko.io/v1/calendars/primary/events/<eventId>
      x-accepts: application/json
    get:
      operationId: event
      parameters:
      - description: Calendar id
        explode: false
        in: path
        name: calendarId
        required: true
        schema:
          type: string
        style: simple
      - description: Event id
        explode: false
        in: path
        name: eventId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: nativeProperties
        required: false
        schema:
          items:
            $ref: '#/components/schemas/NativeProperty'
          nullable: true
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: Success
      summary: Get an event
      tags:
      - Events
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              https://api.aurinko.io/v1/calendars/primary/events/{id}
      x-accepts: application/json
    patch:
      operationId: updateEvent
      parameters:
      - description: Calendar id
        explode: false
        in: path
        name: calendarId
        required: true
        schema:
          type: string
        style: simple
      - description: Event id
        explode: false
        in: path
        name: eventId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: notifyAttendees
        required: false
        schema:
          default: true
          nullable: true
          type: boolean
        style: form
      - description: Whether response must contain a record that has been updated.
          This can result in an additional request to provider API.
        explode: true
        in: query
        name: returnRecord
        required: false
        schema:
          default: true
          nullable: true
          type: boolean
        style: form
      - description: The HTTP entity tag of the resource (ETag). Used for web cache
          validation.
        explode: false
        in: header
        name: If-Match
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventOrId'
          description: Success
      summary: Update an event
      tags:
      - Events
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X PATCH https://api.aurinko.io/v1/calendars/primary/events/{eventId}?notifyAttendees=true \
              -d '{
                  "subject": "Business lunch",
                  "location": "Another cool place",
                  "start": {
                      "dateTime": "2020-02-05T10:00:00Z",
                      "timezone": "America/Los_Angeles"
                  },
                  "end": {
                      "dateTime": "2020-02-05T11:00:00Z",
                      "timezone": "America/Los_Angeles"
                  },
                  "meetingInfo": {
                      "attendees": [
                          {
                              "emailAddress": {"address": "partner@example.com"},
                              "type": "required"
                          }
                      ]
                  }
                 }'
      x-content-type: application/json
      x-accepts: application/json
  /v1/calendars/{calendarId}/events/{masterId}/series:
    get:
      operationId: seriesInfo
      parameters:
      - description: Calendar id
        explode: false
        in: path
        name: calendarId
        required: true
        schema:
          type: string
        style: simple
      - description: Master event id
        explode: false
        in: path
        name: masterId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeriesInfo'
          description: Success
      summary: Request a series description
      tags:
      - Events
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              https://api.aurinko.io/v1/calendars/primary/events/{masterId}/series
      x-accepts: application/json
  /v1/calendars/{calendarId}/events/{masterId}/occurrences/{ost}:
    get:
      operationId: occurrenceByOrigStart
      parameters:
      - description: Calendar id
        explode: false
        in: path
        name: calendarId
        required: true
        schema:
          type: string
        style: simple
      - description: Master event id
        explode: false
        in: path
        name: masterId
        required: true
        schema:
          type: string
        style: simple
      - description: Original start time
        explode: false
        in: path
        name: ost
        required: true
        schema:
          format: datetime
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: Success
      summary: Request an occurrence by original start time
      tags:
      - Events
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              https://api.aurinko.io/v1/calendars/primary/events/{masterId}/occurrences/2020-04-01
      x-accepts: application/json
  /v1/calendars/{calendarId}/events:
    post:
      operationId: createEvent
      parameters:
      - description: Calendar id
        explode: false
        in: path
        name: calendarId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: notifyAttendees
        required: false
        schema:
          default: true
          nullable: true
          type: boolean
        style: form
      - explode: true
        in: query
        name: bodyType
        required: false
        schema:
          $ref: '#/components/schemas/BodyType'
        style: form
      - description: Whether response must contain a record that has been created.
          This can result in an additional request to provider API.
        explode: true
        in: query
        name: returnRecord
        required: false
        schema:
          default: true
          nullable: true
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventOrId'
          description: Success
      summary: Create a new event
      tags:
      - Events
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X POST https://api.aurinko.io/v1/calendars/primary/events \
              -d '{
                  "subject": "Business lunch",
                  "location": "Our favorite cafe",
                  "start": {
                      "dateTime": "2020-02-04T10:00:00Z",
                      "timezone": "America/Los_Angeles"
                  },
                  "end": {
                      "dateTime": "2020-02-04T11:00:00Z",
                      "timezone": "America/Los_Angeles"
                  },
                  "meetingInfo": {
                      "attendees": [
                          {
                              "emailAddress": {"address": "partner@example.com"},
                              "type": "required"
                          }
                      ]
                  }
                 }'
      x-content-type: application/json
      x-accepts: application/json
  /v1/calendars/{calendarId}/events/{eventId}/response:
    put:
      operationId: updateMeetingResponse
      parameters:
      - description: Calendar id
        explode: false
        in: path
        name: calendarId
        required: true
        schema:
          type: string
        style: simple
      - description: Event id
        explode: false
        in: path
        name: eventId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: notifyAttendees
        required: false
        schema:
          default: true
          nullable: true
          type: boolean
        style: form
      - description: Whether response must contain a record that has been updated.
          This can result in an additional request to provider API.
        explode: true
        in: query
        name: returnRecord
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: The HTTP entity tag of the resource (ETag). Used for web cache
          validation.
        explode: false
        in: header
        name: If-Match
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
          description: Success
      summary: Update meeting response
      tags:
      - Events
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X PATCH https://api.aurinko.io/v1/calendars/primary/events/{eventId}?notifyAttendees=true \
              -d '{
                  "subject": "Business lunch",
                  "location": "Another cool place",
                  "start": {
                      "dateTime": "2020-02-05T10:00:00Z",
                      "timezone": "America/Los_Angeles"
                  },
                  "end": {
                      "dateTime": "2020-02-05T11:00:00Z",
                      "timezone": "America/Los_Angeles"
                  },
                  "meetingInfo": {
                      "attendees": [
                          {
                              "emailAddress": {"address": "partner@example.com"},
                              "type": "required"
                          }
                      ]
                  }
                 }'
      x-content-type: application/json
      x-accepts: application/json
  /v1/calendars/{calendarId}/events/{eventId}/attachments/{attachmentId}:
    get:
      operationId: attachment
      parameters:
      - description: Calendar id
        explode: false
        in: path
        name: calendarId
        required: true
        schema:
          type: string
        style: simple
      - description: Event id
        explode: false
        in: path
        name: eventId
        required: true
        schema:
          type: string
        style: simple
      - description: attachment identifier
        explode: false
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAttachmentContent'
          description: Success
      summary: Get an event attachment
      tags:
      - Events
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              https://api.aurinko.io/v1/email/messages/{msgId}/attachments/{attId}
      x-accepts: application/json
  /v1/email/sync:
    post:
      operationId: emailSyncStart
      parameters:
      - description: |
          Scan emails received within last 'daysWithin' days.
        explode: true
        in: query
        name: daysWithin
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: bodyType
        required: false
        schema:
          $ref: '#/components/schemas/BodyType'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncStatus'
          description: Success
      summary: Start a new email sync
      tags:
      - EmailSync
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X POST -H 'Authorization: Bearer <access token>' \
              -G https://api.aurinko.io/v1/email/sync \
              -d daysWithin=7
      x-accepts: application/json
  /v1/email/sync/updated:
    get:
      operationId: emailSyncUpdated
      parameters:
      - description: A token received as nextDeltaToken from a previous sync request
          or a start sync request
        explode: true
        in: query
        name: deltaToken
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: A token received as nextPageToken from a previous page request
        explode: true
        in: query
        name: pageToken
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailMessagesPage'
          description: Success
      summary: Request changed emails (deltas)
      tags:
      - EmailSync
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              -G https://api.aurinko.io/v1/email/sync/updated \
              -d deltaToken='a8b7c6d5e4f3g2h1'
      x-accepts: application/json
  /v1/email/sync/deleted:
    get:
      operationId: emailSyncDeleted
      parameters:
      - description: A token received as nextDeltaToken from a previous sync request
          or a start sync request
        explode: true
        in: query
        name: deltaToken
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: A token received as nextPageToken from a previous page request
        explode: true
        in: query
        name: pageToken
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailDeletedPage'
          description: Success
      summary: Request deleted emails (deltas)
      tags:
      - EmailSync
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              -G https://api.aurinko.io/v1/email/sync/deleted \
              -d deltaToken='a8b7c6d5e4f3g2h1'
      x-accepts: application/json
  /v1/email/messages:
    get:
      operationId: messages
      parameters:
      - explode: true
        in: query
        name: pageToken
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: |
          Only return messages matching the specified query. For example, "from:someuser@example.com after:01/01/2020"
        explode: true
        in: query
        name: q
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: "Supported by Google and Office365 accounts only. Body preview\
          \ (snippet) is returned for other providers. Always, check the omitted[]\
          \ array to determine if the response contains full body."
        explode: true
        in: query
        name: bodyType
        required: false
        schema:
          $ref: '#/components/schemas/BodyType'
        style: form
      - explode: true
        in: query
        name: includeTrashAndJunk
        required: false
        schema:
          nullable: true
          type: boolean
        style: form
      - explode: true
        in: query
        name: nativeProperties
        required: false
        schema:
          items:
            $ref: '#/components/schemas/NativeProperty'
          nullable: true
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailMessagesPageNext'
          description: Success
      summary: List email messages
      tags:
      - Messages
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              -G https://api.aurinko.io/v1/email/messages
              -d q='text to:{address_or_name}'
      x-accepts: application/json
    post:
      operationId: send
      parameters:
      - explode: true
        in: query
        name: bodyType
        required: false
        schema:
          $ref: '#/components/schemas/BodyType'
        style: form
      - description: return message id and thread id if possible
        explode: true
        in: query
        name: returnIds
        required: false
        schema:
          nullable: true
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OutgoingEmail'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailSendResponse'
          description: Success
      summary: Send a new message
      tags:
      - Messages
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X POST https://api.aurinko.io/v1/email/messages?bodyType=text \
              -d '{
                  "subject": "Business lunch",
                  "body": "How about a lunch meeting?",
                  "to": [{"address": "partner@example.com"}]
                  "cc": [{"address": "guest@example.com"}]
                 }'
      x-content-type: application/json
      x-accepts: application/json
  /v1/email/messages/{messageId}:
    get:
      operationId: message
      parameters:
      - description: email message identifier
        explode: false
        in: path
        name: messageId
        required: true
        schema:
          type: string
        style: simple
      - description: Default html
        explode: true
        in: query
        name: bodyType
        required: false
        schema:
          $ref: '#/components/schemas/BodyType'
        style: form
      - explode: true
        in: query
        name: nativeProperties
        required: false
        schema:
          items:
            $ref: '#/components/schemas/NativeProperty'
          nullable: true
          type: array
        style: form
      - description: automatically pre-load relevant inline attachments
        explode: true
        in: query
        name: loadInlines
        required: false
        schema:
          default: false
          nullable: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailMessage'
          description: Success
        "429":
          description: Success
          headers:
            Retry-After:
              description: threadId may be unavailable for some IMAP providers
              explode: false
              schema:
                type: integer
              style: simple
      summary: Get a message
      tags:
      - Messages
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              https://api.aurinko.io/v1/email/messages/{id}
      x-accepts: application/json
  /v1/email/messages/{messageId}/status:
    post:
      operationId: updateMessageStatus
      parameters:
      - explode: false
        in: path
        name: messageId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMessageStatusData'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
          description: Success
      summary: Update a message's status
      tags:
      - Messages
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X POST https://api.aurinko.io/v1/email/messages/{messageId}/status \
              -d '{
                  "unread": true
                 }'
      x-content-type: application/json
      x-accepts: application/json
  /v1/email/conversations/{threadId}:
    get:
      operationId: conversation
      parameters:
      - description: conversation/thread identifier
        explode: false
        in: path
        name: threadId
        required: true
        schema:
          type: string
        style: simple
      - description: "Supported by Google and Office365 accounts only. Body preview\
          \ (snippet) is returned for other providers. Always, check the omitted[]\
          \ array to determine if the response contains full body."
        explode: true
        in: query
        name: bodyType
        required: false
        schema:
          $ref: '#/components/schemas/BodyType'
        style: form
      - explode: true
        in: query
        name: pageToken
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailMessagesPageNext'
          description: Success
      summary: Get messages in a conversation
      tags:
      - Messages
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              https://api.aurinko.io/v1/email/conversations/{threadId}
      x-accepts: application/json
  /v1/email/messages/{messageId}/reply:
    post:
      operationId: reply
      parameters:
      - description: an identifier of a message the response is for
        explode: false
        in: path
        name: messageId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: bodyType
        required: false
        schema:
          $ref: '#/components/schemas/BodyType'
        style: form
      - description: return message id and thread id if possible
        explode: true
        in: query
        name: returnIds
        required: false
        schema:
          nullable: true
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OutgoingEmailReply'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailSendResponse'
          description: Success
      summary: Reply to a message
      tags:
      - Messages
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X POST https://api.aurinko.io/v1/email/messages/{msgId}/reply?bodyType=text \
              -d '{
                  "subject": "RE: Business lunch",
                  "body": "Sure, lets meet.",
                  "to": [{"address": "partner@example.com"}]
                  "cc": [{"address": "guest@example.com"}]
                 }'
      x-content-type: application/json
      x-accepts: application/json
  /v1/email/messages/{messageId}/attachments/{attachmentId}:
    get:
      operationId: emailAttachment
      parameters:
      - description: email message identifier
        explode: false
        in: path
        name: messageId
        required: true
        schema:
          type: string
        style: simple
      - description: attachment identifier
        explode: false
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailAttachmentContent'
          description: Success
      summary: Get a message attachment
      tags:
      - Messages
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              https://api.aurinko.io/v1/email/messages/{msgId}/attachments/{attId}
      x-accepts: application/json
  /v1/email/folders:
    get:
      operationId: folders
      parameters:
      - explode: true
        in: query
        name: pageToken
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailFolderInfoPage'
          description: Success
      summary: List email folders
      tags:
      - EmailFolders
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              -G https://api.aurinko.io/v1/email/folders
      x-accepts: application/json
  /v1/email/folders/{folderId}:
    get:
      operationId: folder
      parameters:
      - description: email folder identifier
        explode: false
        in: path
        name: folderId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailFolderInfo'
          description: Success
      summary: Get an email folder
      tags:
      - EmailFolders
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              https://api.aurinko.io/v1/email/folders/{id}
      x-accepts: application/json
  /v1/email/folders/{folderId}/messages:
    get:
      operationId: folderEmails
      parameters:
      - explode: false
        in: path
        name: folderId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: pageToken
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: |
          Only return messages matching the specified query. For example, "from:someuser@example.com after:01/01/2020"
        explode: true
        in: query
        name: q
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - explode: true
        in: query
        name: bodyType
        required: false
        schema:
          $ref: '#/components/schemas/BodyType'
        style: form
      - explode: true
        in: query
        name: nativeProperties
        required: false
        schema:
          items:
            $ref: '#/components/schemas/NativeProperty'
          nullable: true
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailMessagesPageNext'
          description: Success
      summary: List email messages in a specified folder
      tags:
      - EmailFolders
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              -G https://api.aurinko.io/v1/email/messages
              -d q='text to:{address_or_name}'
      x-accepts: application/json
  /v1/email/drafts:
    post:
      operationId: createDraft
      parameters:
      - explode: true
        in: query
        name: bodyType
        required: false
        schema:
          $ref: '#/components/schemas/BodyType'
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OutgoingEmail'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailDraftResponse'
          description: Success
      summary: Create a new draft message
      tags:
      - Drafts
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X POST https://api.aurinko.io/v1/email/drafts?bodyType=text \
              -d '{
                  "subject": "Business lunch",
                  "body": "How about a lunch meeting?",
                  "to": [{"address": "partner@example.com"}]
                  "cc": [{"address": "guest@example.com"}]
                 }'
      x-content-type: application/json
      x-accepts: application/json
  /v1/email/drafts/{draftId}:
    get:
      operationId: getDraft
      parameters:
      - description: draft message identifier
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: bodyType
        required: false
        schema:
          $ref: '#/components/schemas/BodyType'
        style: form
      - explode: true
        in: query
        name: nativeProperties
        required: false
        schema:
          items:
            $ref: '#/components/schemas/NativeProperty'
          nullable: true
          type: array
        style: form
      - description: automatically pre-load relevant inline attachments
        explode: true
        in: query
        name: loadInlines
        required: false
        schema:
          default: false
          nullable: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailDraft'
          description: Success
      summary: Get a draft message
      tags:
      - Drafts
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              https://api.aurinko.io/v1/email/drafts/{id}
      x-accepts: application/json
  /v1/email/drafts/{draftId}/send:
    post:
      operationId: sendDraft
      parameters:
      - description: an identifier of a draft message
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: sendTime
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DraftSendDetails'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailDraftSendStatus'
          description: Success
      summary: Send a draft message
      tags:
      - Drafts
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X POST https://api.aurinko.io/v1/email/drafts/{draftId}/send?sendTime=2021-04-28T15:40:00Z \
      x-content-type: application/json
      x-accepts: application/json
  /v1/email/draftTracking/create:
    post:
      operationId: createDraftTracking
      parameters:
      - description: an identifier of a draft message for start tracking
        explode: true
        in: query
        name: draftId
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: "if draft was not found, turn on tracking anyway"
        explode: true
        in: query
        name: ignoreNotFound
        required: false
        schema:
          nullable: true
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RewriteHtml'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTrackingData'
          description: Success
      summary: Modify tracking data
      tags:
      - EmailTracking
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X POST https://api.aurinko.io/v1/email/draftTracking/create?draftId=<draftId>  \
              -d '{
                  "htmlText": "<p></p>",
                  "tracking": {
                     "threadReplies": true
                  }
                 }'
      x-content-type: application/json
      x-accepts: application/json
  /v1/email/draftTracking/{draftId}/convert:
    patch:
      operationId: convertDraftTracking
      parameters:
      - description: an identifier of a draft message
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConvertDraft'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
          description: Success
      summary: Mark draft's tracking as sent
      tags:
      - EmailTracking
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X PATCH https://api.aurinko.io/v1/email/draftTracking/<draftId>/convert  \
              -d '{
                  "threadId": "<threadId>",
                  "internetMessageId": "<internetMessageId>"
                 }'
      x-content-type: application/json
      x-accepts: application/json
  /v1/email/draftTracking/{draftId}:
    patch:
      operationId: updateDraftTracking
      parameters:
      - description: an identifier of a draft message
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDraftTrackingIn'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
          description: Success
      summary: Modify draft's tracking
      tags:
      - EmailTracking
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X PATCH https://api.aurinko.io/v1/email/draftTracking/<draftId>  \
              -d '{
                  "context": "<context>"
                 }'
      x-content-type: application/json
      x-accepts: application/json
  /v1/email/tracking:
    get:
      operationId: getTracking
      parameters:
      - description: return only those where an open or click happened
        explode: true
        in: query
        name: withActivityOnly
        required: false
        schema:
          default: false
          nullable: true
          type: boolean
        style: form
      - description: page size
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          format: int32
          nullable: true
          type: integer
        style: form
      - description: return records offset by the given number
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          format: int32
          nullable: true
          type: integer
        style: form
      - explode: true
        in: query
        name: contextContains
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: identifier of thread
        explode: true
        in: query
        name: threadId
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTrackingPageNext'
          description: Success
      summary: List tracking data
      tags:
      - EmailTracking
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              -G https://api.aurinko.io/v1/email/tracking
      x-accepts: application/json
  /v1/email/tracking/purgeMyTracking:
    post:
      operationId: purgeMyTracking
      parameters:
      - explode: true
        in: query
        name: threadId
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: User-Agent
        explode: false
        in: header
        name: User-Agent
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
          description: Success
      summary: Purge recent activity for a user
      tags:
      - EmailTracking
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
               -H 'User-Agent: <User-Agent>' \
              -X POST https://api.aurinko.io/v1/email/tracking/purgeMyTracking
      x-accepts: application/json
  /v1/email/tracking/ignoreOpenClicks:
    post:
      operationId: switchOpenClicks
      parameters:
      - description: message identifier
        explode: true
        in: query
        name: messageId
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: internet message identifier
        explode: true
        in: query
        name: inetMessageId
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: should be ignored or not
        explode: true
        in: query
        name: isIgnored
        required: true
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
          description: Success
      summary: Set ignore open/click tracking for а message
      tags:
      - EmailTracking
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X POST https://api.aurinko.io/v1/email/tracking/ignoreOpenClicks
      x-accepts: application/json
  /v1/email/tracking/{id}:
    get:
      operationId: trackingById
      parameters:
      - description: Tracking data id
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackingData'
          description: Success
      summary: Get tracking data by Id
      tags:
      - EmailTracking
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              -G https://api.aurinko.io/v1/email/tracking/{id}'
      x-accepts: application/json
  /v1/email/tracking/{id}/events:
    get:
      operationId: trackingEvents
      parameters:
      - description: Tracking id
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: page size
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          format: int32
          nullable: true
          type: integer
        style: form
      - description: return records offset by the given number
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          format: int32
          nullable: true
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTrackingEventPageNext'
          description: Success
      summary: List tracking events
      tags:
      - EmailTracking
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              -G https://api.aurinko.io/v1/email/tracking/{id}/events
      x-accepts: application/json
  /v1/email/tracking/{trackingId}/events/{id}:
    get:
      operationId: trackingEventById
      parameters:
      - description: Tracking data id
        explode: false
        in: path
        name: trackingId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: Tracking event id
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTrackingEvent'
          description: Success
      summary: Get tracking event by Id
      tags:
      - EmailTracking
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              -G https://api.aurinko.io/v1/email/tracking/{trackingId}/events/{id}'
      x-accepts: application/json
  /v1/followup/config:
    get:
      operationId: getConfig
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowupConfig'
          description: Success
      summary: Get a follow up configuration
      tags:
      - FollowUpRobot
      x-accepts: application/json
    put:
      operationId: updateConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowupConfig'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowupConfig'
          description: A result of changed configuration
      summary: Update a follow up configuration
      tags:
      - FollowUpRobot
      x-content-type: application/json
      x-accepts: application/json
  /v1/followup/rules:
    get:
      operationId: getRules
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowupRuleAggregateOut'
          description: A list of rules
      summary: Get follow up rules
      tags:
      - FollowUpRobot
      x-accepts: application/json
    post:
      operationId: createRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowupRuleAggregateIn'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowupRuleAggregateOut'
          description: A result of add rule
      summary: Add a follow up rule
      tags:
      - FollowUpRobot
      x-content-type: application/json
      x-accepts: application/json
  /v1/followup/rules/{id}:
    delete:
      operationId: deleteRule
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
          description: Success
      summary: Delete a follow up rule
      tags:
      - FollowUpRobot
      x-accepts: application/json
    put:
      operationId: updateRule
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowupRuleAggregateIn'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowupRuleAggregateOut'
          description: A result of changed rule
      summary: Update a follow up rule
      tags:
      - FollowUpRobot
      x-content-type: application/json
      x-accepts: application/json
  /v1/followup/conversations:
    get:
      operationId: getConversationsDripStatus
      parameters:
      - description: "active or inactive threads, by default all threads returned"
        explode: true
        in: query
        name: active
        required: false
        schema:
          nullable: true
          type: boolean
        style: form
      - description: page size
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          format: int32
          nullable: true
          type: integer
        style: form
      - description: page offset
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          format: int32
          nullable: true
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationDripStatus'
          description: A result of conversations with followup
      summary: Get a list of conversations touched by followup
      tags:
      - FollowUpRobot
      x-accepts: application/json
  /v1/followup/conversations/{convoId}:
    get:
      operationId: getConversationDripStatus
      parameters:
      - description: thread identifier
        explode: false
        in: path
        name: convoId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationDripStatus'
          description: A conversation status response
      summary: Check a conversation status
      tags:
      - FollowUpRobot
      x-accepts: application/json
    put:
      operationId: updateConversationDripStatus
      parameters:
      - description: thread identifier
        explode: false
        in: path
        name: convoId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DripRequestDTO'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationDripStatus'
          description: A result of applying drip
      summary: Update a conversation status
      tags:
      - FollowUpRobot
      x-content-type: application/json
      x-accepts: application/json
  /v1/contacts/sync:
    post:
      description: |
        For Office 365, Outlook.com, and MS Exchange accounts this method works with the default Contacts folder only. For Gmail accounts it processes all user contacts except 'Other contacts'.
      operationId: contSyncStart
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncStatus'
          description: Success
      summary: Start a new contacts sync
      tags:
      - ContSync
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X POST -H 'Authorization: Bearer <access token>' \
              -G https://api.aurinko.io/v1/contacts/sync
      x-accepts: application/json
  /v1/contacts/sync/updated:
    get:
      operationId: contSyncUpdated
      parameters:
      - description: A token received as nextDeltaToken from a previous sync request
          or a start sync request
        explode: true
        in: query
        name: deltaToken
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: A token received as nextPageToken from a previous page request
        explode: true
        in: query
        name: pageToken
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactsPage'
          description: Success
      summary: Request changed contacts (deltas)
      tags:
      - ContSync
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              -G https://api.aurinko.io/v1/contacts/sync/updated \
              -d deltaToken='a8b7c6d5e4f3g2h1'
      x-accepts: application/json
  /v1/contacts/sync/deleted:
    get:
      operationId: contSyncDeleted
      parameters:
      - description: A token received as nextDeltaToken from a previous sync request
          or a start sync request
        explode: true
        in: query
        name: deltaToken
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: A token received as nextPageToken from a previous page request
        explode: true
        in: query
        name: pageToken
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedPage'
          description: Success
      summary: Request deleted contacts (deltas)
      tags:
      - ContSync
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              -G https://api.aurinko.io/v1/contacts/sync/deleted \
              -d deltaToken='a8b7c6d5e4f3g2h1'
      x-accepts: application/json
  /v1/contacts/{contId}:
    delete:
      operationId: deleteContact
      parameters:
      - description: Contact id
        explode: false
        in: path
        name: contId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Success
        "404":
          description: Contact not found
      summary: Delete a contact
      tags:
      - Contacts
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X DELETE https://api.aurinko.io/v1/contacts/{contId}
      x-accepts: application/json
    get:
      operationId: contact
      parameters:
      - description: Contact id
        explode: false
        in: path
        name: contId
        required: true
        schema:
          type: string
        style: simple
      - description: Default text
        explode: true
        in: query
        name: bodyType
        required: false
        schema:
          $ref: '#/components/schemas/BodyType'
        style: form
      - explode: true
        in: query
        name: nativeProperties
        required: false
        schema:
          items:
            $ref: '#/components/schemas/NativeProperty'
          nullable: true
          type: array
        style: form
      - explode: true
        in: query
        name: withPhoto
        required: false
        schema:
          nullable: true
          type: boolean
        style: form
      - explode: true
        in: query
        name: includeUpdateToken
        required: false
        schema:
          nullable: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
          description: Success
      summary: Get a contact
      tags:
      - Contacts
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              https://api.aurinko.io/v1/contacts/{id}
      x-accepts: application/json
    patch:
      operationId: updateContact
      parameters:
      - description: Contact id
        explode: false
        in: path
        name: contId
        required: true
        schema:
          type: string
        style: simple
      - description: The HTTP entity tag of the resource (ETag). Used for web cache
          validation.
        explode: false
        in: header
        name: If-Match
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactOrId'
          description: Success
      summary: Update a contact
      tags:
      - Contacts
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X PATCH https://api.aurinko.io/v1/contacts/{contId} \
              -d '{
                       "name": {"givenName": "Sam", "familyName": "Black"},
                       "company": {"name":"Aurinko, Inc", "jobTitle": "QA engineer"},
                       "emailAddresses": [
                              {"address": "sam@aurinko.io", "type": "work"}
                           ],
                       "phoneNumbers": [
                              {"number": "415 8399949", "type": "work"}
                              {"value": "415 9499938","type": "Home"},
                           ]
                  }'
      x-content-type: application/json
      x-accepts: application/json
  /v1/contacts:
    post:
      operationId: createContact
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactOrId'
          description: Success
      summary: Create a new contact
      tags:
      - Contacts
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X POST https://api.aurinko.io/v1/contacts \
              -d '{
                       "name": {"givenName": "Sam", "familyName": "Black"},
                       "company": {"name":"Aurinko", "jobTitle": "Support engineer"},
                       "emailAddresses": [
                               {"address": "sam@aurinko.io", "type": "work"}
                           ],
                       "phoneNumbers": [
                               {"number": "415 8399949", "type": "work"}
                           ]
                          }'
      x-content-type: application/json
      x-accepts: application/json
  /v1/book/workHours:
    get:
      operationId: workHours
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeekWorkSchedule'
          description: Success
        "401":
          description: Authentication information is missing or invalid
          headers:
            WWW_Authenticate:
              explode: false
              schema:
                type: string
              style: simple
      summary: Get user work hours
      tags:
      - Booking
      x-accepts: application/json
  /v1/book/profiles:
    get:
      operationId: getAccBookings
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BookingOutDto'
                type: array
          description: Success
        "401":
          description: Authentication information is missing or invalid
          headers:
            WWW_Authenticate:
              explode: false
              schema:
                type: string
              style: simple
      summary: Get booking profiles
      tags:
      - Booking
      x-accepts: application/json
    post:
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingInDto'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingOutDto'
          description: Success
        "401":
          description: Authentication information is missing or invalid
          headers:
            WWW_Authenticate:
              explode: false
              schema:
                type: string
              style: simple
      summary: Create a booking profile
      tags:
      - Booking
      x-content-type: application/json
      x-accepts: application/json
  /v1/book/profiles/{id}:
    delete:
      operationId: deleteBooking
      parameters:
      - description: A booking id
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingSuccessOutDto'
          description: Success
        "401":
          description: Authentication information is missing or invalid
          headers:
            WWW_Authenticate:
              explode: false
              schema:
                type: string
              style: simple
      summary: Delete a booking profile by id
      tags:
      - Booking
      x-accepts: application/json
    get:
      operationId: getBooking
      parameters:
      - description: A booking id
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingOutDto'
          description: Success
        "401":
          description: Authentication information is missing or invalid
          headers:
            WWW_Authenticate:
              explode: false
              schema:
                type: string
              style: simple
      summary: Get a booking profile by id
      tags:
      - Booking
      x-accepts: application/json
    patch:
      operationId: updateBooking
      parameters:
      - description: A booking id
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingUpdateDto'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingSuccessOutDto'
          description: Success
        "401":
          description: Authentication information is missing or invalid
          headers:
            WWW_Authenticate:
              explode: false
              schema:
                type: string
              style: simple
      summary: Update a booking profile
      tags:
      - Booking
      x-content-type: application/json
      x-accepts: application/json
  /v1/book/{aurinkoClientId}/{name}/meeting:
    get:
      operationId: getMeetingTimes
      parameters:
      - description: Application client Id
        explode: false
        in: path
        name: aurinkoClientId
        required: true
        schema:
          type: string
        style: simple
      - description: Booking profile name
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingTimesOutDto'
          description: Success
      security: []
      summary: Get available meeting times
      tags:
      - Booking
      x-accepts: application/json
    post:
      operationId: createMeeting
      parameters:
      - description: Application client Id
        explode: false
        in: path
        name: aurinkoClientId
        required: true
        schema:
          type: string
        style: simple
      - description: Booking profile name
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMeetingDto'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingSuccessOutDto'
          description: Success
        "401":
          description: Authentication information is missing or invalid
          headers:
            WWW_Authenticate:
              explode: false
              schema:
                type: string
              style: simple
      security: []
      summary: Create a meeting
      tags:
      - Booking
      x-content-type: application/json
      x-accepts: application/json
  /v1/user:
    get:
      operationId: getUserInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndUserDto'
          description: Success
        "401":
          description: Access token is missing or invalid
      security:
      - UserSessionCookie: []
      - ClientIdHeader: []
      summary: Get user info
      tags:
      - User
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET --cookie "<END_USER_COOKIE>" \
              -H 'X-Aurinko-ClientId: <CLIENT_ID>' \
              https://api.aurinko.io/v1/user
      x-accepts: application/json
  /v1/user/accounts:
    get:
      operationId: getEndUserAccounts
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndUserAccountsPage'
          description: Success
        "401":
          description: Access token is missing or invalid
      security:
      - UserSessionCookie: []
      - ClientIdHeader: []
      summary: Get user accounts
      tags:
      - User
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET --cookie "<END_USER_COOKIE>" \
              -H 'X-Aurinko-ClientId: <CLIENT_ID>' \
              https://api.aurinko.io/v1/user/accounts
      x-accepts: application/json
  /v1/user/accounts/{id}:
    delete:
      description: "Deleting a primary account, also invalidates the user's session\
        \ cookie (logout)."
      operationId: logoutAccount
      parameters:
      - description: user's account Id
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
          description: Success
        "401":
          description: Access token is missing or invalid
      security:
      - UserSessionCookie: []
      - ClientIdHeader: []
      summary: Delete a user account
      tags:
      - User
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X DELETE --cookie "<END_USER_COOKIE>" \
              -H 'X-Aurinko-ClientId: <CLIENT_ID>' \
              https://api.aurinko.io/v1/user/accounts/<id>
      x-accepts: application/json
    get:
      operationId: getEndUserAccount
      parameters:
      - description: user's account Id
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndUserAccountDto'
          description: Success
        "401":
          description: Access token is missing or invalid
      security:
      - UserSessionCookie: []
      - ClientIdHeader: []
      summary: Get user account by id
      tags:
      - User
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET --cookie "<END_USER_COOKIE>" \
              -H 'X-Aurinko-ClientId: <CLIENT_ID>' \
              https://api.aurinko.io/v1/user/accounts/<id>
      x-accepts: application/json
  /v1/user/accounts/{id}/managed:
    post:
      operationId: copyAsManaged
      parameters:
      - description: user's account Id
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - explode: true
        in: query
        name: clientOrgId
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndUserAccountDto'
          description: Success
        "401":
          description: Access token is missing or invalid
      security:
      - UserSessionCookie: []
      - ClientIdHeader: []
      summary: Make a user account 'managed'
      tags:
      - User
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X POST --cookie "<END_USER_COOKIE>" \
              -H 'X-Aurinko-ClientId: <CLIENT_ID>' \
              https://api.aurinko.io/v1/user/accounts/<id>/managed
      x-accepts: application/json
  /v1/user/logout:
    post:
      description: Invalidates the user's session cookie
      operationId: logout
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
          description: Success
        "401":
          description: Access token is missing or invalid
      security:
      - UserSessionCookie: []
      - ClientIdHeader: []
      summary: Log out a user
      tags:
      - User
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X POST --cookie "<END_USER_COOKIE>" \
              -H 'X-Aurinko-ClientId: <CLIENT_ID>' \
              https://api.aurinko.io/v1/user/logout
      x-accepts: application/json
  /v1/account:
    delete:
      operationId: deleteAccount
      responses:
        "200":
          description: Success
        "401":
          description: Access token is missing or invalid
      summary: Delete the account
      tags:
      - Account
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X DELETE -H 'Authorization: Bearer <access token>' \
              https://api.aurinko.io/v1/account
      x-accepts: application/json
    get:
      operationId: getMyAccount
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAccountOutDto'
          description: Success
        "401":
          description: Access token is missing or invalid
      summary: Get account status
      tags:
      - Account
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              https://api.aurinko.io/v1/account
      x-accepts: application/json
  /v1/account/token:
    delete:
      operationId: deleteToken
      responses:
        "200":
          description: Success
        "401":
          description: Access token is missing or invalid
      summary: Delete the token and revoke all provider authentication data associated
        with it
      tags:
      - Account
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X DELETE -H 'Authorization: Bearer <access token>' \
              https://api.aurinko.io/v1/account/token
      x-accepts: application/json
  /v1/am/accounts:
    get:
      operationId: getAccounts
      parameters:
      - description: page size
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          format: int32
          nullable: true
          type: integer
        style: form
      - description: return records offset by the given number
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          format: int32
          nullable: true
          type: integer
        style: form
      - description: An authenticated OrgId
        explode: true
        in: query
        name: authOrgId
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - explode: true
        in: query
        name: serviceType
        required: false
        schema:
          $ref: '#/components/schemas/ServiceTypeNonDaemon'
        style: form
      - explode: true
        in: query
        name: subscriptionId
        required: false
        schema:
          format: int64
          nullable: true
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsPage'
          description: Success
        "401":
          description: Authentication information is missing or invalid
          headers:
            WWW_Authenticate:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - AppAuth: []
      summary: Get accounts
      tags:
      - Accounts
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -u ClientId:Secret -X GET https://api.aurinko.io/v1/am/accounts \
              -G -d clientOrgId='12345'
      x-accepts: application/json
    post:
      operationId: upsertPersonal
      parameters:
      - explode: true
        in: query
        name: userAccount
        required: false
        schema:
          $ref: '#/components/schemas/UserAccountType'
        style: form
      - description: ID of a user this account should be attached to.
        explode: true
        in: query
        name: userId
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - explode: true
        in: query
        name: recycleKeys
        required: false
        schema:
          items:
            $ref: '#/components/schemas/ServiceKey'
          nullable: true
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAccountInDto'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountSaveResult'
          description: Success
        "401":
          description: Authentication information is missing or invalid
          headers:
            WWW_Authenticate:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - AppAuth: []
      summary: Upsert an account
      tags:
      - Accounts
      x-content-type: application/json
      x-accepts: application/json
  /v1/am/accounts/{id}:
    delete:
      operationId: amAccountDelete
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          description: Success
        "401":
          description: Authentication information is missing or invalid
          headers:
            WWW_Authenticate:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - AppAuth: []
      summary: Delete account by ID
      tags:
      - Accounts
      x-codeSamples:
      - lang: cURL
        source: curl -u ClientId:Secret -X DELETE https://api.aurinko.io/v1/am/accounts/12345
      x-accepts: application/json
  /v1/am/svc_accounts:
    get:
      operationId: getSvcAccounts
      parameters:
      - description: page size
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          format: int32
          nullable: true
          type: integer
        style: form
      - description: return records offset by the given number
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          format: int32
          nullable: true
          type: integer
        style: form
      - description: A client OrgId
        explode: true
        in: query
        name: clientOrgId
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: An authenticated OrgId
        explode: true
        in: query
        name: authOrgId
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - explode: true
        in: query
        name: serviceType
        required: false
        schema:
          $ref: '#/components/schemas/ServiceTypeDaemon'
        style: form
      - explode: true
        in: query
        name: subscriptionId
        required: false
        schema:
          format: int64
          nullable: true
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsPage'
          description: Success
        "401":
          description: Authentication information is missing or invalid
          headers:
            WWW_Authenticate:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - AppAuth: []
      summary: Get service accounts
      tags:
      - Services
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -u ClientId:Secret -X GET https://api.aurinko.io/v1/am/svc_accounts \
              -G -d clientOrgId='12345'
      x-accepts: application/json
    post:
      operationId: upsertServiceAccount
      parameters:
      - description: Recycle Keys
        explode: true
        in: query
        name: recycleKeys
        required: false
        schema:
          items:
            $ref: '#/components/schemas/ServiceKey'
          nullable: true
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAccountInDto'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountSaveResult'
          description: Success
        "401":
          description: Authentication information is missing or invalid
          headers:
            WWW_Authenticate:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - AppAuth: []
      summary: Upsert a service account
      tags:
      - Services
      x-content-type: application/json
      x-accepts: application/json
  /v1/am/svc_accounts/{accId}/accounts:
    post:
      operationId: upsertManagedAccount
      parameters:
      - description: A service account id
        explode: false
        in: path
        name: accId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - explode: true
        in: query
        name: userAccount
        required: false
        schema:
          $ref: '#/components/schemas/UserAccountType'
        style: form
      - explode: true
        in: query
        name: userId
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - explode: true
        in: query
        name: recycleKeys
        required: false
        schema:
          items:
            $ref: '#/components/schemas/ServiceKey'
          nullable: true
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAccountInDto'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountSaveResult'
          description: Success
        "401":
          description: Authentication information is missing or invalid
          headers:
            WWW_Authenticate:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - AppAuth: []
      summary: Upsert a managed account
      tags:
      - Managed accounts
      x-content-type: application/json
      x-accepts: application/json
  /v1/auth/prepare:
    post:
      description: |
        Aurinko's standard user authentication uses cookies or session tokens. For clients using Office365
        add-in applications, Aurinko also supports ExchangeIdToken for external authentication (See
        https://learn.microsoft.com/en-us/office/dev/add-ins/outlook/inside-the-identity-token for more details).

        To use exchange identity token, do the following:
        1. Get an ExchangeIdToken from the Office365 add-in application. See the link above for more details.
        2. Make the call to `/auth/prepare` with these HTTP headers:
          - `X-Aurinko-Auth-Type`: `exchangeIdToken`
          - `Authorization`: `Bearer <your_exchange_id_token>` <br>
          This call returns a temporary token: `{ "token": "your-temporary-token" }`.
        3. Use the temporary token from `/auth/prepare` at the `/authorizeUser` endpoint.
        Pass it as a query parameter: `?token=your-temporary-token`.

        Post-authentication, a new user is created or an existing user is re-authorized. To access Aurinko API,
        client applications now can use exchange identity token by authenticating API requests with:
        - `X-Aurinko-Auth-Type`: `exchangeIdToken`
        - `Authorization`: `Bearer <your_exchange_id_token>`
      operationId: prepareAuth
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreparedAuthToken'
          description: Success
      summary: Prepare an authorization flow (with external authentication data)
      tags:
      - Auth
      x-accepts: application/json
  /v1/auth/authorize:
    get:
      operationId: authorize
      parameters:
      - description: Application Client Id from the Aurinko portal dashboard.
        explode: true
        in: query
        name: clientId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: serviceType
        required: true
        schema:
          $ref: '#/components/schemas/ServiceTypeNonDaemon'
        style: form
      - description: Space separated list of Aurinko defined scopes.
        explode: true
        in: query
        name: scopes
        required: false
        schema:
          items:
            $ref: '#/components/schemas/Scope'
          nullable: true
          type: array
        style: form
      - description: Space separated list of provider defined scopes
        explode: true
        in: query
        name: nativeScopes
        required: false
        schema:
          items:
            $ref: '#/components/schemas/NativeScope'
          nullable: true
          type: array
        style: form
      - description: "The type of response expected from the authorization flow. Choose\
          \ `token` to directly receive the authentication token, or `code` to obtain\
          \ a temporary code that can be exchanged for the token using the /auth/token\
          \ endpoint."
        explode: true
        in: query
        name: responseType
        required: false
        schema:
          default: code
          enum:
          - code
          - token
          nullable: true
          type: string
        style: form
      - description: For re-authorizing an existing account.
        explode: true
        in: query
        name: accountId
        required: false
        schema:
          format: int64
          nullable: true
          type: integer
        style: form
      - description: "Is passed as \"login_hint\" in OAuth flows, suggesting user\
          \ identity for a smoother login process."
        explode: true
        in: query
        name: loginHint
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: Return/Callback url for receiving the authorization code or token.
          It must be registered on the settings page in Aurinko portal.
        explode: true
        in: query
        name: returnUrl
        required: true
        schema:
          nullable: true
          type: string
        style: form
      - description: Custom state string that will be returned in the callback.
        explode: true
        in: query
        name: state
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: Allows clients to group accounts based on their internal organization
          data.
        explode: true
        in: query
        name: clientOrgId
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: "Can be used in the form-based authentication to specify the\
          \ URL of the server to which the user intends to authenticate. When included,\
          \ it automatically populates the corresponding input field on the authentication\
          \ form."
        explode: true
        in: query
        name: serverUrl
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: "When set to true, Aurinko will check if a user granted all requested\
          \ permissions."
        explode: true
        in: query
        name: ensureScopes
        required: false
        schema:
          nullable: true
          type: boolean
        style: form
      - description: Indicates whether to reuse an existing account instead of creating
          a new one during authentication.
        explode: true
        in: query
        name: recycle
        required: false
        schema:
          nullable: true
          type: boolean
        style: form
      responses:
        "303":
          description: Redirect
      security: []
      summary: Start an account authorization flow
      tags:
      - Auth
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -G https://api.aurinko.io/v1/auth/authorize \
              -d clientId='a8b7c6d5e4f3g2h1' \
              -d serviceType='Google' \
              -d scopes='Calendar.ReadWrite Mail.Read Mail.Send' \
              -d responseType='code' \
              -d returnUrl='https://yourapp.com/aurinko-redirect' \
              -d state='CustomStateString'
      x-accepts: application/json
  /v1/auth/authorizeDaemon:
    get:
      operationId: authorizeDaemon
      parameters:
      - description: Application Client Id from the Aurinko portal dashboard.
        explode: true
        in: query
        name: clientId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: serviceType
        required: true
        schema:
          $ref: '#/components/schemas/ServiceTypeDaemon'
        style: form
      - description: Space separated list of Aurinko defined scopes.
        explode: true
        in: query
        name: scopes
        required: false
        schema:
          items:
            $ref: '#/components/schemas/Scope'
          nullable: true
          type: array
        style: form
      - description: Space separated list of provider defined scopes.
        explode: true
        in: query
        name: nativeScopes
        required: false
        schema:
          items:
            $ref: '#/components/schemas/NativeScope'
          nullable: true
          type: array
        style: form
      - description: "The type of response expected from the authorization flow. Choose\
          \ `token` to directly receive the authentication token, or `code` to obtain\
          \ a temporary code that can be exchanged for the token using the /auth/token\
          \ endpoint."
        explode: true
        in: query
        name: responseType
        required: false
        schema:
          default: code
          enum:
          - code
          - token
          nullable: true
          type: string
        style: form
      - description: For re-authorizing an existing account.
        explode: true
        in: query
        name: accountId
        required: false
        schema:
          format: int64
          nullable: true
          type: integer
        style: form
      - description: Return/Callback url for receiving the authorization code or token.
          It must be registered on the settings page in Aurinko portal.
        explode: true
        in: query
        name: returnUrl
        required: true
        schema:
          nullable: true
          type: string
        style: form
      - description: Custom state string
        explode: true
        in: query
        name: state
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: Allows clients to group accounts based on their internal organization
          data.
        explode: true
        in: query
        name: clientOrgId
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: "When set to true, Aurinko will check if a user granted all requested\
          \ permissions."
        explode: true
        in: query
        name: ensureScopes
        required: false
        schema:
          nullable: true
          type: boolean
        style: form
      responses:
        "303":
          description: Redirect
      security: []
      summary: Start a service/daemon account authorization flow
      tags:
      - Auth
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -G https://api.aurinko.io/v1/auth/authorizeDaemon \
              -d clientId='a8b7c6d5e4f3g2h1' \
              -d serviceType='Google' \
              -d scopes='Calendar.ReadWrite Mail.Read Mail.Send' \
              -d returnUrl='https://yourapp.com/aurinko-redirect' \
              -d state='CustomStateString'
      x-accepts: application/json
  /v1/auth/authorizeUser:
    get:
      description: "This endpoint is used to authorize accounts that are linked to\
        \ `Users`. The `accountRole` parameter must be set to either `primary` or\
        \ `secondary`. A `primary` role creates a new User entity and assigns the\
        \ account as its key/primary account, with subsequent authorizations simply\
        \ re-authorizing the existing primary account with its User. The `secondary`\
        \ role requires an existing `User` cookie or `userId`+`userSignature` parameters\
        \ and links the new account to the `User` specified by the cookie or `userId`."
      operationId: authorizeUser
      parameters:
      - description: Application Client Id from the Aurinko portal dashboard.
        explode: true
        in: query
        name: clientId
        required: true
        schema:
          type: string
        style: form
      - description: "Relevant only for cookie-based authentication in multi-client\
          \ setups. When different client apps are connected to a single Aurinko application,\
          \ this string (commonly the user's email, but can be any unique identifier)\
          \ is combined with \"clientId\" to create a distinct authentication cookie\
          \ name and prevent cookie conflicts. Clients using cookie-based auth must\
          \ send \"clientId\" and \"mailboxInfo\" via \"X-Aurinko-Client-Id\" and\
          \ \"X-Aurinko-Mailbox-Info\" HTTP headers for accurate cookie identification."
        explode: true
        in: query
        name: mailboxInfo
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - explode: true
        in: query
        name: serviceType
        required: true
        schema:
          $ref: '#/components/schemas/ServiceTypeNonDaemon'
        style: form
      - description: Space separated list of Aurinko defined scopes.
        explode: true
        in: query
        name: scopes
        required: false
        schema:
          items:
            $ref: '#/components/schemas/Scope'
          nullable: true
          type: array
        style: form
      - description: Space separated list of provider defined scopes
        explode: true
        in: query
        name: nativeScopes
        required: false
        schema:
          items:
            $ref: '#/components/schemas/NativeScope'
          nullable: true
          type: array
        style: form
      - description: "The type of response expected from the user authorization flow.\
          \ For `primary` accounts, choose `cookie` or `code`, for `secondary` accounts,\
          \ choose `none`. `cookie` will set a cookie in the user's browser in the\
          \ callback, `code` will return a temporary code that can be exchanged for\
          \ a user session token using the /auth/token endpoint. `none` will return\
          \ only the status of the operation and information about an occurred error.\
          \ Because `secondary` accounts are linked to an existing and authorized\
          \ User, they don't need to receive a token or cookie in the callback."
        explode: true
        in: query
        name: responseType
        required: false
        schema:
          default: cookie
          enum:
          - cookie
          - code
          - none
          nullable: true
          type: string
        style: form
      - description: For re-authorizing an existing `secondary` account.
        explode: true
        in: query
        name: accountId
        required: false
        schema:
          format: int64
          nullable: true
          type: integer
        style: form
      - description: "Is passed as \"login_hint\" in OAuth flows, suggesting user\
          \ identity for a smoother login process."
        explode: true
        in: query
        name: loginHint
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: Return/Callback url for receiving the authorization code or token.
          It must be registered on the settings page in Aurinko portal.
        explode: true
        in: query
        name: returnUrl
        required: true
        schema:
          nullable: true
          type: string
        style: form
      - description: Custom state string
        explode: true
        in: query
        name: state
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: "The account's role in relation to a User. Use `primary` for\
          \ the account to act as a key account; this will create a new User if the\
          \ primary account doesn't exist already. If the primary account exists,\
          \ it's simply re-authorized without creating a new user. Choose `secondary`\
          \ to associate the account with an already existing User, which requires\
          \ either existing User cookie or `userId` + `userSignature` for identification."
        explode: true
        in: query
        name: accountRole
        required: true
        schema:
          enum:
          - primary
          - secondary
          type: string
        style: form
      - description: Identifies a user for whom a secondary account is being added.
          Should be used only when `userAccount=secondary` and user cookie is not
          present in the request. Works in conjunction with `timestamp` and `userSignature`
          to authorize the addition of secondary account.
        explode: true
        in: query
        name: userId
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: Request timestamp in seconds. Should be used only when `userAccount=secondary`
          and user cookie is not present in the request. Works in conjunction with
          `userId` and `userSignature` to authorize the addition of secondary account.
        explode: true
        in: query
        name: timestamp
        required: false
        schema:
          format: int64
          nullable: true
          type: integer
        style: form
      - description: "A string that is generated by concatenating `userId` and `timestamp`,\
          \ then hashing with HmacSHA256 using the application's `clientSecret`, then\
          \ encoding in Hex, base64, or base64 web format. Should be used only when\
          \ `userAccount=secondary` and user cookie is not present in the request\
          \ Works in conjunction with `userId` and `timestamp` to authorize the addition\
          \ of secondary account."
        explode: true
        in: query
        name: userSignature
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: "Can be used in the form-based authentication to specify the\
          \ URL of the server to which the user intends to authenticate. When included,\
          \ it automatically populates the corresponding input field on the authentication\
          \ form."
        explode: true
        in: query
        name: serverUrl
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: "When set to true, Aurinko will check if a user granted all requested\
          \ permissions."
        explode: true
        in: query
        name: ensureScopes
        required: false
        schema:
          nullable: true
          type: boolean
        style: form
      - description: Token from the /auth/prepare endpoint.
        explode: true
        in: query
        name: token
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "303":
          description: Redirect
      security: []
      summary: Start a user session authorization flow
      tags:
      - Auth
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -G https://api.aurinko.io/v1/auth/authorizeUser \
              -d clientId='a8b7c6d5e4f3g2h1' \
              -d serviceType='Google' \
              -d accountRole='primary' \
              -d scopes='Calendar.ReadWrite Mail.Read Mail.Send' \
              -d responseType='cookie' \
              -d returnUrl='https://yourapp.com/aurinko-redirect' \
              -d state='CustomStateString'
      x-accepts: application/json
  /v1/auth/token/{code}:
    get:
      operationId: getAccessTokenByCode
      parameters:
      - description: A code returned by /authorize
        explode: false
        in: path
        name: code
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountSaveResult'
          description: Success
        "401":
          description: Authentication information is missing or invalid
          headers:
            WWW_Authenticate:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - AppAuth: []
      summary: "Get access token, Deprecated use POST instead"
      tags:
      - Auth
      x-codeSamples:
      - lang: cURL
        source: curl -u ClientId:Secret -X GET https://api.aurinko.io/v1/auth/token/<code>
      x-accepts: application/json
    post:
      operationId: authCodeExchange
      parameters:
      - description: A code returned by /authorize
        explode: false
        in: path
        name: code
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountSaveResult'
          description: Success
        "401":
          description: Authentication information is missing or invalid
          headers:
            WWW_Authenticate:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - AppAuth: []
      summary: Request an access token
      tags:
      - Auth
      x-codeSamples:
      - lang: cURL
        source: curl -u ClientId:Secret -X POST https://api.aurinko.io/v1/auth/token/<code>
      x-accepts: application/json
  /v1/subscriptions:
    get:
      operationId: getSubscriptions
      parameters:
      - description: page size
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          format: int32
          nullable: true
          type: integer
        style: form
      - description: return records offset by the given number
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          format: int32
          nullable: true
          type: integer
        style: form
      - description: include inactive subscriptions
        explode: true
        in: query
        name: includeInactive
        required: false
        schema:
          default: false
          nullable: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionsPage'
          description: Success
      summary: Get a list of push event subscriptions
      tags:
      - Webhooks
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X POST https://api.aurinko.io/v1/subscriptions
      x-accepts: application/json
    post:
      operationId: subscribe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionRequest'
        description: "Resource, i.e '/email/messages', '/calendars/primary/events',\
          \ '/calendars/{id}/events'"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
          description: Success
      summary: Create a push event subscription
      tags:
      - Webhooks
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X POST https://api.aurinko.io/v1/subscriptions \
              -d '{
                  "resource": "/calendars/primary/events",
                  "notificationUrl": "https://myapp.com/push"
                 }'
      x-content-type: application/json
      x-accepts: application/json
  /v1/subscriptions/{id}:
    delete:
      operationId: unsubscribe
      parameters:
      - description: A subscription identifier
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          description: Success
      summary: Remove a subscription
      tags:
      - Webhooks
      x-accepts: application/json
    get:
      operationId: getSubscription
      parameters:
      - description: A subscription identifier
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
          description: Success
      summary: Check a subscription status
      tags:
      - Webhooks
      x-accepts: application/json
  /v1/tasklists:
    get:
      operationId: taskListsList
      parameters:
      - description: A token received as nextPageToken from a previous page request
          (for the first page it must be empty)
        explode: true
        in: query
        name: pageToken
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListPage'
          description: Success
      summary: Request list of task lists
      tags:
      - TaskLists
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X GET https://api.aurinko.io/v1/tasklists
      x-accepts: application/json
    post:
      operationId: createTaskList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskListCreate'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
          description: Success
      summary: Create a task list
      tags:
      - TaskLists
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X POST https://api.aurinko.io/v1/tasklists \
              -d '{ "title": "New task list" }'
      x-content-type: application/json
      x-accepts: application/json
  /v1/tasklists/{taskListId}:
    delete:
      operationId: deleteTaskList
      parameters:
      - description: Task list id
        explode: false
        in: path
        name: taskListId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
          description: Success
      summary: Delete a task list by id
      tags:
      - TaskLists
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X DELETE https://api.aurinko.io/v1/tasklists/{taskListId}
      x-accepts: application/json
    get:
      operationId: taskList
      parameters:
      - description: Task list id
        explode: false
        in: path
        name: taskListId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
          description: Success
      summary: Request a task list by id
      tags:
      - TaskLists
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X GET https://api.aurinko.io/v1/tasklists/{taskListId}
      x-accepts: application/json
    patch:
      operationId: updateTaskList
      parameters:
      - description: TaskList id
        explode: false
        in: path
        name: taskListId
        required: true
        schema:
          type: string
        style: simple
      - description: The HTTP entity tag of the resource (ETag). Used for web cache
          validation.
        explode: false
        in: header
        name: If-Match
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskListUpdate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
          description: Success
      summary: Update a task list
      tags:
      - TaskLists
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X PATCH https://api.aurinko.io/v1/tasklists \
              -d '{ "title": "New task list" }'
      x-content-type: application/json
      x-accepts: application/json
  /v1/tasklists/{taskListId}/sync:
    post:
      operationId: taskSyncStart
      parameters:
      - description: Task list id
        explode: false
        in: path
        name: taskListId
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Skip completed tasks before date.
        explode: true
        in: query
        name: skipCompletedBeforeDate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncStatus'
          description: Success
      summary: Start a new task sync
      tags:
      - TaskSync
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X POST -H 'Authorization: Bearer <access token>' \
              -G https://api.aurinko.io/v1/tasklists/{taskListId}/sync \
              -d skipCompletedBeforeDate='2023-05-29T10:58:27Z'
      x-accepts: application/json
  /v1/tasklists/{taskListId}/sync/updated:
    get:
      operationId: taskSyncUpdated
      parameters:
      - description: Task list id
        explode: false
        in: path
        name: taskListId
        required: true
        schema:
          type: string
        style: simple
      - description: A token received as nextDeltaToken from a previous sync request
          or a start sync request
        explode: true
        in: query
        name: deltaToken
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: A token received as nextPageToken from a previous page request
        explode: true
        in: query
        name: pageToken
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncTasksPage'
          description: Success
      summary: Request changed tasks (deltas)
      tags:
      - TaskSync
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              -G https://api.aurinko.io/v1/tasklists/{taskListId}/sync/updated \
              -d deltaToken='a8b7c6d5e4f3g2h1'
      x-accepts: application/json
  /v1/tasklists/{taskListId}/sync/deleted:
    get:
      operationId: taskSyncDeleted
      parameters:
      - description: Task list id
        explode: false
        in: path
        name: taskListId
        required: true
        schema:
          type: string
        style: simple
      - description: A token received as nextDeltaToken from a previous sync request
          or a start sync request
        explode: true
        in: query
        name: deltaToken
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: A token received as nextPageToken from a previous page request
        explode: true
        in: query
        name: pageToken
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedPage'
          description: Success
      summary: Request deleted tasks (deltas)
      tags:
      - TaskSync
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -X GET -H 'Authorization: Bearer <access token>' \
              -G https://api.aurinko.io/v1/tasklists/{taskListId}/sync/deleted \
              -d deltaToken='a8b7c6d5e4f3g2h1'
      x-accepts: application/json
  /v1/tasklists/{taskListId}/tasks:
    get:
      operationId: tasksList
      parameters:
      - description: Task list id
        explode: false
        in: path
        name: taskListId
        required: true
        schema:
          type: string
        style: simple
      - description: A token received as nextPageToken from a previous page request
          (for the first page it must be empty)
        explode: true
        in: query
        name: pageToken
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TasksPage'
          description: Success
      summary: Request list of tasks
      tags:
      - Tasks
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X GET https://api.aurinko.io/v1/tasklists/{taskListId}/tasks
      x-accepts: application/json
    post:
      operationId: createTask
      parameters:
      - description: Task list id
        explode: false
        in: path
        name: taskListId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskCreateResponse'
          description: Success
      summary: Create a task
      tags:
      - Tasks
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X POST https://api.aurinko.io/v1/tasklists/{taskListId}/tasks \
              -d '{ "title": "New task list" }'
      x-content-type: application/json
      x-accepts: application/json
  /v1/tasklists/{taskListId}/tasks/{id}:
    delete:
      operationId: deleteTask
      parameters:
      - description: Task list id
        explode: false
        in: path
        name: taskListId
        required: true
        schema:
          type: string
        style: simple
      - description: Task id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
          description: Success
      summary: Delete a task list by id
      tags:
      - Tasks
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X DELETE https://api.aurinko.io/v1/tasklists/{taskListId}/tasks/{id}
      x-accepts: application/json
    get:
      operationId: task
      parameters:
      - description: Task list id
        explode: false
        in: path
        name: taskListId
        required: true
        schema:
          type: string
        style: simple
      - description: Task id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: Success
      summary: Request a task by id
      tags:
      - Tasks
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X GET https://api.aurinko.io/v1/tasklists/{taskListId}/tasks/{id}
      x-accepts: application/json
    patch:
      operationId: updateTask
      parameters:
      - description: Task list id
        explode: false
        in: path
        name: taskListId
        required: true
        schema:
          type: string
        style: simple
      - description: Task id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The HTTP entity tag of the resource (ETag). Used for web cache
          validation.
        explode: false
        in: header
        name: If-Match
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskUpdateResponse'
          description: Success
      summary: Update a task
      tags:
      - Tasks
      x-codeSamples:
      - lang: cURL
        source: |-
          curl -H 'Authorization: Bearer <access token>' \
              -X PATCH https://api.aurinko.io/v1/tasklists \
              -d '{ "title": "New task list" }'
      x-content-type: application/json
      x-accepts: application/json
components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    UnauthorizedError2:
      description: Authentication information is missing or invalid
      headers:
        WWW_Authenticate:
          explode: false
          schema:
            type: string
          style: simple
    UnauthorizedError3:
      description: API key is missing or invalid
      headers:
        WWW_Authenticate:
          explode: false
          schema:
            type: string
          style: simple
    CommonOk:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OkResponse'
      description: Success
  schemas:
    TaskUpdate:
      example:
        previousId: previousId
        notes: notes
        startDateTime: 2000-01-23T04:56:07.000+00:00
        due: 2000-01-23T04:56:07.000+00:00
        importance: null
        categories:
        - categories
        - categories
        title: title
        parentId: parentId
        status: null
      properties:
        title:
          type: string
        parentId:
          type: string
        previousId:
          type: string
        notes:
          type: string
        status:
          $ref: '#/components/schemas/TaskStatus'
        importance:
          $ref: '#/components/schemas/TaskImportance'
        due:
          format: date-time
          type: string
        startDateTime:
          format: date-time
          type: string
        categories:
          items:
            type: string
          type: array
      type: object
    TaskListUpdate:
      example:
        title: title
      properties:
        title:
          type: string
      type: object
    EmailDraftResponse:
      example:
        id: id
      properties:
        id:
          readOnly: true
          type: string
      type: object
    ContactPhoto:
      example:
        name: name
        id: id
        mimeType: mimeType
        content: content
      properties:
        id:
          type: string
        name:
          type: string
        mimeType:
          type: string
        content:
          type: string
      type: object
    DeletedEmailMessage:
      example:
        internetMessageId: internetMessageId
        id: id
        folderId: folderId
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          readOnly: true
          type: string
        folderId:
          readOnly: true
          type: string
        internetMessageId:
          readOnly: true
          type: string
        timestamp:
          format: date-time
          type: string
      type: object
    TaskCreateResponse:
      example:
        record:
          owner: owner
          lastModifiedTime: 2000-01-23T04:56:07.000+00:00
          notes: notes
          importance: null
          completed: 2000-01-23T04:56:07.000+00:00
          title: title
          parentId: parentId
          startDateTime: 2000-01-23T04:56:07.000+00:00
          due: 2000-01-23T04:56:07.000+00:00
          omitted:
          - notes
          - notes
          etag: etag
          links:
          - link: link
            description: description
            source: source
          - link: link
            description: description
            source: source
          id: id
          position: position
          categories:
          - categories
          - categories
          status: null
        etag: etag
        id: id
      properties:
        id:
          readOnly: true
          type: string
        etag:
          readOnly: true
          type: string
        record:
          $ref: '#/components/schemas/Task'
      type: object
    EmailMessagesPageNext:
      example:
        records:
        - lastModifiedTime: 2000-01-23T04:56:07.000+00:00
          bcc:
          - address: address
            name: name
            raw: raw
          - address: address
            name: name
            raw: raw
          attachments:
          - size: 2
            inline: true
            name: name
            contentId: contentId
            id: id
            mimeType: mimeType
            contentLocation: contentLocation
            content: content
          - size: 2
            inline: true
            name: name
            contentId: contentId
            id: id
            mimeType: mimeType
            contentLocation: contentLocation
            content: content
          keywords:
          - keywords
          - keywords
          references: references
          subject: subject
          threadIndex: threadIndex
          internetHeaders:
          - name: name
            value: value
          - name: name
            value: value
          receivedAt: 2000-01-23T04:56:07.000+00:00
          body: body
          threadId: threadId
          internetMessageId: internetMessageId
          createdTime: 2000-01-23T04:56:07.000+00:00
          from:
            address: address
            name: name
            raw: raw
          id: id
          hasAttachments: true
          cc:
          - address: address
            name: name
            raw: raw
          - address: address
            name: name
            raw: raw
          sysLabels:
          - junk
          - junk
          nativeProperties:
            key: nativeProperties
          sysClassifications:
          - personal
          - personal
          inReplyTo: inReplyTo
          sentAt: 2000-01-23T04:56:07.000+00:00
          folderId: folderId
          meetingMessageMethod: request
          replyTo:
          - address: address
            name: name
            raw: raw
          - address: address
            name: name
            raw: raw
          omitted:
          - threadId
          - threadId
          sensitivity: null
          to:
          - address: address
            name: name
            raw: raw
          - address: address
            name: name
            raw: raw
          bodySnippet: bodySnippet
        - lastModifiedTime: 2000-01-23T04:56:07.000+00:00
          bcc:
          - address: address
            name: name
            raw: raw
          - address: address
            name: name
            raw: raw
          attachments:
          - size: 2
            inline: true
            name: name
            contentId: contentId
            id: id
            mimeType: mimeType
            contentLocation: contentLocation
            content: content
          - size: 2
            inline: true
            name: name
            contentId: contentId
            id: id
            mimeType: mimeType
            contentLocation: contentLocation
            content: content
          keywords:
          - keywords
          - keywords
          references: references
          subject: subject
          threadIndex: threadIndex
          internetHeaders:
          - name: name
            value: value
          - name: name
            value: value
          receivedAt: 2000-01-23T04:56:07.000+00:00
          body: body
          threadId: threadId
          internetMessageId: internetMessageId
          createdTime: 2000-01-23T04:56:07.000+00:00
          from:
            address: address
            name: name
            raw: raw
          id: id
          hasAttachments: true
          cc:
          - address: address
            name: name
            raw: raw
          - address: address
            name: name
            raw: raw
          sysLabels:
          - junk
          - junk
          nativeProperties:
            key: nativeProperties
          sysClassifications:
          - personal
          - personal
          inReplyTo: inReplyTo
          sentAt: 2000-01-23T04:56:07.000+00:00
          folderId: folderId
          meetingMessageMethod: request
          replyTo:
          - address: address
            name: name
            raw: raw
          - address: address
            name: name
            raw: raw
          omitted:
          - threadId
          - threadId
          sensitivity: null
          to:
          - address: address
            name: name
            raw: raw
          - address: address
            name: name
            raw: raw
          bodySnippet: bodySnippet
        nextPageToken: nextPageToken
        length: 0
      properties:
        nextPageToken:
          type: string
        length:
          type: integer
        records:
          items:
            $ref: '#/components/schemas/EmailMessage'
          type: array
      type: object
    ServiceType:
      enum:
      - Google
      - GoogleBot
      - Office365
      - EWS
      - IMAP
      - Salesforce
      - Salesflare
      - Repfabric
      - MsTeamsBot
      - Slack
      - SlackBot
      - SugarCRM
      - HighLevel
      - Hubspot
      - Zoom
      - ZoomBot
      - Webex
      - WebexBot
      - Pipedrive
      - EclipseERP
      - AutoQuotes
      - Teamwork
      - NetSuite
      - MCTrade
      - SpecPath
      - Zoho
      - Clientify
      - QuickBooks
      - ActiveCampaign
      - Creatio
      - ConstantContact
      - Fishbowl
      - iCloud
      type: string
    EmailDeletedPage:
      example:
        records:
        - internetMessageId: internetMessageId
          id: id
          folderId: folderId
          timestamp: 2000-01-23T04:56:07.000+00:00
        - internetMessageId: internetMessageId
          id: id
          folderId: folderId
          timestamp: 2000-01-23T04:56:07.000+00:00
        nextPageToken: nextPageToken
        nextDeltaToken: nextDeltaToken
        length: 0
      properties:
        nextPageToken:
          description: A token received as nextPageToken from a previous page request
          type: string
        nextDeltaToken:
          description: A token received as nextDeltaToken from a previous sync request
            or a start sync request
          type: string
        length:
          type: integer
        records:
          items:
            $ref: '#/components/schemas/DeletedEmailMessage'
          type: array
      type: object
    ServiceTypeNonDaemon:
      enum:
      - Google
      - Office365
      - EWS
      - IMAP
      - Salesforce
      - Salesflare
      - Repfabric
      - Slack
      - SugarCRM
      - HighLevel
      - Hubspot
      - Zoom
      - Webex
      - WebexBot
      - Pipedrive
      - EclipseERP
      - AutoQuotes
      - Teamwork
      - NetSuite
      - SpecPath
      - Zoho
      - Clientify
      - QuickBooks
      - ActiveCampaign
      - Creatio
      - ConstantContact
      - Fishbowl
      - iCloud
      type: string
    UpdateDraftTrackingIn:
      example:
        context: context
      properties:
        context:
          type: string
      type: object
    EmailTrackingData:
      example:
        htmlBody: htmlBody
        context: context
        trackReplies: true
        trackingCode: trackingCode
        linkCodes:
        - "{}"
        - "{}"
      properties:
        trackReplies:
          type: boolean
        htmlBody:
          type: string
        trackingCode:
          type: string
        context:
          type: string
        linkCodes:
          items:
            description: Pairs of strings
            type: object
          type: array
      type: object
    OutgoingEmailAttachment:
      example:
        inline: true
        name: name
        contentId: contentId
        mimeType: mimeType
        content: content
      properties:
        inline:
          type: boolean
        name:
          type: string
        mimeType:
          type: string
        contentId:
          type: string
        content:
          format: base64
          type: string
      type: object
    NativeProperty:
      type: string
    EmailAddress:
      example:
        address: address
        name: name
        raw: raw
      properties:
        name:
          type: string
        address:
          format: email
          type: string
        raw:
          readOnly: true
          type: string
      type: object
    OrganizationDto:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        xid: xid
        domain: domain
        serviceProvider: null
        name: name
        id: 5
      properties:
        id:
          format: int64
          type: integer
        serviceProvider:
          $ref: '#/components/schemas/ServiceProvider'
        xid:
          type: string
        domain:
          type: string
        name:
          type: string
        createdAt:
          format: date-time
          type: string
      type: object
    CalendarCreate:
      example:
        color: color
        name: name
        description: description
      properties:
        name:
          type: string
        color:
          type: string
        description:
          type: string
      type: object
    DripRequestDTO:
      example:
        actionVars:
          key: actionVars
        dripAfter: 2000-01-23T04:56:07.000+00:00
        ruleId: 0
        targets:
        - targets
        - targets
        status: disabled
      properties:
        status:
          enum:
          - disabled
          - active
          type: string
        ruleId:
          format: int64
          type: integer
        dripAfter:
          format: date-time
          type: string
        targets:
          items:
            type: string
          type: array
        actionVars:
          additionalProperties:
            type: string
          type: object
      type: object
    TaskCreate:
      example:
        previousId: previousId
        notes: notes
        startDateTime: 2000-01-23T04:56:07.000+00:00
        due: 2000-01-23T04:56:07.000+00:00
        importance: null
        categories:
        - categories
        - categories
        title: title
        parentId: parentId
        status: null
      properties:
        title:
          type: string
        parentId:
          type: string
        previousId:
          type: string
        notes:
          type: string
        status:
          $ref: '#/components/schemas/TaskStatus'
        importance:
          $ref: '#/components/schemas/TaskImportance'
        due:
          format: date-time
          type: string
        startDateTime:
          format: date-time
          type: string
        categories:
          items:
            type: string
          type: array
      type: object
    OnlineMeetingDetails:
      example:
        regionCode: regionCode
        pin: pin
        phone: phone
        infoUrl: infoUrl
        sip: sip
        url: url
      properties:
        url:
          type: string
        phone:
          readOnly: true
          type: string
        pin:
          readOnly: true
          type: string
        regionCode:
          readOnly: true
          type: string
        sip:
          readOnly: true
          type: string
        infoUrl:
          readOnly: true
          type: string
      type: object
    FreeBusySchedulePage:
      example:
        records:
        - workHours:
            daySchedules:
            - dayOfWeek: null
              workingIntervals:
              - start: start
                end: end
              - start: start
                end: end
            - dayOfWeek: null
              workingIntervals:
              - start: start
                end: end
              - start: start
                end: end
            timezone: timezone
          error: error
          items:
          - start: 2000-01-23T04:56:07.000+00:00
            end: 2000-01-23T04:56:07.000+00:00
            status: null
          - start: 2000-01-23T04:56:07.000+00:00
            end: 2000-01-23T04:56:07.000+00:00
            status: null
          email: email
        - workHours:
            daySchedules:
            - dayOfWeek: null
              workingIntervals:
              - start: start
                end: end
              - start: start
                end: end
            - dayOfWeek: null
              workingIntervals:
              - start: start
                end: end
              - start: start
                end: end
            timezone: timezone
          error: error
          items:
          - start: 2000-01-23T04:56:07.000+00:00
            end: 2000-01-23T04:56:07.000+00:00
            status: null
          - start: 2000-01-23T04:56:07.000+00:00
            end: 2000-01-23T04:56:07.000+00:00
            status: null
          email: email
      properties:
        records:
          items:
            $ref: '#/components/schemas/FreeBusySchedule'
          type: array
      type: object
    EmailTrackingPageNext:
      example:
        totalSize: 6
        offset: 0
        records:
        - trackOpens: true
          lastRespondedTime: 2000-01-23T04:56:07.000+00:00
          ignoreOpenClicks: true
          sendDate: 2000-01-23T04:56:07.000+00:00
          messageId: messageId
          trackReplies: true
          trackingCode: trackingCode
          userAgent: userAgent
          threadId: threadId
          hasBounced: true
          context: context
          location: location
          id: 1
          lastActivityTime: 2000-01-23T04:56:07.000+00:00
          trackLinks: true
          inetMessageId: inetMessageId
          remoteAddr: remoteAddr
        - trackOpens: true
          lastRespondedTime: 2000-01-23T04:56:07.000+00:00
          ignoreOpenClicks: true
          sendDate: 2000-01-23T04:56:07.000+00:00
          messageId: messageId
          trackReplies: true
          trackingCode: trackingCode
          userAgent: userAgent
          threadId: threadId
          hasBounced: true
          context: context
          location: location
          id: 1
          lastActivityTime: 2000-01-23T04:56:07.000+00:00
          trackLinks: true
          inetMessageId: inetMessageId
          remoteAddr: remoteAddr
        done: true
      properties:
        offset:
          type: integer
        totalSize:
          format: int64
          type: integer
        done:
          type: boolean
        records:
          items:
            $ref: '#/components/schemas/TrackingData'
          type: array
      type: object
    DayWorkSchedule:
      example:
        dayOfWeek: null
        workingIntervals:
        - start: start
          end: end
        - start: start
          end: end
      properties:
        dayOfWeek:
          $ref: '#/components/schemas/DayOfWeek'
        workingIntervals:
          items:
            $ref: '#/components/schemas/WorkingInterval'
          type: array
      type: object
    MeetingAttendee:
      example:
        timezone: timezone
        workHours:
          daySchedules:
          - dayOfWeek: null
            workingIntervals:
            - start: start
              end: end
            - start: start
              end: end
          - dayOfWeek: null
            workingIntervals:
            - start: start
              end: end
            - start: start
              end: end
          timezone: timezone
        error: error
        email: email
      properties:
        email:
          type: string
        timezone:
          type: string
        workHours:
          $ref: '#/components/schemas/WeekWorkSchedule'
        error:
          readOnly: true
          type: string
      type: object
    FollowupRuleAggregateOut:
      example:
        templateBody: templateBody
        name: name
        templateSubject: templateSubject
        id: 0
        actions:
        - intervalDays: 6
          message: message
        - intervalDays: 6
          message: message
        expectThreadResponse: true
      properties:
        id:
          type: integer
        name:
          type: string
        expectThreadResponse:
          type: boolean
        templateBody:
          type: string
        templateSubject:
          type: string
        actions:
          items:
            $ref: '#/components/schemas/FollowupRuleAction'
          type: array
      type: object
    EndUserDto:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        authOrgId: authOrgId
        appId: 0
        name: name
        lastActivity: 2000-01-23T04:56:07.000+00:00
        id: id
        accounts:
        - serviceType: null
          authObtainedAt: 2000-01-23T04:56:07.000+00:00
          tokenStatus: null
          loginString: loginString
          timezone: timezone
          trackingActive: true
          type: null
          authNativeScopes:
          - null
          - null
          authScopes:
          - null
          - null
          serverUrl: serverUrl
          clientOrgId: clientOrgId
          id: 6
          templatesCount: 2
          email: email
          authOrgId: authOrgId
          active: true
          nativeScopes:
          - null
          - null
          serverUrl2: serverUrl2
          parentId: 1
          authUserId: authUserId
          hasApiErrors: true
          organization:
            createdAt: 2000-01-23T04:56:07.000+00:00
            xid: xid
            domain: domain
            serviceProvider: null
            name: name
            id: 5
          name: name
          scopes:
          - null
          - null
          bookingCount: 5
          userAccountType: null
        - serviceType: null
          authObtainedAt: 2000-01-23T04:56:07.000+00:00
          tokenStatus: null
          loginString: loginString
          timezone: timezone
          trackingActive: true
          type: null
          authNativeScopes:
          - null
          - null
          authScopes:
          - null
          - null
          serverUrl: serverUrl
          clientOrgId: clientOrgId
          id: 6
          templatesCount: 2
          email: email
          authOrgId: authOrgId
          active: true
          nativeScopes:
          - null
          - null
          serverUrl2: serverUrl2
          parentId: 1
          authUserId: authUserId
          hasApiErrors: true
          organization:
            createdAt: 2000-01-23T04:56:07.000+00:00
            xid: xid
            domain: domain
            serviceProvider: null
            name: name
            id: 5
          name: name
          scopes:
          - null
          - null
          bookingCount: 5
          userAccountType: null
        trustedIdentity: true
        email: email
        externalIdType: null
      properties:
        id:
          type: string
        appId:
          format: int64
          type: integer
        email:
          type: string
        name:
          type: string
        authOrgId:
          type: string
        createdAt:
          format: date-time
          type: string
        lastActivity:
          format: date-time
          type: string
        trustedIdentity:
          type: boolean
        externalIdType:
          $ref: '#/components/schemas/EndUserExtIdType'
        accounts:
          items:
            $ref: '#/components/schemas/EndUserAccountDto'
          type: array
      type: object
    NativeScope:
      description: Native scope from provider's API.
      type: string
    ServiceTypeDaemon:
      enum:
      - Google
      - GoogleBot
      - Office365
      - EWS
      - MsTeamsBot
      - Slack
      - SlackBot
      - ZoomBot
      - MCTrade
      - Zoho
      type: string
    ContactPhoneNumber:
      example:
        number: number
        canonicalForm: canonicalForm
        type: work
      properties:
        number:
          type: string
        type:
          enum:
          - work
          - home
          - other
          - mobile
          - workMobile
          - main
          - companyMain
          - assistant
          - workFax
          - homeFax
          - otherFax
          - callback
          - pager
          - workPager
          - radio
          - telex
          - tty
          type: string
        canonicalForm:
          readOnly: true
          type: string
      type: object
    ScheduledDraft:
      example:
        jobId: 0
        errorMessage: errorMessage
        sendTime: 2000-01-23T04:56:07.000+00:00
        status: scheduled
      properties:
        jobId:
          format: int64
          readOnly: true
          type: integer
        sendTime:
          format: date-time
          readOnly: true
          type: string
        status:
          enum:
          - scheduled
          - sent
          - failed
          type: string
        errorMessage:
          readOnly: true
          type: string
      type: object
    MeetingTime:
      example:
        start: 2000-01-23T04:56:07.000+00:00
        end: 2000-01-23T04:56:07.000+00:00
      properties:
        start:
          format: date-time
          type: string
        end:
          format: date-time
          type: string
      type: object
    EmailTrackingEvent:
      example:
        messageId: messageId
        userAgent: userAgent
        trackingCode: trackingCode
        eventType: open
        threadId: threadId
        createdAt: 2000-01-23T04:56:07.000+00:00
        referrer: referrer
        internetMessageId: internetMessageId
        context: context
        location: location
        id: 1
        remoteAddr: remoteAddr
        trackingId: 5
      properties:
        id:
          format: int64
          type: integer
        createdAt:
          format: date-time
          type: string
        eventType:
          enum:
          - open
          - click
          - reply
          - replyBounce
          type: string
        location:
          type: string
        userAgent:
          type: string
        referrer:
          type: string
        remoteAddr:
          type: string
        threadId:
          type: string
        messageId:
          type: string
        internetMessageId:
          type: string
        trackingId:
          format: int64
          type: integer
        context:
          type: string
        trackingCode:
          type: string
      type: object
    BodyType:
      enum:
      - html
      - text
      type: string
    TaskListCreate:
      example:
        title: title
      properties:
        title:
          type: string
      type: object
    UserAccountType:
      description: Type of user account. Required if `userId` is provided.
      enum:
      - primary
      - secondary
      type: string
    RewriteHtml:
      example:
        tracking:
          trackOpensAfterSendDelay: 0
          context: context
          opens: true
          threadReplies: true
          links: true
        htmlText: htmlText
      properties:
        htmlText:
          type: string
        tracking:
          $ref: '#/components/schemas/OutEmailTrack'
      type: object
    SuggestMeetingTimesResponse:
      example:
        attendees:
        - timezone: timezone
          workHours:
            daySchedules:
            - dayOfWeek: null
              workingIntervals:
              - start: start
                end: end
              - start: start
                end: end
            - dayOfWeek: null
              workingIntervals:
              - start: start
                end: end
              - start: start
                end: end
            timezone: timezone
          error: error
          email: email
        - timezone: timezone
          workHours:
            daySchedules:
            - dayOfWeek: null
              workingIntervals:
              - start: start
                end: end
              - start: start
                end: end
            - dayOfWeek: null
              workingIntervals:
              - start: start
                end: end
              - start: start
                end: end
            timezone: timezone
          error: error
          email: email
        items:
        - start: 2000-01-23T04:56:07.000+00:00
          end: 2000-01-23T04:56:07.000+00:00
        - start: 2000-01-23T04:56:07.000+00:00
          end: 2000-01-23T04:56:07.000+00:00
      properties:
        items:
          items:
            $ref: '#/components/schemas/SuggestMeetingTimesResponse_items_inner'
          type: array
        attendees:
          items:
            $ref: '#/components/schemas/MeetingAttendee'
          type: array
      type: object
    AccountsPage:
      example:
        totalSize: 6
        offset: 0
        records:
        - serviceType: null
          tokenStatus: null
          authObtainedAt: 2000-01-23T04:56:07.000+00:00
          loginString: loginString
          timezone: timezone
          tokenIssuedAt: 2000-01-23T04:56:07.000+00:00
          type: null
          authNativeScopes:
          - null
          - null
          tokenError: tokenError
          authScopes:
          - null
          - null
          serverUrl: serverUrl
          clientOrgId: clientOrgId
          authExpiresAt: 2000-01-23T04:56:07.000+00:00
          id: 0
          email: email
          authOrgId: authOrgId
          active: true
          serverUrl2: serverUrl2
          userId: userId
          parentId: 6
          daemon: true
          mailboxAddress: mailboxAddress
          authUserId: authUserId
          name: name
          name2: name2
        - serviceType: null
          tokenStatus: null
          authObtainedAt: 2000-01-23T04:56:07.000+00:00
          loginString: loginString
          timezone: timezone
          tokenIssuedAt: 2000-01-23T04:56:07.000+00:00
          type: null
          authNativeScopes:
          - null
          - null
          tokenError: tokenError
          authScopes:
          - null
          - null
          serverUrl: serverUrl
          clientOrgId: clientOrgId
          authExpiresAt: 2000-01-23T04:56:07.000+00:00
          id: 0
          email: email
          authOrgId: authOrgId
          active: true
          serverUrl2: serverUrl2
          userId: userId
          parentId: 6
          daemon: true
          mailboxAddress: mailboxAddress
          authUserId: authUserId
          name: name
          name2: name2
        done: true
      properties:
        offset:
          type: integer
        totalSize:
          type: integer
        done:
          type: boolean
        records:
          items:
            $ref: '#/components/schemas/ApiAccountOutDto'
          type: array
      type: object
    TrackingData:
      example:
        trackOpens: true
        lastRespondedTime: 2000-01-23T04:56:07.000+00:00
        ignoreOpenClicks: true
        sendDate: 2000-01-23T04:56:07.000+00:00
        messageId: messageId
        trackReplies: true
        trackingCode: trackingCode
        userAgent: userAgent
        threadId: threadId
        hasBounced: true
        context: context
        location: location
        id: 1
        lastActivityTime: 2000-01-23T04:56:07.000+00:00
        trackLinks: true
        inetMessageId: inetMessageId
        remoteAddr: remoteAddr
      properties:
        id:
          format: int64
          type: integer
        messageId:
          type: string
        inetMessageId:
          type: string
        threadId:
          type: string
        sendDate:
          format: date-time
          type: string
        lastActivityTime:
          format: date-time
          type: string
        lastRespondedTime:
          format: date-time
          type: string
        trackReplies:
          type: boolean
        trackOpens:
          type: boolean
        trackLinks:
          type: boolean
        trackingCode:
          type: string
        context:
          type: string
        location:
          type: string
        userAgent:
          type: string
        remoteAddr:
          type: string
        ignoreOpenClicks:
          type: boolean
        hasBounced:
          type: boolean
      type: object
    TokenStatus:
      enum:
      - dead
      - invalid
      - active
      - required
      type: string
    ContactCompany:
      example:
        officeLocation: officeLocation
        jobTitle: jobTitle
        name: name
        yomiCompanyName: yomiCompanyName
        department: department
      properties:
        name:
          type: string
        officeLocation:
          type: string
        department:
          type: string
        jobTitle:
          type: string
        yomiCompanyName:
          type: string
      type: object
    TaskLink:
      example:
        link: link
        description: description
        source: source
      properties:
        source:
          type: string
        description:
          type: string
        link:
          type: string
      type: object
    TasksPage:
      example:
        records:
        - owner: owner
          lastModifiedTime: 2000-01-23T04:56:07.000+00:00
          notes: notes
          importance: null
          completed: 2000-01-23T04:56:07.000+00:00
          title: title
          parentId: parentId
          startDateTime: 2000-01-23T04:56:07.000+00:00
          due: 2000-01-23T04:56:07.000+00:00
          omitted:
          - notes
          - notes
          etag: etag
          links:
          - link: link
            description: description
            source: source
          - link: link
            description: description
            source: source
          id: id
          position: position
          categories:
          - categories
          - categories
          status: null
        - owner: owner
          lastModifiedTime: 2000-01-23T04:56:07.000+00:00
          notes: notes
          importance: null
          completed: 2000-01-23T04:56:07.000+00:00
          title: title
          parentId: parentId
          startDateTime: 2000-01-23T04:56:07.000+00:00
          due: 2000-01-23T04:56:07.000+00:00
          omitted:
          - notes
          - notes
          etag: etag
          links:
          - link: link
            description: description
            source: source
          - link: link
            description: description
            source: source
          id: id
          position: position
          categories:
          - categories
          - categories
          status: null
        nextPageToken: nextPageToken
        length: 0
      properties:
        nextPageToken:
          type: string
        length:
          type: integer
        records:
          items:
            $ref: '#/components/schemas/Task'
          type: array
      type: object
    ContactRelation:
      example:
        type: manager
        value: value
      properties:
        value:
          type: string
        type:
          enum:
          - manager
          - assistant
          - spouse
          type: string
      type: object
    FollowupConfig:
      example:
        emailAliases:
        - emailAliases
        - emailAliases
        timezone: timezone
      properties:
        timezone:
          type: string
        emailAliases:
          items:
            format: email
            type: string
          type: array
      type: object
    BookingTimesOutDto:
      example:
        availabilityStep: 6
        durationMinutes: 0
        additionalFields:
        - default: default
          name: name
          type: type
        - default: default
          name: name
          type: type
        subject: subject
        primaryColor: primaryColor
        startTime: 2000-01-23T04:56:07.000+00:00
        endTime: 2000-01-23T04:56:07.000+00:00
        items:
        - start: 2000-01-23T04:56:07.000+00:00
          end: 2000-01-23T04:56:07.000+00:00
        - start: 2000-01-23T04:56:07.000+00:00
          end: 2000-01-23T04:56:07.000+00:00
        secondaryColor: secondaryColor
      properties:
        items:
          description: List of available meeting slots.
          items:
            $ref: '#/components/schemas/MeetingTime'
          type: array
        startTime:
          description: Start time of available meeting slots.
          format: date-time
          type: string
        endTime:
          description: End time of available meeting slots.
          format: date-time
          type: string
        durationMinutes:
          description: Length of meeting in minutes
          type: integer
        availabilityStep:
          description: Determines the interval at which new meeting slots are made
            available throughout the working hours.
          type: integer
        subject:
          description: Subject for events booked using this profile.
          type: string
        primaryColor:
          description: "Primary Color, taken from the application settings."
          type: string
        secondaryColor:
          description: "The second Color, taken from the application settings."
          type: string
        additionalFields:
          description: "List of substitution variables like {{name}}, {{openMeetingUrl}},..."
          items:
            $ref: '#/components/schemas/AdditionalField'
          type: array
      type: object
    PreparedAuthToken:
      example:
        token: token
      properties:
        token:
          type: string
      type: object
    BookingSuccessOutDto:
      example:
        status: Ok
      properties:
        status:
          enum:
          - Ok
          type: string
      type: object
    DeletedRecord:
      example:
        id: id
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          readOnly: true
          type: string
        timestamp:
          format: date-time
          type: string
      type: object
    Calendar:
      example:
        color: color
        accessRole: owner
        name: name
        description: description
        id: id
        primary: true
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        color:
          readOnly: true
          type: string
        description:
          readOnly: true
          type: string
        accessRole:
          enum:
          - owner
          - writer
          - reader
          readOnly: true
          type: string
        primary:
          readOnly: true
          type: boolean
      type: object
    ContactUrl:
      example:
        href: href
        type: work
      properties:
        href:
          type: string
        type:
          enum:
          - work
          - home
          - other
          - blog
          - profile
          - homePage
          - ftp
          - reservations
          type: string
      type: object
    EmailDraft:
      example:
        scheduled:
          jobId: 0
          errorMessage: errorMessage
          sendTime: 2000-01-23T04:56:07.000+00:00
          status: scheduled
        id: id
        message:
          lastModifiedTime: 2000-01-23T04:56:07.000+00:00
          bcc:
          - address: address
            name: name
            raw: raw
          - address: address
            name: name
            raw: raw
          attachments:
          - size: 2
            inline: true
            name: name
            contentId: contentId
            id: id
            mimeType: mimeType
            contentLocation: contentLocation
            content: content
          - size: 2
            inline: true
            name: name
            contentId: contentId
            id: id
            mimeType: mimeType
            contentLocation: contentLocation
            content: content
          keywords:
          - keywords
          - keywords
          references: references
          subject: subject
          threadIndex: threadIndex
          internetHeaders:
          - name: name
            value: value
          - name: name
            value: value
          receivedAt: 2000-01-23T04:56:07.000+00:00
          body: body
          threadId: threadId
          internetMessageId: internetMessageId
          createdTime: 2000-01-23T04:56:07.000+00:00
          from:
            address: address
            name: name
            raw: raw
          id: id
          hasAttachments: true
          cc:
          - address: address
            name: name
            raw: raw
          - address: address
            name: name
            raw: raw
          sysLabels:
          - junk
          - junk
          nativeProperties:
            key: nativeProperties
          sysClassifications:
          - personal
          - personal
          inReplyTo: inReplyTo
          sentAt: 2000-01-23T04:56:07.000+00:00
          folderId: folderId
          meetingMessageMethod: request
          replyTo:
          - address: address
            name: name
            raw: raw
          - address: address
            name: name
            raw: raw
          omitted:
          - threadId
          - threadId
          sensitivity: null
          to:
          - address: address
            name: name
            raw: raw
          - address: address
            name: name
            raw: raw
          bodySnippet: bodySnippet
      properties:
        id:
          readOnly: true
          type: string
        message:
          $ref: '#/components/schemas/EmailMessage'
        scheduled:
          $ref: '#/components/schemas/ScheduledDraft'
      type: object
    EmailTrackingEventPageNext:
      example:
        totalSize: 6
        offset: 0
        records:
        - messageId: messageId
          userAgent: userAgent
          trackingCode: trackingCode
          eventType: open
          threadId: threadId
          createdAt: 2000-01-23T04:56:07.000+00:00
          referrer: referrer
          internetMessageId: internetMessageId
          context: context
          location: location
          id: 1
          remoteAddr: remoteAddr
          trackingId: 5
        - messageId: messageId
          userAgent: userAgent
          trackingCode: trackingCode
          eventType: open
          threadId: threadId
          createdAt: 2000-01-23T04:56:07.000+00:00
          referrer: referrer
          internetMessageId: internetMessageId
          context: context
          location: location
          id: 1
          remoteAddr: remoteAddr
          trackingId: 5
        done: true
      properties:
        offset:
          type: integer
        totalSize:
          format: int64
          type: integer
        done:
          type: boolean
        records:
          items:
            $ref: '#/components/schemas/EmailTrackingEvent'
          type: array
      type: object
    EndUserAccountsPage:
      example:
        records:
        - serviceType: null
          authObtainedAt: 2000-01-23T04:56:07.000+00:00
          tokenStatus: null
          loginString: loginString
          timezone: timezone
          trackingActive: true
          type: null
          authNativeScopes:
          - null
          - null
          authScopes:
          - null
          - null
          serverUrl: serverUrl
          clientOrgId: clientOrgId
          id: 6
          templatesCount: 2
          email: email
          authOrgId: authOrgId
          active: true
          nativeScopes:
          - null
          - null
          serverUrl2: serverUrl2
          parentId: 1
          authUserId: authUserId
          hasApiErrors: true
          organization:
            createdAt: 2000-01-23T04:56:07.000+00:00
            xid: xid
            domain: domain
            serviceProvider: null
            name: name
            id: 5
          name: name
          scopes:
          - null
          - null
          bookingCount: 5
          userAccountType: null
        - serviceType: null
          authObtainedAt: 2000-01-23T04:56:07.000+00:00
          tokenStatus: null
          loginString: loginString
          timezone: timezone
          trackingActive: true
          type: null
          authNativeScopes:
          - null
          - null
          authScopes:
          - null
          - null
          serverUrl: serverUrl
          clientOrgId: clientOrgId
          id: 6
          templatesCount: 2
          email: email
          authOrgId: authOrgId
          active: true
          nativeScopes:
          - null
          - null
          serverUrl2: serverUrl2
          parentId: 1
          authUserId: authUserId
          hasApiErrors: true
          organization:
            createdAt: 2000-01-23T04:56:07.000+00:00
            xid: xid
            domain: domain
            serviceProvider: null
            name: name
            id: 5
          name: name
          scopes:
          - null
          - null
          bookingCount: 5
          userAccountType: null
        nextPageToken: nextPageToken
        length: 0
      properties:
        nextPageToken:
          type: string
        length:
          type: integer
        records:
          items:
            $ref: '#/components/schemas/EndUserAccountDto'
          type: array
      type: object
    TaskStatus:
      enum:
      - notStarted
      - inProgress
      - completed
      - waitingOnOthers
      - deferred
      type: string
    BookingInDto:
      example:
        availabilityStep: 0
        durationMinutes: 30
        timeAvailableFor: P4W
        subject: subject
        workHours:
          daySchedules:
          - dayOfWeek: null
            workingIntervals:
            - start: start
              end: end
            - start: start
              end: end
          - dayOfWeek: null
            workingIntervals:
            - start: start
              end: end
            - start: start
              end: end
          timezone: timezone
        name: aurDemo - https://calendar.aurinko.io/aurDemo
        context: context
        description: description
        startTime: 2000-01-23T04:56:07.000+00:00
        location: location
        startConference: true
        openMeetingUrl: openMeetingUrl
      properties:
        name:
          description: Profile name used in calendar links to identify a profile.
          example: aurDemo - https://calendar.aurinko.io/aurDemo
          type: string
        durationMinutes:
          description: Duration of the meeting in minutes.
          example: 30
          type: integer
        availabilityStep:
          description: Determines the interval at which new meeting slots are made
            available throughout the working hours.
          type: integer
        startTime:
          description: "The beginning of the formation of intervals. Must be in the\
            \ future, otherwise the current time will be used."
          format: date-time
          type: string
        timeAvailableFor:
          description: "Time period (in ISO-8601 format) the profile is covering.\
            \ For example, P3M (3 months), P4W (4 weeks), P5D (5 days)."
          example: P4W
          type: string
        subject:
          description: Subject for events booked using this profile.
          type: string
        description:
          description: Description for events booked using this profile.
          type: string
        location:
          description: Location for events booked using this profile.
          type: string
        workHours:
          $ref: '#/components/schemas/WeekWorkSchedule'
        context:
          description: Custom client data stored for the profile.
          type: string
        startConference:
          description: "Whether to create an online conference (hangoutsMeet, teamsForBusiness,\
            \ etc.) for the event. Note, not all providers support creating conferences."
          type: boolean
        openMeetingUrl:
          description: "The value of the {{openMeetingUrl}} variable that can be used\
            \ in the event description or subject."
          type: string
      type: object
    EmailSendResponse:
      example:
        threadId: threadId
        id: id
        status: Ok
      properties:
        status:
          enum:
          - Ok
          type: string
        id:
          type: string
        threadId:
          type: string
      type: object
    Sensitivity:
      enum:
      - normal
      - private
      - personal
      - confidential
      type: string
    ApiAccountOutDto:
      example:
        serviceType: null
        tokenStatus: null
        authObtainedAt: 2000-01-23T04:56:07.000+00:00
        loginString: loginString
        timezone: timezone
        tokenIssuedAt: 2000-01-23T04:56:07.000+00:00
        type: null
        authNativeScopes:
        - null
        - null
        tokenError: tokenError
        authScopes:
        - null
        - null
        serverUrl: serverUrl
        clientOrgId: clientOrgId
        authExpiresAt: 2000-01-23T04:56:07.000+00:00
        id: 0
        email: email
        authOrgId: authOrgId
        active: true
        serverUrl2: serverUrl2
        userId: userId
        parentId: 6
        daemon: true
        mailboxAddress: mailboxAddress
        authUserId: authUserId
        name: name
        name2: name2
      properties:
        id:
          format: int64
          type: integer
        parentId:
          format: int64
          type: integer
        serviceType:
          $ref: '#/components/schemas/ServiceType'
        active:
          type: boolean
        tokenStatus:
          $ref: '#/components/schemas/TokenStatus'
        tokenError:
          type: string
        type:
          $ref: '#/components/schemas/AccountType'
        daemon:
          type: boolean
        loginString:
          type: string
        email:
          type: string
        mailboxAddress:
          type: string
        name:
          type: string
        name2:
          type: string
        serverUrl:
          type: string
        serverUrl2:
          type: string
        clientOrgId:
          type: string
        authUserId:
          type: string
        authOrgId:
          type: string
        timezone:
          type: string
        tokenIssuedAt:
          format: date-time
          type: string
        authScopes:
          items:
            $ref: '#/components/schemas/Scope'
          type: array
        authNativeScopes:
          items:
            $ref: '#/components/schemas/NativeScope'
          type: array
        authObtainedAt:
          format: date-time
          type: string
        authExpiresAt:
          format: date-time
          type: string
        userId:
          type: string
      type: object
    Event:
      example:
        lastModifiedTime: 2000-01-23T04:56:07.000+00:00
        attachments:
        - size: 2
          inline: true
          name: name
          contentId: contentId
          id: id
          mimeType: mimeType
          contentLocation: contentLocation
          content: content
        - size: 2
          inline: true
          name: name
          contentId: contentId
          id: id
          mimeType: mimeType
          contentLocation: contentLocation
          content: content
        showAs: null
        subject: subject
        htmlLink: htmlLink
        iCalUid: iCalUid
        start:
          dateTime: 2000-01-23T04:56:07.000+00:00
          dateOnly: 2000-01-23
          timezone: timezone
        globalId: globalId
        description: description
        recurrenceType: single
        recurrence:
          original: simple
          ical:
            rules:
            - rules
            - rules
            recurrenceStart:
              dateTime: 2000-01-23T04:56:07.000+00:00
              dateOnly: 2000-01-23
              timezone: timezone
          simple:
            pattern:
              monthOfYear: 7
              instance: first
              weekStart: monday
              dayOfMonth: 5
              interval: 6
              daysOfWeek:
              - null
              - null
              frequency: daily
            range:
              patternExclusions:
              - dateTime: 2000-01-23T04:56:07.000+00:00
                dateOnly: 2000-01-23
                timezone: timezone
              - dateTime: 2000-01-23T04:56:07.000+00:00
                dateOnly: 2000-01-23
                timezone: timezone
              recurrenceEnd: 2000-01-23
              count: 1
              recurrenceStart:
                dateTime: 2000-01-23T04:56:07.000+00:00
                dateOnly: 2000-01-23
                timezone: timezone
              type: byDate
        calendarId: calendarId
        organizer:
          emailAddress:
            address: address
            name: name
            raw: raw
          id: id
        omitted:
        - description
        - description
        createdTime: 2000-01-23T04:56:07.000+00:00
        etag: etag
        location: location
        end:
          dateTime: 2000-01-23T04:56:07.000+00:00
          dateOnly: 2000-01-23
          timezone: timezone
        meetingInfo:
          canceled: true
          onlineMeeting: true
          attendees:
          - emailAddress:
              address: address
              name: name
              raw: raw
            response: accepted
            comment: comment
            id: id
            type: required
          - emailAddress:
              address: address
              name: name
              raw: raw
            response: accepted
            comment: comment
            id: id
            type: required
          response: noResponse
          attendeePermissions:
          - inviteOthers
          - inviteOthers
          onlineMeetingProvider: onlineMeetingProvider
          onlineMeetingDetails:
            regionCode: regionCode
            pin: pin
            phone: phone
            infoUrl: infoUrl
            sip: sip
            url: url
        id: id
        sensitivity: null
        categories:
        - categories
        - categories
        hasAttachments: true
        occurrenceInfo:
          masterId: masterId
          originalStart:
            dateTime: 2000-01-23T04:56:07.000+00:00
            dateOnly: 2000-01-23
            timezone: timezone
          start:
            dateTime: 2000-01-23T04:56:07.000+00:00
            dateOnly: 2000-01-23
            timezone: timezone
          id: id
          type: regular
      properties:
        id:
          readOnly: true
          type: string
        etag:
          readOnly: true
          type: string
        calendarId:
          readOnly: true
          type: string
        createdTime:
          format: date-time
          readOnly: true
          type: string
        lastModifiedTime:
          format: date-time
          readOnly: true
          type: string
        subject:
          type: string
        description:
          type: string
        location:
          type: string
        start:
          $ref: '#/components/schemas/EventDateTime'
        end:
          $ref: '#/components/schemas/EventDateTime'
        organizer:
          $ref: '#/components/schemas/Organizer'
        meetingInfo:
          $ref: '#/components/schemas/MeetingInfo'
        recurrenceType:
          enum:
          - single
          - master
          - occurrence
          readOnly: true
          type: string
        recurrence:
          $ref: '#/components/schemas/Recurrence'
        occurrenceInfo:
          $ref: '#/components/schemas/OccurrenceInfo'
        iCalUid:
          readOnly: true
          type: string
        globalId:
          readOnly: true
          type: string
        showAs:
          $ref: '#/components/schemas/ShowAs'
        sensitivity:
          $ref: '#/components/schemas/Sensitivity'
        categories:
          items:
            type: string
          readOnly: true
          type: array
        htmlLink:
          type: string
        hasAttachments:
          readOnly: true
          type: boolean
        attachments:
          items:
            $ref: '#/components/schemas/EmailAttachment'
          type: array
        omitted:
          items:
            enum:
            - description
            - attendees
            - attachments
            type: string
          readOnly: true
          type: array
      type: object
    WeekWorkSchedule:
      example:
        daySchedules:
        - dayOfWeek: null
          workingIntervals:
          - start: start
            end: end
          - start: start
            end: end
        - dayOfWeek: null
          workingIntervals:
          - start: start
            end: end
          - start: start
            end: end
        timezone: timezone
      properties:
        daySchedules:
          items:
            $ref: '#/components/schemas/DayWorkSchedule'
          type: array
        timezone:
          type: string
      type: object
    ApiAccountInDto:
      example:
        serviceType: null
        authObtainedAt: 2000-01-23T04:56:07.000+00:00
        oauthClientId: oauthClientId
        loginString: loginString
        authOrgId: authOrgId
        timezone: timezone
        active: true
        authScopes:
        - null
        - null
        serverInfo: serverInfo
        authUserId: authUserId
        clientOrgId: clientOrgId
        serverUrl: serverUrl
        authExpiresAt: 2000-01-23T04:56:07.000+00:00
        name: name
        authString1: authString1
        authString2: authString2
        email: email
      properties:
        serviceType:
          $ref: '#/components/schemas/ServiceType'
        authScopes:
          items:
            $ref: '#/components/schemas/Scope'
          type: array
        authOrgId:
          type: string
        authUserId:
          type: string
        clientOrgId:
          type: string
        serverUrl:
          type: string
        loginString:
          type: string
        oauthClientId:
          type: string
        active:
          type: boolean
        authString1:
          type: string
        authString2:
          type: string
        authObtainedAt:
          format: date-time
          type: string
        authExpiresAt:
          format: date-time
          type: string
        email:
          type: string
        name:
          type: string
        serverInfo:
          type: string
        timezone:
          type: string
      type: object
    TaskUpdateResponse:
      example:
        record:
          owner: owner
          lastModifiedTime: 2000-01-23T04:56:07.000+00:00
          notes: notes
          importance: null
          completed: 2000-01-23T04:56:07.000+00:00
          title: title
          parentId: parentId
          startDateTime: 2000-01-23T04:56:07.000+00:00
          due: 2000-01-23T04:56:07.000+00:00
          omitted:
          - notes
          - notes
          etag: etag
          links:
          - link: link
            description: description
            source: source
          - link: link
            description: description
            source: source
          id: id
          position: position
          categories:
          - categories
          - categories
          status: null
        etag: etag
        id: id
      properties:
        id:
          readOnly: true
          type: string
        etag:
          readOnly: true
          type: string
        record:
          $ref: '#/components/schemas/Task'
      type: object
    ContactName:
      example:
        yomiGivenName: yomiGivenName
        displayName: displayName
        prefix: prefix
        givenName: givenName
        familyName: familyName
        middleName: middleName
        suffix: suffix
        yomiFamilyName: yomiFamilyName
      properties:
        displayName:
          type: string
        prefix:
          type: string
        givenName:
          type: string
        middleName:
          type: string
        familyName:
          type: string
        suffix:
          type: string
        yomiGivenName:
          type: string
        yomiFamilyName:
          type: string
      type: object
    BookingUpdateDto:
      example:
        availabilityStep: 0
        durationMinutes: 30
        timeAvailableFor: P4W
        subject: subject
        workHours:
          daySchedules:
          - dayOfWeek: null
            workingIntervals:
            - start: start
              end: end
            - start: start
              end: end
          - dayOfWeek: null
            workingIntervals:
            - start: start
              end: end
            - start: start
              end: end
          timezone: timezone
        name: aurDemo - https://calendar.aurinko.io/aurDemo
        context: context
        description: description
        startTime: 2000-01-23T04:56:07.000+00:00
        location: location
        startConference: true
        openMeetingUrl: openMeetingUrl
      properties:
        name:
          description: Profile name used in calendar links to identify a profile.
          example: aurDemo - https://calendar.aurinko.io/aurDemo
          type: string
        durationMinutes:
          description: Duration of the meeting in minutes.
          example: 30
          type: integer
        availabilityStep:
          description: Determines the interval at which new meeting slots are made
            available throughout the working hours.
          type: integer
        startTime:
          description: "The beginning of the formation of intervals. Must be in the\
            \ future, otherwise the current time will be used."
          format: date-time
          type: string
        timeAvailableFor:
          description: "Time period (in ISO-8601 format) the profile is covering.\
            \ For example, P3M (3 months), P4W (4 weeks), P5D (5 days)."
          example: P4W
          type: string
        subject:
          description: Subject for events booked using this profile.
          type: string
        description:
          description: Description for events booked using this profile.
          type: string
        location:
          description: Location for events booked using this profile.
          type: string
        workHours:
          $ref: '#/components/schemas/WeekWorkSchedule'
        context:
          description: Custom client data stored for the profile.
          type: string
        startConference:
          description: "Whether to create an online conference (hangoutsMeet, teamsForBusiness,\
            \ etc.) for the event. Note, not all providers support creating conferences."
          type: boolean
        openMeetingUrl:
          description: "The value of the {{openMeetingUrl}} variable that can be used\
            \ in the event description or subject."
          type: string
      type: object
    Recurrence:
      example:
        original: simple
        ical:
          rules:
          - rules
          - rules
          recurrenceStart:
            dateTime: 2000-01-23T04:56:07.000+00:00
            dateOnly: 2000-01-23
            timezone: timezone
        simple:
          pattern:
            monthOfYear: 7
            instance: first
            weekStart: monday
            dayOfMonth: 5
            interval: 6
            daysOfWeek:
            - null
            - null
            frequency: daily
          range:
            patternExclusions:
            - dateTime: 2000-01-23T04:56:07.000+00:00
              dateOnly: 2000-01-23
              timezone: timezone
            - dateTime: 2000-01-23T04:56:07.000+00:00
              dateOnly: 2000-01-23
              timezone: timezone
            recurrenceEnd: 2000-01-23
            count: 1
            recurrenceStart:
              dateTime: 2000-01-23T04:56:07.000+00:00
              dateOnly: 2000-01-23
              timezone: timezone
            type: byDate
      properties:
        original:
          enum:
          - simple
          - ical
          readOnly: true
          type: string
        ical:
          $ref: '#/components/schemas/Recurrence_ical'
        simple:
          $ref: '#/components/schemas/Recurrence_simple'
      type: object
    Task:
      example:
        owner: owner
        lastModifiedTime: 2000-01-23T04:56:07.000+00:00
        notes: notes
        importance: null
        completed: 2000-01-23T04:56:07.000+00:00
        title: title
        parentId: parentId
        startDateTime: 2000-01-23T04:56:07.000+00:00
        due: 2000-01-23T04:56:07.000+00:00
        omitted:
        - notes
        - notes
        etag: etag
        links:
        - link: link
          description: description
          source: source
        - link: link
          description: description
          source: source
        id: id
        position: position
        categories:
        - categories
        - categories
        status: null
      properties:
        id:
          type: string
        etag:
          type: string
        title:
          type: string
        lastModifiedTime:
          format: date-time
          type: string
        parentId:
          type: string
        position:
          type: string
        notes:
          type: string
        status:
          $ref: '#/components/schemas/TaskStatus'
        importance:
          $ref: '#/components/schemas/TaskImportance'
        due:
          format: date-time
          type: string
        completed:
          format: date-time
          type: string
        links:
          items:
            $ref: '#/components/schemas/TaskLink'
          type: array
        startDateTime:
          format: date-time
          type: string
        categories:
          items:
            type: string
          type: array
        owner:
          type: string
        omitted:
          items:
            enum:
            - notes
            type: string
          readOnly: true
          type: array
      type: object
    ConversationDripStatus:
      example:
        actionVars:
          key: actionVars
        dripLastNum: 0
        dripError: dripError
        subject: subject
        dripStartedAt: 2000-01-23T04:56:07.000+00:00
        rule:
        - templateBody: templateBody
          name: name
          templateSubject: templateSubject
          id: 0
          actions:
          - intervalDays: 6
            message: message
          - intervalDays: 6
            message: message
          expectThreadResponse: true
        - templateBody: templateBody
          name: name
          templateSubject: templateSubject
          id: 0
          actions:
          - intervalDays: 6
            message: message
          - intervalDays: 6
            message: message
          expectThreadResponse: true
        dripEndedAt: 2000-01-23T04:56:07.000+00:00
        dripResponder: dripResponder
        targets:
        - targets
        - targets
        convoId: convoId
        status: disabled
      properties:
        convoId:
          type: string
        subject:
          type: string
        status:
          enum:
          - disabled
          - active
          - failed
          - finished
          - ruleIncomplete
          type: string
        rule:
          items:
            $ref: '#/components/schemas/FollowupRuleAggregateOut'
          type: array
        dripStartedAt:
          format: date-time
          type: string
        dripLastNum:
          type: integer
        dripError:
          type: string
        dripEndedAt:
          format: date-time
          type: string
        actionVars:
          additionalProperties:
            type: string
          type: object
        targets:
          items:
            type: string
          type: array
        dripResponder:
          type: string
      type: object
    TaskListPage:
      example:
        records:
        - owner: true
          shared: true
          lastModifiedTime: 2000-01-23T04:56:07.000+00:00
          emailsList: true
          etag: etag
          id: id
          title: title
          defaultList: true
        - owner: true
          shared: true
          lastModifiedTime: 2000-01-23T04:56:07.000+00:00
          emailsList: true
          etag: etag
          id: id
          title: title
          defaultList: true
        nextPageToken: nextPageToken
        length: 0
      properties:
        nextPageToken:
          type: string
        length:
          type: integer
        records:
          items:
            $ref: '#/components/schemas/TaskList'
          type: array
      type: object
    EventDateTime:
      example:
        dateTime: 2000-01-23T04:56:07.000+00:00
        dateOnly: 2000-01-23
        timezone: timezone
      properties:
        dateOnly:
          format: date
          type: string
        dateTime:
          format: date-time
          type: string
        timezone:
          type: string
      type: object
    TaskList:
      example:
        owner: true
        shared: true
        lastModifiedTime: 2000-01-23T04:56:07.000+00:00
        emailsList: true
        etag: etag
        id: id
        title: title
        defaultList: true
      properties:
        id:
          type: string
        etag:
          type: string
        title:
          type: string
        owner:
          type: boolean
        shared:
          type: boolean
        defaultList:
          type: boolean
        emailsList:
          type: boolean
        lastModifiedTime:
          format: date-time
          type: string
      type: object
    OkResponse:
      example:
        status: Ok
      properties:
        status:
          enum:
          - Ok
          type: string
      type: object
    ServiceKey:
      description: Keys that control account re-cycling.
      enum:
      - email
      - orgId
      - userId
      - serverUrl
      - username
      - clientOrgId
      type: string
    EmailDraftSendStatus:
      example:
        status: Ok
      properties:
        status:
          enum:
          - Ok
          - Scheduled
          type: string
      type: object
    CreateMeetingDto:
      example:
        name: name
        time:
          start: 2000-01-23T04:56:07.000+00:00
          end: 2000-01-23T04:56:07.000+00:00
        substitutionData:
          key: substitutionData
        email: email
      properties:
        time:
          $ref: '#/components/schemas/SelectedMeetingTime'
        name:
          description: Username of the person requesting the meeting
          type: string
        email:
          description: Email of the person requesting the meeting
          type: string
        substitutionData:
          additionalProperties:
            type: string
          description: "Data for substitution instead of templates, key - value"
          type: object
      type: object
    AccountSaveResult:
      example:
        accountId: 0
        userSession: userSession
        accessToken: accessToken
        userId: userId
      properties:
        accountId:
          format: int64
          type: integer
        accessToken:
          type: string
        userId:
          type: string
        userSession:
          type: string
      type: object
    EmailAttachmentContent:
      example:
        content: content
      properties:
        content:
          format: base64
          type: string
      type: object
    SubscriptionResponse:
      example:
        notificationUrl: notificationUrl
        resource: resource
        active: true
        failDescription: failDescription
        id: 1
        failSince: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          format: int64
          type: integer
        resource:
          type: string
        notificationUrl:
          type: string
        active:
          type: boolean
        failSince:
          format: date-time
          type: string
        failDescription:
          type: string
      type: object
    CalendarUpdate:
      example:
        name: name
        description: description
      properties:
        name:
          type: string
        description:
          type: string
      type: object
    EmailMessage:
      example:
        lastModifiedTime: 2000-01-23T04:56:07.000+00:00
        bcc:
        - address: address
          name: name
          raw: raw
        - address: address
          name: name
          raw: raw
        attachments:
        - size: 2
          inline: true
          name: name
          contentId: contentId
          id: id
          mimeType: mimeType
          contentLocation: contentLocation
          content: content
        - size: 2
          inline: true
          name: name
          contentId: contentId
          id: id
          mimeType: mimeType
          contentLocation: contentLocation
          content: content
        keywords:
        - keywords
        - keywords
        references: references
        subject: subject
        threadIndex: threadIndex
        internetHeaders:
        - name: name
          value: value
        - name: name
          value: value
        receivedAt: 2000-01-23T04:56:07.000+00:00
        body: body
        threadId: threadId
        internetMessageId: internetMessageId
        createdTime: 2000-01-23T04:56:07.000+00:00
        from:
          address: address
          name: name
          raw: raw
        id: id
        hasAttachments: true
        cc:
        - address: address
          name: name
          raw: raw
        - address: address
          name: name
          raw: raw
        sysLabels:
        - junk
        - junk
        nativeProperties:
          key: nativeProperties
        sysClassifications:
        - personal
        - personal
        inReplyTo: inReplyTo
        sentAt: 2000-01-23T04:56:07.000+00:00
        folderId: folderId
        meetingMessageMethod: request
        replyTo:
        - address: address
          name: name
          raw: raw
        - address: address
          name: name
          raw: raw
        omitted:
        - threadId
        - threadId
        sensitivity: null
        to:
        - address: address
          name: name
          raw: raw
        - address: address
          name: name
          raw: raw
        bodySnippet: bodySnippet
      properties:
        id:
          readOnly: true
          type: string
        threadId:
          readOnly: true
          type: string
        createdTime:
          format: date-time
          readOnly: true
          type: string
        lastModifiedTime:
          format: date-time
          readOnly: true
          type: string
        sentAt:
          format: date-time
          readOnly: true
          type: string
        receivedAt:
          format: date-time
          readOnly: true
          type: string
        internetMessageId:
          readOnly: true
          type: string
        subject:
          readOnly: true
          type: string
        sysLabels:
          items:
            enum:
            - junk
            - trash
            - sent
            - inbox
            - unread
            - flagged
            - important
            - draft
            type: string
          readOnly: true
          type: array
        keywords:
          items:
            type: string
          type: array
        sysClassifications:
          items:
            enum:
            - personal
            - social
            - promotions
            - updates
            - forums
            type: string
          readOnly: true
          type: array
        sensitivity:
          $ref: '#/components/schemas/Sensitivity'
        meetingMessageMethod:
          enum:
          - request
          - reply
          - cancel
          - counter
          - other
          type: string
        from:
          $ref: '#/components/schemas/EmailAddress'
        to:
          items:
            $ref: '#/components/schemas/EmailAddress'
          type: array
        cc:
          items:
            $ref: '#/components/schemas/EmailAddress'
          type: array
        bcc:
          items:
            $ref: '#/components/schemas/EmailAddress'
          type: array
        replyTo:
          items:
            $ref: '#/components/schemas/EmailAddress'
          type: array
        hasAttachments:
          readOnly: true
          type: boolean
        body:
          readOnly: true
          type: string
        bodySnippet:
          readOnly: true
          type: string
        attachments:
          items:
            $ref: '#/components/schemas/EmailAttachment'
          type: array
        inReplyTo:
          readOnly: true
          type: string
        references:
          readOnly: true
          type: string
        threadIndex:
          readOnly: true
          type: string
        internetHeaders:
          items:
            $ref: '#/components/schemas/EmailHeader'
          type: array
        nativeProperties:
          additionalProperties:
            type: string
          type: object
        folderId:
          readOnly: true
          type: string
        omitted:
          items:
            enum:
            - threadId
            - body
            - attachments
            - recipients
            - internetHeaders
            type: string
          readOnly: true
          type: array
      type: object
    ContactsPage:
      example:
        records:
        - birthday: birthday
          addresses:
          - streetLine2: streetLine2
            poBox: poBox
            country: country
            city: city
            street: street
            postalCode: postalCode
            state: state
            type: work
          - streetLine2: streetLine2
            poBox: poBox
            country: country
            city: city
            street: street
            postalCode: postalCode
            state: state
            type: work
          lastModifiedTime: 2000-01-23T04:56:07.000+00:00
          notes: notes
          nativeProperties:
            key: nativeProperties
          keywords:
          - keywords
          - keywords
          nickName: nickName
          fileAs: fileAs
          photo:
            name: name
            id: id
            mimeType: mimeType
            content: content
          phoneNumbers:
          - number: number
            canonicalForm: canonicalForm
            type: work
          - number: number
            canonicalForm: canonicalForm
            type: work
          urls:
          - href: href
            type: work
          - href: href
            type: work
          emailAddresses:
          - address: address
            name: name
            type: type
          - address: address
            name: name
            type: type
          hasPhoto: true
          name:
            yomiGivenName: yomiGivenName
            displayName: displayName
            prefix: prefix
            givenName: givenName
            familyName: familyName
            middleName: middleName
            suffix: suffix
            yomiFamilyName: yomiFamilyName
          createdTime: 2000-01-23T04:56:07.000+00:00
          etag: etag
          company:
            officeLocation: officeLocation
            jobTitle: jobTitle
            name: name
            yomiCompanyName: yomiCompanyName
            department: department
          id: id
          relations:
          - type: manager
            value: value
          - type: manager
            value: value
        - birthday: birthday
          addresses:
          - streetLine2: streetLine2
            poBox: poBox
            country: country
            city: city
            street: street
            postalCode: postalCode
            state: state
            type: work
          - streetLine2: streetLine2
            poBox: poBox
            country: country
            city: city
            street: street
            postalCode: postalCode
            state: state
            type: work
          lastModifiedTime: 2000-01-23T04:56:07.000+00:00
          notes: notes
          nativeProperties:
            key: nativeProperties
          keywords:
          - keywords
          - keywords
          nickName: nickName
          fileAs: fileAs
          photo:
            name: name
            id: id
            mimeType: mimeType
            content: content
          phoneNumbers:
          - number: number
            canonicalForm: canonicalForm
            type: work
          - number: number
            canonicalForm: canonicalForm
            type: work
          urls:
          - href: href
            type: work
          - href: href
            type: work
          emailAddresses:
          - address: address
            name: name
            type: type
          - address: address
            name: name
            type: type
          hasPhoto: true
          name:
            yomiGivenName: yomiGivenName
            displayName: displayName
            prefix: prefix
            givenName: givenName
            familyName: familyName
            middleName: middleName
            suffix: suffix
            yomiFamilyName: yomiFamilyName
          createdTime: 2000-01-23T04:56:07.000+00:00
          etag: etag
          company:
            officeLocation: officeLocation
            jobTitle: jobTitle
            name: name
            yomiCompanyName: yomiCompanyName
            department: department
          id: id
          relations:
          - type: manager
            value: value
          - type: manager
            value: value
        nextPageToken: nextPageToken
        nextDeltaToken: nextDeltaToken
        length: 0
      properties:
        nextPageToken:
          description: A token received as nextPageToken from a previous page request
          type: string
        nextDeltaToken:
          description: A token received as nextDeltaToken from a previous sync request
            or a start sync request
          type: string
        length:
          type: integer
        records:
          items:
            $ref: '#/components/schemas/Contact'
          type: array
      type: object
    SyncTasksPage:
      example:
        records:
        - owner: owner
          lastModifiedTime: 2000-01-23T04:56:07.000+00:00
          notes: notes
          importance: null
          completed: 2000-01-23T04:56:07.000+00:00
          title: title
          parentId: parentId
          startDateTime: 2000-01-23T04:56:07.000+00:00
          due: 2000-01-23T04:56:07.000+00:00
          omitted:
          - notes
          - notes
          etag: etag
          links:
          - link: link
            description: description
            source: source
          - link: link
            description: description
            source: source
          id: id
          position: position
          categories:
          - categories
          - categories
          status: null
        - owner: owner
          lastModifiedTime: 2000-01-23T04:56:07.000+00:00
          notes: notes
          importance: null
          completed: 2000-01-23T04:56:07.000+00:00
          title: title
          parentId: parentId
          startDateTime: 2000-01-23T04:56:07.000+00:00
          due: 2000-01-23T04:56:07.000+00:00
          omitted:
          - notes
          - notes
          etag: etag
          links:
          - link: link
            description: description
            source: source
          - link: link
            description: description
            source: source
          id: id
          position: position
          categories:
          - categories
          - categories
          status: null
        nextPageToken: nextPageToken
        nextDeltaToken: nextDeltaToken
        length: 0
      properties:
        nextPageToken:
          description: A token received as nextPageToken from a previous page request
          type: string
        nextDeltaToken:
          description: A token received as nextDeltaToken from a previous sync request
            or a start sync request
          type: string
        length:
          type: integer
        records:
          items:
            $ref: '#/components/schemas/Task'
          type: array
      type: object
    SuggestMeetingTimesRequest:
      example:
        availabilityStep: 6
        freeStatuses: null
        durationMinutes: 0
        defaultWorkHours:
          daySchedules:
          - dayOfWeek: null
            workingIntervals:
            - start: start
              end: end
            - start: start
              end: end
          - dayOfWeek: null
            workingIntervals:
            - start: start
              end: end
            - start: start
              end: end
          timezone: timezone
        attendees:
        - timezone: timezone
          workHours:
            daySchedules:
            - dayOfWeek: null
              workingIntervals:
              - start: start
                end: end
              - start: start
                end: end
            - dayOfWeek: null
              workingIntervals:
              - start: start
                end: end
              - start: start
                end: end
            timezone: timezone
          error: error
          email: email
        - timezone: timezone
          workHours:
            daySchedules:
            - dayOfWeek: null
              workingIntervals:
              - start: start
                end: end
              - start: start
                end: end
            - dayOfWeek: null
              workingIntervals:
              - start: start
                end: end
              - start: start
                end: end
            timezone: timezone
          error: error
          email: email
        timeMax: 2000-01-23T04:56:07.000+00:00
        timeMin: 2000-01-23T04:56:07.000+00:00
        defaultTimezone: defaultTimezone
      properties:
        timeMin:
          format: date-time
          type: string
        timeMax:
          format: date-time
          type: string
        durationMinutes:
          type: integer
        availabilityStep:
          default: 30
          type: integer
        attendees:
          items:
            $ref: '#/components/schemas/MeetingAttendee'
          type: array
        defaultTimezone:
          type: string
        defaultWorkHours:
          $ref: '#/components/schemas/WeekWorkSchedule'
        freeStatuses:
          $ref: '#/components/schemas/ShowAs'
      type: object
    SyncStatus:
      example:
        ready: true
        syncUpdatedToken: syncUpdatedToken
        syncDeletedToken: syncDeletedToken
      properties:
        syncUpdatedToken:
          type: string
        syncDeletedToken:
          type: string
        ready:
          type: boolean
      type: object
    ContactOrId:
      example:
        record:
          birthday: birthday
          addresses:
          - streetLine2: streetLine2
            poBox: poBox
            country: country
            city: city
            street: street
            postalCode: postalCode
            state: state
            type: work
          - streetLine2: streetLine2
            poBox: poBox
            country: country
            city: city
            street: street
            postalCode: postalCode
            state: state
            type: work
          lastModifiedTime: 2000-01-23T04:56:07.000+00:00
          notes: notes
          nativeProperties:
            key: nativeProperties
          keywords:
          - keywords
          - keywords
          nickName: nickName
          fileAs: fileAs
          photo:
            name: name
            id: id
            mimeType: mimeType
            content: content
          phoneNumbers:
          - number: number
            canonicalForm: canonicalForm
            type: work
          - number: number
            canonicalForm: canonicalForm
            type: work
          urls:
          - href: href
            type: work
          - href: href
            type: work
          emailAddresses:
          - address: address
            name: name
            type: type
          - address: address
            name: name
            type: type
          hasPhoto: true
          name:
            yomiGivenName: yomiGivenName
            displayName: displayName
            prefix: prefix
            givenName: givenName
            familyName: familyName
            middleName: middleName
            suffix: suffix
            yomiFamilyName: yomiFamilyName
          createdTime: 2000-01-23T04:56:07.000+00:00
          etag: etag
          company:
            officeLocation: officeLocation
            jobTitle: jobTitle
            name: name
            yomiCompanyName: yomiCompanyName
            department: department
          id: id
          relations:
          - type: manager
            value: value
          - type: manager
            value: value
        etag: etag
        id: id
      properties:
        id:
          readOnly: true
          type: string
        etag:
          readOnly: true
          type: string
        record:
          $ref: '#/components/schemas/Contact'
      type: object
    UpdateMessageStatusData:
      example:
        keywords:
        - keywords
        - keywords
        unread: true
      properties:
        unread:
          type: boolean
        keywords:
          items:
            type: string
          type: array
      type: object
    OutgoingEmailReply:
      example:
        cc:
        - address: address
          name: name
          raw: raw
        - address: address
          name: name
          raw: raw
        followUp:
          actionVars:
            key: actionVars
          ruleId: 6
        bcc:
        - address: address
          name: name
          raw: raw
        - address: address
          name: name
          raw: raw
        xHeaders:
        - name: name
          value: value
        - name: name
          value: value
        attachments:
        - inline: true
          name: name
          contentId: contentId
          mimeType: mimeType
          content: content
        - inline: true
          name: name
          contentId: contentId
          mimeType: mimeType
          content: content
        subject: subject
        replyTo:
        - address: address
          name: name
          raw: raw
        - address: address
          name: name
          raw: raw
        from:
          address: address
          name: name
          raw: raw
        to:
        - address: address
          name: name
          raw: raw
        - address: address
          name: name
          raw: raw
        body: body
        tracking:
          trackOpensAfterSendDelay: 0
          context: context
          opens: true
          threadReplies: true
          links: true
      properties:
        from:
          $ref: '#/components/schemas/EmailAddress'
        subject:
          type: string
        body:
          type: string
        to:
          items:
            $ref: '#/components/schemas/EmailAddress'
          type: array
        cc:
          items:
            $ref: '#/components/schemas/EmailAddress'
          type: array
        bcc:
          items:
            $ref: '#/components/schemas/EmailAddress'
          type: array
        replyTo:
          items:
            $ref: '#/components/schemas/EmailAddress'
          type: array
        xHeaders:
          items:
            $ref: '#/components/schemas/EmailHeader'
          type: array
        attachments:
          items:
            $ref: '#/components/schemas/OutgoingEmailAttachment'
          type: array
        tracking:
          $ref: '#/components/schemas/OutEmailTrack'
        followUp:
          $ref: '#/components/schemas/FollowUpOutgoing'
      type: object
    TaskImportance:
      enum:
      - low
      - normal
      - high
      type: string
    CalendarsPage:
      example:
        records:
        - color: color
          accessRole: owner
          name: name
          description: description
          id: id
          primary: true
        - color: color
          accessRole: owner
          name: name
          description: description
          id: id
          primary: true
        nextPageToken: nextPageToken
        length: 0
      properties:
        nextPageToken:
          type: string
        length:
          type: integer
        records:
          items:
            $ref: '#/components/schemas/Calendar'
          type: array
      type: object
    EndUserAccountDto:
      example:
        serviceType: null
        authObtainedAt: 2000-01-23T04:56:07.000+00:00
        tokenStatus: null
        loginString: loginString
        timezone: timezone
        trackingActive: true
        type: null
        authNativeScopes:
        - null
        - null
        authScopes:
        - null
        - null
        serverUrl: serverUrl
        clientOrgId: clientOrgId
        id: 6
        templatesCount: 2
        email: email
        authOrgId: authOrgId
        active: true
        nativeScopes:
        - null
        - null
        serverUrl2: serverUrl2
        parentId: 1
        authUserId: authUserId
        hasApiErrors: true
        organization:
          createdAt: 2000-01-23T04:56:07.000+00:00
          xid: xid
          domain: domain
          serviceProvider: null
          name: name
          id: 5
        name: name
        scopes:
        - null
        - null
        bookingCount: 5
        userAccountType: null
      properties:
        id:
          format: int64
          type: integer
        parentId:
          format: int64
          type: integer
        serviceType:
          $ref: '#/components/schemas/ServiceType'
        userAccountType:
          $ref: '#/components/schemas/UserAccountType'
        type:
          $ref: '#/components/schemas/AccountType'
        active:
          type: boolean
        loginString:
          type: string
        email:
          type: string
        name:
          type: string
        serverUrl:
          type: string
        serverUrl2:
          type: string
        clientOrgId:
          type: string
        authUserId:
          type: string
        authOrgId:
          type: string
        timezone:
          type: string
        authObtainedAt:
          format: date-time
          type: string
        organization:
          $ref: '#/components/schemas/OrganizationDto'
        tokenStatus:
          $ref: '#/components/schemas/TokenStatus'
        scopes:
          items:
            $ref: '#/components/schemas/Scope'
          type: array
        authScopes:
          items:
            $ref: '#/components/schemas/Scope'
          type: array
        nativeScopes:
          items:
            $ref: '#/components/schemas/NativeScope'
          type: array
        authNativeScopes:
          items:
            $ref: '#/components/schemas/NativeScope'
          type: array
        hasApiErrors:
          type: boolean
        bookingCount:
          type: integer
        trackingActive:
          type: boolean
        templatesCount:
          type: integer
      type: object
    SeriesInfo:
      example:
        recurrence:
          original: simple
          ical:
            rules:
            - rules
            - rules
            recurrenceStart:
              dateTime: 2000-01-23T04:56:07.000+00:00
              dateOnly: 2000-01-23
              timezone: timezone
          simple:
            pattern:
              monthOfYear: 7
              instance: first
              weekStart: monday
              dayOfMonth: 5
              interval: 6
              daysOfWeek:
              - null
              - null
              frequency: daily
            range:
              patternExclusions:
              - dateTime: 2000-01-23T04:56:07.000+00:00
                dateOnly: 2000-01-23
                timezone: timezone
              - dateTime: 2000-01-23T04:56:07.000+00:00
                dateOnly: 2000-01-23
                timezone: timezone
              recurrenceEnd: 2000-01-23
              count: 1
              recurrenceStart:
                dateTime: 2000-01-23T04:56:07.000+00:00
                dateOnly: 2000-01-23
                timezone: timezone
              type: byDate
        deletedOccurrences:
        - masterId: masterId
          originalStart:
            dateTime: 2000-01-23T04:56:07.000+00:00
            dateOnly: 2000-01-23
            timezone: timezone
          start:
            dateTime: 2000-01-23T04:56:07.000+00:00
            dateOnly: 2000-01-23
            timezone: timezone
          id: id
          type: regular
        - masterId: masterId
          originalStart:
            dateTime: 2000-01-23T04:56:07.000+00:00
            dateOnly: 2000-01-23
            timezone: timezone
          start:
            dateTime: 2000-01-23T04:56:07.000+00:00
            dateOnly: 2000-01-23
            timezone: timezone
          id: id
          type: regular
        globalId: globalId
        modifiedOccurrences:
        - masterId: masterId
          originalStart:
            dateTime: 2000-01-23T04:56:07.000+00:00
            dateOnly: 2000-01-23
            timezone: timezone
          start:
            dateTime: 2000-01-23T04:56:07.000+00:00
            dateOnly: 2000-01-23
            timezone: timezone
          id: id
          type: regular
        - masterId: masterId
          originalStart:
            dateTime: 2000-01-23T04:56:07.000+00:00
            dateOnly: 2000-01-23
            timezone: timezone
          start:
            dateTime: 2000-01-23T04:56:07.000+00:00
            dateOnly: 2000-01-23
            timezone: timezone
          id: id
          type: regular
        id: id
      properties:
        id:
          readOnly: true
          type: string
        globalId:
          readOnly: true
          type: string
        recurrence:
          $ref: '#/components/schemas/Recurrence'
        modifiedOccurrences:
          items:
            $ref: '#/components/schemas/OccurrenceInfo'
          readOnly: true
          type: array
        deletedOccurrences:
          items:
            $ref: '#/components/schemas/OccurrenceInfo'
          readOnly: true
          type: array
      type: object
    ContactPostalAddress:
      example:
        streetLine2: streetLine2
        poBox: poBox
        country: country
        city: city
        street: street
        postalCode: postalCode
        state: state
        type: work
      properties:
        street:
          type: string
        streetLine2:
          type: string
        poBox:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        country:
          type: string
        type:
          enum:
          - work
          - home
          - other
          type: string
      type: object
    FollowupRuleAction:
      example:
        intervalDays: 6
        message: message
      properties:
        intervalDays:
          type: integer
        message:
          type: string
      type: object
    ServiceProvider:
      enum:
      - Office365
      - Google
      - Zoho
      - IMAP
      - EWS
      - Yahoo
      - AOL
      - iCloud
      - BigPond
      - Fastmail
      - Repfabric
      - Salesforce
      - Salesflare
      - SugarCRM
      - HighLevel
      - Hubspot
      - Pipedrive
      - AutoQuotes
      - SpecPath
      - Clientify
      - Teamwork
      - EclipseERP
      - NetSuite
      - Fishbowl
      - Slack
      - Zoom
      - Webex
      - MCTrade
      - Creatio
      - QuickBooks
      - ActiveCampaign
      - ConstantContact
      - Yoxel
      type: string
    EventOrId:
      example:
        iCalUId: iCalUId
        record:
          lastModifiedTime: 2000-01-23T04:56:07.000+00:00
          attachments:
          - size: 2
            inline: true
            name: name
            contentId: contentId
            id: id
            mimeType: mimeType
            contentLocation: contentLocation
            content: content
          - size: 2
            inline: true
            name: name
            contentId: contentId
            id: id
            mimeType: mimeType
            contentLocation: contentLocation
            content: content
          showAs: null
          subject: subject
          htmlLink: htmlLink
          iCalUid: iCalUid
          start:
            dateTime: 2000-01-23T04:56:07.000+00:00
            dateOnly: 2000-01-23
            timezone: timezone
          globalId: globalId
          description: description
          recurrenceType: single
          recurrence:
            original: simple
            ical:
              rules:
              - rules
              - rules
              recurrenceStart:
                dateTime: 2000-01-23T04:56:07.000+00:00
                dateOnly: 2000-01-23
                timezone: timezone
            simple:
              pattern:
                monthOfYear: 7
                instance: first
                weekStart: monday
                dayOfMonth: 5
                interval: 6
                daysOfWeek:
                - null
                - null
                frequency: daily
              range:
                patternExclusions:
                - dateTime: 2000-01-23T04:56:07.000+00:00
                  dateOnly: 2000-01-23
                  timezone: timezone
                - dateTime: 2000-01-23T04:56:07.000+00:00
                  dateOnly: 2000-01-23
                  timezone: timezone
                recurrenceEnd: 2000-01-23
                count: 1
                recurrenceStart:
                  dateTime: 2000-01-23T04:56:07.000+00:00
                  dateOnly: 2000-01-23
                  timezone: timezone
                type: byDate
          calendarId: calendarId
          organizer:
            emailAddress:
              address: address
              name: name
              raw: raw
            id: id
          omitted:
          - description
          - description
          createdTime: 2000-01-23T04:56:07.000+00:00
          etag: etag
          location: location
          end:
            dateTime: 2000-01-23T04:56:07.000+00:00
            dateOnly: 2000-01-23
            timezone: timezone
          meetingInfo:
            canceled: true
            onlineMeeting: true
            attendees:
            - emailAddress:
                address: address
                name: name
                raw: raw
              response: accepted
              comment: comment
              id: id
              type: required
            - emailAddress:
                address: address
                name: name
                raw: raw
              response: accepted
              comment: comment
              id: id
              type: required
            response: noResponse
            attendeePermissions:
            - inviteOthers
            - inviteOthers
            onlineMeetingProvider: onlineMeetingProvider
            onlineMeetingDetails:
              regionCode: regionCode
              pin: pin
              phone: phone
              infoUrl: infoUrl
              sip: sip
              url: url
          id: id
          sensitivity: null
          categories:
          - categories
          - categories
          hasAttachments: true
          occurrenceInfo:
            masterId: masterId
            originalStart:
              dateTime: 2000-01-23T04:56:07.000+00:00
              dateOnly: 2000-01-23
              timezone: timezone
            start:
              dateTime: 2000-01-23T04:56:07.000+00:00
              dateOnly: 2000-01-23
              timezone: timezone
            id: id
            type: regular
        globalId: globalId
        onlineMeetingProvider: onlineMeetingProvider
        etag: etag
        id: id
        onlineMeetingDetails:
          regionCode: regionCode
          pin: pin
          phone: phone
          infoUrl: infoUrl
          sip: sip
          url: url
      properties:
        id:
          readOnly: true
          type: string
        etag:
          readOnly: true
          type: string
        iCalUId:
          readOnly: true
          type: string
        globalId:
          readOnly: true
          type: string
        record:
          $ref: '#/components/schemas/Event'
        onlineMeetingProvider:
          description: "Value of provider, for example hangoutsMeet, teamsForBusiness,\
            \ skypeForBusiness, skypeForConsumer"
          type: string
        onlineMeetingDetails:
          $ref: '#/components/schemas/OnlineMeetingDetails'
      type: object
    ShowAs:
      enum:
      - free
      - busy
      - tentative
      - outOfOffice
      - unknown
      type: string
    EmailHeader:
      example:
        name: name
        value: value
      properties:
        name:
          type: string
        value:
          type: string
      type: object
    Organizer:
      example:
        emailAddress:
          address: address
          name: name
          raw: raw
        id: id
      properties:
        id:
          readOnly: true
          type: string
        emailAddress:
          $ref: '#/components/schemas/EmailAddress'
      readOnly: true
      type: object
    ConvertDraft:
      example:
        threadId: threadId
        internetMessageId: internetMessageId
        messageId: messageId
      properties:
        threadId:
          readOnly: true
          type: string
        messageId:
          type: string
        internetMessageId:
          type: string
      type: object
    OutEmailTrack:
      example:
        trackOpensAfterSendDelay: 0
        context: context
        opens: true
        threadReplies: true
        links: true
      properties:
        threadReplies:
          type: boolean
        opens:
          type: boolean
        trackOpensAfterSendDelay:
          default: 5
          description: number of seconds to wait after a send before enabling tracking
          type: integer
        links:
          type: boolean
        context:
          description: User-defined tracking data that will be associated with this
            email.
          type: string
      type: object
    FollowupRuleAggregateIn:
      example:
        templateBody: templateBody
        name: name
        templateSubject: templateSubject
        actions:
        - intervalDays: 6
          message: message
        - intervalDays: 6
          message: message
        expectThreadResponse: true
      properties:
        name:
          type: string
        expectThreadResponse:
          type: boolean
        templateBody:
          type: string
        templateSubject:
          type: string
        actions:
          items:
            $ref: '#/components/schemas/FollowupRuleAction'
          type: array
      type: object
    SubscriptionRequest:
      example:
        notificationUrl: notificationUrl
        resource: resource
      properties:
        resource:
          type: string
        notificationUrl:
          type: string
      type: object
    MeetingInfo:
      example:
        canceled: true
        onlineMeeting: true
        attendees:
        - emailAddress:
            address: address
            name: name
            raw: raw
          response: accepted
          comment: comment
          id: id
          type: required
        - emailAddress:
            address: address
            name: name
            raw: raw
          response: accepted
          comment: comment
          id: id
          type: required
        response: noResponse
        attendeePermissions:
        - inviteOthers
        - inviteOthers
        onlineMeetingProvider: onlineMeetingProvider
        onlineMeetingDetails:
          regionCode: regionCode
          pin: pin
          phone: phone
          infoUrl: infoUrl
          sip: sip
          url: url
      properties:
        canceled:
          readOnly: true
          type: boolean
        attendees:
          items:
            $ref: '#/components/schemas/Attendee'
          type: array
        response:
          enum:
          - noResponse
          - declined
          - tentative
          - accepted
          readOnly: true
          type: string
        attendeePermissions:
          items:
            enum:
            - inviteOthers
            - modify
            - seeOthers
            type: string
          type: array
        onlineMeeting:
          description: Assumes default onlineMeetingProvider ('hangoutsMeet' or 'teamsForBusiness')
          type: boolean
          writeOnly: true
        onlineMeetingProvider:
          description: "Value of provider, for example hangoutsMeet, teamsForBusiness,\
            \ skypeForBusiness, skypeForConsumer"
          type: string
        onlineMeetingDetails:
          $ref: '#/components/schemas/OnlineMeetingDetails'
      type: object
    AdditionalField:
      example:
        default: default
        name: name
        type: type
      properties:
        name:
          description: Substitution variable name
          type: string
        type:
          description: Value type
          type: string
        default:
          description: Default value
          type: string
      type: object
    FollowUpOutgoing:
      example:
        actionVars:
          key: actionVars
        ruleId: 6
      properties:
        ruleId:
          type: integer
        actionVars:
          additionalProperties:
            type: string
          type: object
      type: object
    OccurrenceInfo:
      example:
        masterId: masterId
        originalStart:
          dateTime: 2000-01-23T04:56:07.000+00:00
          dateOnly: 2000-01-23
          timezone: timezone
        start:
          dateTime: 2000-01-23T04:56:07.000+00:00
          dateOnly: 2000-01-23
          timezone: timezone
        id: id
        type: regular
      properties:
        id:
          type: string
        type:
          enum:
          - regular
          - modified
          - deleted
          type: string
        originalStart:
          $ref: '#/components/schemas/EventDateTime'
        start:
          $ref: '#/components/schemas/EventDateTime'
        masterId:
          type: string
      type: object
    EmailFolderInfo:
      example:
        name: name
        id: id
      properties:
        id:
          readOnly: true
          type: string
        name:
          readOnly: true
          type: string
      type: object
    SelectedMeetingTime:
      example:
        start: 2000-01-23T04:56:07.000+00:00
        end: 2000-01-23T04:56:07.000+00:00
      properties:
        start:
          format: date-time
          type: string
        end:
          format: date-time
          type: string
      type: object
    BookingOutDto:
      example:
        availabilityStep: 6
        subject: subject
        workHours:
          daySchedules:
          - dayOfWeek: null
            workingIntervals:
            - start: start
              end: end
            - start: start
              end: end
          - dayOfWeek: null
            workingIntervals:
            - start: start
              end: end
            - start: start
              end: end
          timezone: timezone
        description: description
        durationMinutes: 30
        timeAvailableFor: P4W
        name: aurDemo - https://calendar.aurinko.io/aurDemo
        context: context
        startTime: 2000-01-23T04:56:07.000+00:00
        location: location
        id: 0
        startConference: true
        openMeetingUrl: openMeetingUrl
      properties:
        id:
          format: int64
          type: integer
        name:
          description: Profile name used in calendar links to identify a profile.
          example: aurDemo - https://calendar.aurinko.io/aurDemo
          type: string
        durationMinutes:
          description: Duration of the meeting in minutes.
          example: 30
          type: integer
        availabilityStep:
          description: Determines the interval at which new meeting slots are made
            available throughout the working hours.
          type: integer
        startTime:
          description: "The beginning of the formation of intervals. Must be in the\
            \ future, otherwise the current time will be used."
          format: date-time
          type: string
        timeAvailableFor:
          description: "Time period (in ISO-8601 format) the profile is covering.\
            \ For example, P3M (3 months), P4W (4 weeks), P5D (5 days)."
          example: P4W
          type: string
        subject:
          description: Subject for events booked using this profile.
          type: string
        description:
          description: Description for events booked using this profile.
          type: string
        location:
          description: Location for events booked using this profile.
          type: string
        workHours:
          $ref: '#/components/schemas/WeekWorkSchedule'
        context:
          description: Custom client data stored for the profile.
          type: string
        startConference:
          description: "Whether to create an online conference (hangoutsMeet, teamsForBusiness,\
            \ etc.) for the event. Note, not all providers support creating conferences."
          type: boolean
        openMeetingUrl:
          description: "The value of the {{}openMeetingUrl}} variable that can be\
            \ used in the event description or subject."
          type: string
      type: object
    DayOfWeek:
      enum:
      - monday
      - tuesday
      - wednesday
      - thursday
      - friday
      - saturday
      - sunday
      type: string
    WorkingInterval:
      example:
        start: start
        end: end
      properties:
        start:
          format: time
          type: string
        end:
          format: time
          type: string
      type: object
    EmailMessagesPage:
      example:
        records:
        - lastModifiedTime: 2000-01-23T04:56:07.000+00:00
          bcc:
          - address: address
            name: name
            raw: raw
          - address: address
            name: name
            raw: raw
          attachments:
          - size: 2
            inline: true
            name: name
            contentId: contentId
            id: id
            mimeType: mimeType
            contentLocation: contentLocation
            content: content
          - size: 2
            inline: true
            name: name
            contentId: contentId
            id: id
            mimeType: mimeType
            contentLocation: contentLocation
            content: content
          keywords:
          - keywords
          - keywords
          references: references
          subject: subject
          threadIndex: threadIndex
          internetHeaders:
          - name: name
            value: value
          - name: name
            value: value
          receivedAt: 2000-01-23T04:56:07.000+00:00
          body: body
          threadId: threadId
          internetMessageId: internetMessageId
          createdTime: 2000-01-23T04:56:07.000+00:00
          from:
            address: address
            name: name
            raw: raw
          id: id
          hasAttachments: true
          cc:
          - address: address
            name: name
            raw: raw
          - address: address
            name: name
            raw: raw
          sysLabels:
          - junk
          - junk
          nativeProperties:
            key: nativeProperties
          sysClassifications:
          - personal
          - personal
          inReplyTo: inReplyTo
          sentAt: 2000-01-23T04:56:07.000+00:00
          folderId: folderId
          meetingMessageMethod: request
          replyTo:
          - address: address
            name: name
            raw: raw
          - address: address
            name: name
            raw: raw
          omitted:
          - threadId
          - threadId
          sensitivity: null
          to:
          - address: address
            name: name
            raw: raw
          - address: address
            name: name
            raw: raw
          bodySnippet: bodySnippet
        - lastModifiedTime: 2000-01-23T04:56:07.000+00:00
          bcc:
          - address: address
            name: name
            raw: raw
          - address: address
            name: name
            raw: raw
          attachments:
          - size: 2
            inline: true
            name: name
            contentId: contentId
            id: id
            mimeType: mimeType
            contentLocation: contentLocation
            content: content
          - size: 2
            inline: true
            name: name
            contentId: contentId
            id: id
            mimeType: mimeType
            contentLocation: contentLocation
            content: content
          keywords:
          - keywords
          - keywords
          references: references
          subject: subject
          threadIndex: threadIndex
          internetHeaders:
          - name: name
            value: value
          - name: name
            value: value
          receivedAt: 2000-01-23T04:56:07.000+00:00
          body: body
          threadId: threadId
          internetMessageId: internetMessageId
          createdTime: 2000-01-23T04:56:07.000+00:00
          from:
            address: address
            name: name
            raw: raw
          id: id
          hasAttachments: true
          cc:
          - address: address
            name: name
            raw: raw
          - address: address
            name: name
            raw: raw
          sysLabels:
          - junk
          - junk
          nativeProperties:
            key: nativeProperties
          sysClassifications:
          - personal
          - personal
          inReplyTo: inReplyTo
          sentAt: 2000-01-23T04:56:07.000+00:00
          folderId: folderId
          meetingMessageMethod: request
          replyTo:
          - address: address
            name: name
            raw: raw
          - address: address
            name: name
            raw: raw
          omitted:
          - threadId
          - threadId
          sensitivity: null
          to:
          - address: address
            name: name
            raw: raw
          - address: address
            name: name
            raw: raw
          bodySnippet: bodySnippet
        nextPageToken: nextPageToken
        nextDeltaToken: nextDeltaToken
        length: 0
      properties:
        nextPageToken:
          description: A token received as nextPageToken from a previous page request
          type: string
        nextDeltaToken:
          description: A token received as nextDeltaToken from a previous sync request
            or a start sync request
          type: string
        length:
          type: integer
        records:
          items:
            $ref: '#/components/schemas/EmailMessage'
          type: array
      type: object
    EventsPageNext:
      example:
        records:
        - lastModifiedTime: 2000-01-23T04:56:07.000+00:00
          attachments:
          - size: 2
            inline: true
            name: name
            contentId: contentId
            id: id
            mimeType: mimeType
            contentLocation: contentLocation
            content: content
          - size: 2
            inline: true
            name: name
            contentId: contentId
            id: id
            mimeType: mimeType
            contentLocation: contentLocation
            content: content
          showAs: null
          subject: subject
          htmlLink: htmlLink
          iCalUid: iCalUid
          start:
            dateTime: 2000-01-23T04:56:07.000+00:00
            dateOnly: 2000-01-23
            timezone: timezone
          globalId: globalId
          description: description
          recurrenceType: single
          recurrence:
            original: simple
            ical:
              rules:
              - rules
              - rules
              recurrenceStart:
                dateTime: 2000-01-23T04:56:07.000+00:00
                dateOnly: 2000-01-23
                timezone: timezone
            simple:
              pattern:
                monthOfYear: 7
                instance: first
                weekStart: monday
                dayOfMonth: 5
                interval: 6
                daysOfWeek:
                - null
                - null
                frequency: daily
              range:
                patternExclusions:
                - dateTime: 2000-01-23T04:56:07.000+00:00
                  dateOnly: 2000-01-23
                  timezone: timezone
                - dateTime: 2000-01-23T04:56:07.000+00:00
                  dateOnly: 2000-01-23
                  timezone: timezone
                recurrenceEnd: 2000-01-23
                count: 1
                recurrenceStart:
                  dateTime: 2000-01-23T04:56:07.000+00:00
                  dateOnly: 2000-01-23
                  timezone: timezone
                type: byDate
          calendarId: calendarId
          organizer:
            emailAddress:
              address: address
              name: name
              raw: raw
            id: id
          omitted:
          - description
          - description
          createdTime: 2000-01-23T04:56:07.000+00:00
          etag: etag
          location: location
          end:
            dateTime: 2000-01-23T04:56:07.000+00:00
            dateOnly: 2000-01-23
            timezone: timezone
          meetingInfo:
            canceled: true
            onlineMeeting: true
            attendees:
            - emailAddress:
                address: address
                name: name
                raw: raw
              response: accepted
              comment: comment
              id: id
              type: required
            - emailAddress:
                address: address
                name: name
                raw: raw
              response: accepted
              comment: comment
              id: id
              type: required
            response: noResponse
            attendeePermissions:
            - inviteOthers
            - inviteOthers
            onlineMeetingProvider: onlineMeetingProvider
            onlineMeetingDetails:
              regionCode: regionCode
              pin: pin
              phone: phone
              infoUrl: infoUrl
              sip: sip
              url: url
          id: id
          sensitivity: null
          categories:
          - categories
          - categories
          hasAttachments: true
          occurrenceInfo:
            masterId: masterId
            originalStart:
              dateTime: 2000-01-23T04:56:07.000+00:00
              dateOnly: 2000-01-23
              timezone: timezone
            start:
              dateTime: 2000-01-23T04:56:07.000+00:00
              dateOnly: 2000-01-23
              timezone: timezone
            id: id
            type: regular
        - lastModifiedTime: 2000-01-23T04:56:07.000+00:00
          attachments:
          - size: 2
            inline: true
            name: name
            contentId: contentId
            id: id
            mimeType: mimeType
            contentLocation: contentLocation
            content: content
          - size: 2
            inline: true
            name: name
            contentId: contentId
            id: id
            mimeType: mimeType
            contentLocation: contentLocation
            content: content
          showAs: null
          subject: subject
          htmlLink: htmlLink
          iCalUid: iCalUid
          start:
            dateTime: 2000-01-23T04:56:07.000+00:00
            dateOnly: 2000-01-23
            timezone: timezone
          globalId: globalId
          description: description
          recurrenceType: single
          recurrence:
            original: simple
            ical:
              rules:
              - rules
              - rules
              recurrenceStart:
                dateTime: 2000-01-23T04:56:07.000+00:00
                dateOnly: 2000-01-23
                timezone: timezone
            simple:
              pattern:
                monthOfYear: 7
                instance: first
                weekStart: monday
                dayOfMonth: 5
                interval: 6
                daysOfWeek:
                - null
                - null
                frequency: daily
              range:
                patternExclusions:
                - dateTime: 2000-01-23T04:56:07.000+00:00
                  dateOnly: 2000-01-23
                  timezone: timezone
                - dateTime: 2000-01-23T04:56:07.000+00:00
                  dateOnly: 2000-01-23
                  timezone: timezone
                recurrenceEnd: 2000-01-23
                count: 1
                recurrenceStart:
                  dateTime: 2000-01-23T04:56:07.000+00:00
                  dateOnly: 2000-01-23
                  timezone: timezone
                type: byDate
          calendarId: calendarId
          organizer:
            emailAddress:
              address: address
              name: name
              raw: raw
            id: id
          omitted:
          - description
          - description
          createdTime: 2000-01-23T04:56:07.000+00:00
          etag: etag
          location: location
          end:
            dateTime: 2000-01-23T04:56:07.000+00:00
            dateOnly: 2000-01-23
            timezone: timezone
          meetingInfo:
            canceled: true
            onlineMeeting: true
            attendees:
            - emailAddress:
                address: address
                name: name
                raw: raw
              response: accepted
              comment: comment
              id: id
              type: required
            - emailAddress:
                address: address
                name: name
                raw: raw
              response: accepted
              comment: comment
              id: id
              type: required
            response: noResponse
            attendeePermissions:
            - inviteOthers
            - inviteOthers
            onlineMeetingProvider: onlineMeetingProvider
            onlineMeetingDetails:
              regionCode: regionCode
              pin: pin
              phone: phone
              infoUrl: infoUrl
              sip: sip
              url: url
          id: id
          sensitivity: null
          categories:
          - categories
          - categories
          hasAttachments: true
          occurrenceInfo:
            masterId: masterId
            originalStart:
              dateTime: 2000-01-23T04:56:07.000+00:00
              dateOnly: 2000-01-23
              timezone: timezone
            start:
              dateTime: 2000-01-23T04:56:07.000+00:00
              dateOnly: 2000-01-23
              timezone: timezone
            id: id
            type: regular
        nextPageToken: nextPageToken
        length: 0
      properties:
        nextPageToken:
          type: string
        length:
          type: integer
        records:
          items:
            $ref: '#/components/schemas/Event'
          type: array
      type: object
    DraftSendDetails:
      example:
        tracking:
          trackOpensAfterSendDelay: 0
          context: context
          opens: true
          threadReplies: true
          links: true
      properties:
        tracking:
          $ref: '#/components/schemas/OutEmailTrack'
      type: object
    EmailAttachment:
      example:
        size: 2
        inline: true
        name: name
        contentId: contentId
        id: id
        mimeType: mimeType
        contentLocation: contentLocation
        content: content
      properties:
        id:
          readOnly: true
          type: string
        name:
          readOnly: true
          type: string
        mimeType:
          readOnly: true
          type: string
        size:
          readOnly: true
          type: integer
        inline:
          readOnly: true
          type: boolean
        contentId:
          readOnly: true
          type: string
        content:
          readOnly: true
          type: string
        contentLocation:
          readOnly: true
          type: string
      type: object
    DeletedPage:
      example:
        records:
        - id: id
          timestamp: 2000-01-23T04:56:07.000+00:00
        - id: id
          timestamp: 2000-01-23T04:56:07.000+00:00
        nextPageToken: nextPageToken
        nextDeltaToken: nextDeltaToken
        length: 0
      properties:
        nextPageToken:
          description: A token received as nextPageToken from a previous page request
          type: string
        nextDeltaToken:
          description: A token received as nextDeltaToken from a previous sync request
            or a start sync request
          type: string
        length:
          type: integer
        records:
          items:
            $ref: '#/components/schemas/DeletedRecord'
          type: array
      type: object
    EmailFolderInfoPage:
      example:
        records:
        - name: name
          id: id
        - name: name
          id: id
        length: 0
      properties:
        length:
          type: integer
        records:
          items:
            $ref: '#/components/schemas/EmailFolderInfo'
          type: array
      type: object
    FreeBusyItem:
      example:
        start: 2000-01-23T04:56:07.000+00:00
        end: 2000-01-23T04:56:07.000+00:00
        status: null
      properties:
        start:
          format: date-time
          type: string
        end:
          format: date-time
          type: string
        status:
          $ref: '#/components/schemas/ShowAs'
      type: object
    AccountType:
      enum:
      - daemon
      - personal
      - managed
      type: string
    Attendee:
      example:
        emailAddress:
          address: address
          name: name
          raw: raw
        response: accepted
        comment: comment
        id: id
        type: required
      properties:
        id:
          readOnly: true
          type: string
        emailAddress:
          $ref: '#/components/schemas/EmailAddress'
        type:
          enum:
          - required
          - optional
          - resource
          type: string
        response:
          enum:
          - accepted
          - tentitive
          - declined
          readOnly: true
          type: string
        comment:
          readOnly: true
          type: string
      type: object
    FreeBusySchedule:
      example:
        workHours:
          daySchedules:
          - dayOfWeek: null
            workingIntervals:
            - start: start
              end: end
            - start: start
              end: end
          - dayOfWeek: null
            workingIntervals:
            - start: start
              end: end
            - start: start
              end: end
          timezone: timezone
        error: error
        items:
        - start: 2000-01-23T04:56:07.000+00:00
          end: 2000-01-23T04:56:07.000+00:00
          status: null
        - start: 2000-01-23T04:56:07.000+00:00
          end: 2000-01-23T04:56:07.000+00:00
          status: null
        email: email
      properties:
        email:
          format: email
          type: string
        items:
          items:
            $ref: '#/components/schemas/FreeBusyItem'
          type: array
        error:
          type: string
        workHours:
          $ref: '#/components/schemas/WeekWorkSchedule'
      type: object
    Contact:
      example:
        birthday: birthday
        addresses:
        - streetLine2: streetLine2
          poBox: poBox
          country: country
          city: city
          street: street
          postalCode: postalCode
          state: state
          type: work
        - streetLine2: streetLine2
          poBox: poBox
          country: country
          city: city
          street: street
          postalCode: postalCode
          state: state
          type: work
        lastModifiedTime: 2000-01-23T04:56:07.000+00:00
        notes: notes
        nativeProperties:
          key: nativeProperties
        keywords:
        - keywords
        - keywords
        nickName: nickName
        fileAs: fileAs
        photo:
          name: name
          id: id
          mimeType: mimeType
          content: content
        phoneNumbers:
        - number: number
          canonicalForm: canonicalForm
          type: work
        - number: number
          canonicalForm: canonicalForm
          type: work
        urls:
        - href: href
          type: work
        - href: href
          type: work
        emailAddresses:
        - address: address
          name: name
          type: type
        - address: address
          name: name
          type: type
        hasPhoto: true
        name:
          yomiGivenName: yomiGivenName
          displayName: displayName
          prefix: prefix
          givenName: givenName
          familyName: familyName
          middleName: middleName
          suffix: suffix
          yomiFamilyName: yomiFamilyName
        createdTime: 2000-01-23T04:56:07.000+00:00
        etag: etag
        company:
          officeLocation: officeLocation
          jobTitle: jobTitle
          name: name
          yomiCompanyName: yomiCompanyName
          department: department
        id: id
        relations:
        - type: manager
          value: value
        - type: manager
          value: value
      properties:
        id:
          readOnly: true
          type: string
        etag:
          readOnly: true
          type: string
        createdTime:
          format: date-time
          readOnly: true
          type: string
        lastModifiedTime:
          format: date-time
          readOnly: true
          type: string
        name:
          $ref: '#/components/schemas/ContactName'
        nickName:
          type: string
        fileAs:
          type: string
        company:
          $ref: '#/components/schemas/ContactCompany'
        relations:
          items:
            $ref: '#/components/schemas/ContactRelation'
          type: array
        birthday:
          type: string
        keywords:
          items:
            type: string
          type: array
        notes:
          type: string
        emailAddresses:
          items:
            $ref: '#/components/schemas/ContactEmailAddress'
          type: array
        phoneNumbers:
          items:
            $ref: '#/components/schemas/ContactPhoneNumber'
          type: array
        addresses:
          items:
            $ref: '#/components/schemas/ContactPostalAddress'
          type: array
        urls:
          items:
            $ref: '#/components/schemas/ContactUrl'
          type: array
        nativeProperties:
          additionalProperties:
            type: string
          type: object
        hasPhoto:
          type: boolean
        photo:
          $ref: '#/components/schemas/ContactPhoto'
      type: object
    FreeBusyRequest:
      example:
        emails:
        - emails
        - emails
        timeMax: 2000-01-23T04:56:07.000+00:00
        timeMin: 2000-01-23T04:56:07.000+00:00
      properties:
        timeMin:
          format: date-time
          type: string
        timeMax:
          format: date-time
          type: string
        emails:
          items:
            format: email
            type: string
          type: array
      type: object
    EventsPage:
      example:
        records:
        - lastModifiedTime: 2000-01-23T04:56:07.000+00:00
          attachments:
          - size: 2
            inline: true
            name: name
            contentId: contentId
            id: id
            mimeType: mimeType
            contentLocation: contentLocation
            content: content
          - size: 2
            inline: true
            name: name
            contentId: contentId
            id: id
            mimeType: mimeType
            contentLocation: contentLocation
            content: content
          showAs: null
          subject: subject
          htmlLink: htmlLink
          iCalUid: iCalUid
          start:
            dateTime: 2000-01-23T04:56:07.000+00:00
            dateOnly: 2000-01-23
            timezone: timezone
          globalId: globalId
          description: description
          recurrenceType: single
          recurrence:
            original: simple
            ical:
              rules:
              - rules
              - rules
              recurrenceStart:
                dateTime: 2000-01-23T04:56:07.000+00:00
                dateOnly: 2000-01-23
                timezone: timezone
            simple:
              pattern:
                monthOfYear: 7
                instance: first
                weekStart: monday
                dayOfMonth: 5
                interval: 6
                daysOfWeek:
                - null
                - null
                frequency: daily
              range:
                patternExclusions:
                - dateTime: 2000-01-23T04:56:07.000+00:00
                  dateOnly: 2000-01-23
                  timezone: timezone
                - dateTime: 2000-01-23T04:56:07.000+00:00
                  dateOnly: 2000-01-23
                  timezone: timezone
                recurrenceEnd: 2000-01-23
                count: 1
                recurrenceStart:
                  dateTime: 2000-01-23T04:56:07.000+00:00
                  dateOnly: 2000-01-23
                  timezone: timezone
                type: byDate
          calendarId: calendarId
          organizer:
            emailAddress:
              address: address
              name: name
              raw: raw
            id: id
          omitted:
          - description
          - description
          createdTime: 2000-01-23T04:56:07.000+00:00
          etag: etag
          location: location
          end:
            dateTime: 2000-01-23T04:56:07.000+00:00
            dateOnly: 2000-01-23
            timezone: timezone
          meetingInfo:
            canceled: true
            onlineMeeting: true
            attendees:
            - emailAddress:
                address: address
                name: name
                raw: raw
              response: accepted
              comment: comment
              id: id
              type: required
            - emailAddress:
                address: address
                name: name
                raw: raw
              response: accepted
              comment: comment
              id: id
              type: required
            response: noResponse
            attendeePermissions:
            - inviteOthers
            - inviteOthers
            onlineMeetingProvider: onlineMeetingProvider
            onlineMeetingDetails:
              regionCode: regionCode
              pin: pin
              phone: phone
              infoUrl: infoUrl
              sip: sip
              url: url
          id: id
          sensitivity: null
          categories:
          - categories
          - categories
          hasAttachments: true
          occurrenceInfo:
            masterId: masterId
            originalStart:
              dateTime: 2000-01-23T04:56:07.000+00:00
              dateOnly: 2000-01-23
              timezone: timezone
            start:
              dateTime: 2000-01-23T04:56:07.000+00:00
              dateOnly: 2000-01-23
              timezone: timezone
            id: id
            type: regular
        - lastModifiedTime: 2000-01-23T04:56:07.000+00:00
          attachments:
          - size: 2
            inline: true
            name: name
            contentId: contentId
            id: id
            mimeType: mimeType
            contentLocation: contentLocation
            content: content
          - size: 2
            inline: true
            name: name
            contentId: contentId
            id: id
            mimeType: mimeType
            contentLocation: contentLocation
            content: content
          showAs: null
          subject: subject
          htmlLink: htmlLink
          iCalUid: iCalUid
          start:
            dateTime: 2000-01-23T04:56:07.000+00:00
            dateOnly: 2000-01-23
            timezone: timezone
          globalId: globalId
          description: description
          recurrenceType: single
          recurrence:
            original: simple
            ical:
              rules:
              - rules
              - rules
              recurrenceStart:
                dateTime: 2000-01-23T04:56:07.000+00:00
                dateOnly: 2000-01-23
                timezone: timezone
            simple:
              pattern:
                monthOfYear: 7
                instance: first
                weekStart: monday
                dayOfMonth: 5
                interval: 6
                daysOfWeek:
                - null
                - null
                frequency: daily
              range:
                patternExclusions:
                - dateTime: 2000-01-23T04:56:07.000+00:00
                  dateOnly: 2000-01-23
                  timezone: timezone
                - dateTime: 2000-01-23T04:56:07.000+00:00
                  dateOnly: 2000-01-23
                  timezone: timezone
                recurrenceEnd: 2000-01-23
                count: 1
                recurrenceStart:
                  dateTime: 2000-01-23T04:56:07.000+00:00
                  dateOnly: 2000-01-23
                  timezone: timezone
                type: byDate
          calendarId: calendarId
          organizer:
            emailAddress:
              address: address
              name: name
              raw: raw
            id: id
          omitted:
          - description
          - description
          createdTime: 2000-01-23T04:56:07.000+00:00
          etag: etag
          location: location
          end:
            dateTime: 2000-01-23T04:56:07.000+00:00
            dateOnly: 2000-01-23
            timezone: timezone
          meetingInfo:
            canceled: true
            onlineMeeting: true
            attendees:
            - emailAddress:
                address: address
                name: name
                raw: raw
              response: accepted
              comment: comment
              id: id
              type: required
            - emailAddress:
                address: address
                name: name
                raw: raw
              response: accepted
              comment: comment
              id: id
              type: required
            response: noResponse
            attendeePermissions:
            - inviteOthers
            - inviteOthers
            onlineMeetingProvider: onlineMeetingProvider
            onlineMeetingDetails:
              regionCode: regionCode
              pin: pin
              phone: phone
              infoUrl: infoUrl
              sip: sip
              url: url
          id: id
          sensitivity: null
          categories:
          - categories
          - categories
          hasAttachments: true
          occurrenceInfo:
            masterId: masterId
            originalStart:
              dateTime: 2000-01-23T04:56:07.000+00:00
              dateOnly: 2000-01-23
              timezone: timezone
            start:
              dateTime: 2000-01-23T04:56:07.000+00:00
              dateOnly: 2000-01-23
              timezone: timezone
            id: id
            type: regular
        nextPageToken: nextPageToken
        nextDeltaToken: nextDeltaToken
        length: 0
      properties:
        nextPageToken:
          description: A token received as nextPageToken from a previous page request
          type: string
        nextDeltaToken:
          description: A token received as nextDeltaToken from a previous sync request
            or a start sync request
          type: string
        length:
          type: integer
        records:
          items:
            $ref: '#/components/schemas/Event'
          type: array
      type: object
    SubscriptionsPage:
      example:
        totalSize: 6
        offset: 0
        records:
        - notificationUrl: notificationUrl
          resource: resource
          active: true
          failDescription: failDescription
          id: 1
          failSince: 2000-01-23T04:56:07.000+00:00
        - notificationUrl: notificationUrl
          resource: resource
          active: true
          failDescription: failDescription
          id: 1
          failSince: 2000-01-23T04:56:07.000+00:00
        done: true
      properties:
        offset:
          type: integer
        totalSize:
          format: int64
          type: integer
        done:
          type: boolean
        records:
          items:
            $ref: '#/components/schemas/SubscriptionResponse'
          type: array
      type: object
    ContactEmailAddress:
      example:
        address: address
        name: name
        type: type
      properties:
        address:
          type: string
        name:
          type: string
        type:
          type: string
      type: object
    Scope:
      description: Space separated list of scopes
      enum:
      - Calendar.Read
      - Calendar.ReadWrite
      - Mail.Read
      - Mail.ReadWrite
      - Mail.Send
      - Mail.Drafts
      - Mail.All
      - Contacts.Read
      - Contacts.ReadWrite
      - Tasks.Read
      - Tasks.ReadWrite
      type: string
    OutgoingEmail:
      example:
        cc:
        - address: address
          name: name
          raw: raw
        - address: address
          name: name
          raw: raw
        bcc:
        - address: address
          name: name
          raw: raw
        - address: address
          name: name
          raw: raw
        xHeaders:
        - name: name
          value: value
        - name: name
          value: value
        attachments:
        - inline: true
          name: name
          contentId: contentId
          mimeType: mimeType
          content: content
        - inline: true
          name: name
          contentId: contentId
          mimeType: mimeType
          content: content
        references: references
        keywords:
        - keywords
        - keywords
        subject: subject
        inReplyTo: inReplyTo
        body: body
        tracking:
          trackOpensAfterSendDelay: 0
          context: context
          opens: true
          threadReplies: true
          links: true
        threadId: threadId
        followUp:
          actionVars:
            key: actionVars
          ruleId: 6
        replyTo:
        - address: address
          name: name
          raw: raw
        - address: address
          name: name
          raw: raw
        from:
          address: address
          name: name
          raw: raw
        to:
        - address: address
          name: name
          raw: raw
        - address: address
          name: name
          raw: raw
      properties:
        from:
          $ref: '#/components/schemas/EmailAddress'
        subject:
          type: string
        body:
          type: string
        inReplyTo:
          type: string
        references:
          type: string
        threadId:
          type: string
        to:
          items:
            $ref: '#/components/schemas/EmailAddress'
          type: array
        cc:
          items:
            $ref: '#/components/schemas/EmailAddress'
          type: array
        bcc:
          items:
            $ref: '#/components/schemas/EmailAddress'
          type: array
        replyTo:
          items:
            $ref: '#/components/schemas/EmailAddress'
          type: array
        xHeaders:
          items:
            $ref: '#/components/schemas/EmailHeader'
          type: array
        attachments:
          items:
            $ref: '#/components/schemas/OutgoingEmailAttachment'
          type: array
        tracking:
          $ref: '#/components/schemas/OutEmailTrack'
        followUp:
          $ref: '#/components/schemas/FollowUpOutgoing'
        keywords:
          items:
            type: string
          type: array
      type: object
    EndUserExtIdType:
      enum:
      - exchangeIdentity
      type: string
    SuggestMeetingTimesResponse_items_inner:
      example:
        start: 2000-01-23T04:56:07.000+00:00
        end: 2000-01-23T04:56:07.000+00:00
      properties:
        start:
          format: date-time
          type: string
        end:
          format: date-time
          type: string
      type: object
    Recurrence_ical:
      example:
        rules:
        - rules
        - rules
        recurrenceStart:
          dateTime: 2000-01-23T04:56:07.000+00:00
          dateOnly: 2000-01-23
          timezone: timezone
      properties:
        rules:
          items:
            type: string
          type: array
        recurrenceStart:
          $ref: '#/components/schemas/EventDateTime'
      type: object
    Recurrence_simple_pattern:
      example:
        monthOfYear: 7
        instance: first
        weekStart: monday
        dayOfMonth: 5
        interval: 6
        daysOfWeek:
        - null
        - null
        frequency: daily
      properties:
        frequency:
          enum:
          - daily
          - weekly
          - monthly
          - monthlyRelative
          - yearly
          - yearlyRelative
          type: string
        interval:
          default: 1
          type: integer
        daysOfWeek:
          items:
            $ref: '#/components/schemas/DayOfWeek'
          type: array
        weekStart:
          enum:
          - monday
          - sunday
          type: string
        dayOfMonth:
          maximum: 31
          minimum: 1
          type: integer
        monthOfYear:
          maximum: 12
          minimum: 1
          type: integer
        instance:
          enum:
          - first
          - second
          - third
          - fourth
          - last
          type: string
      type: object
    Recurrence_simple_range:
      example:
        patternExclusions:
        - dateTime: 2000-01-23T04:56:07.000+00:00
          dateOnly: 2000-01-23
          timezone: timezone
        - dateTime: 2000-01-23T04:56:07.000+00:00
          dateOnly: 2000-01-23
          timezone: timezone
        recurrenceEnd: 2000-01-23
        count: 1
        recurrenceStart:
          dateTime: 2000-01-23T04:56:07.000+00:00
          dateOnly: 2000-01-23
          timezone: timezone
        type: byDate
      properties:
        type:
          enum:
          - byDate
          - byCount
          - unbounded
          type: string
        recurrenceStart:
          $ref: '#/components/schemas/EventDateTime'
        recurrenceEnd:
          format: date
          type: string
        count:
          minimum: 1
          type: integer
        patternExclusions:
          items:
            $ref: '#/components/schemas/EventDateTime'
          readOnly: true
          type: array
      type: object
    Recurrence_simple:
      example:
        pattern:
          monthOfYear: 7
          instance: first
          weekStart: monday
          dayOfMonth: 5
          interval: 6
          daysOfWeek:
          - null
          - null
          frequency: daily
        range:
          patternExclusions:
          - dateTime: 2000-01-23T04:56:07.000+00:00
            dateOnly: 2000-01-23
            timezone: timezone
          - dateTime: 2000-01-23T04:56:07.000+00:00
            dateOnly: 2000-01-23
            timezone: timezone
          recurrenceEnd: 2000-01-23
          count: 1
          recurrenceStart:
            dateTime: 2000-01-23T04:56:07.000+00:00
            dateOnly: 2000-01-23
            timezone: timezone
          type: byDate
      properties:
        pattern:
          $ref: '#/components/schemas/Recurrence_simple_pattern'
        range:
          $ref: '#/components/schemas/Recurrence_simple_range'
      type: object
  securitySchemes:
    AppAuth:
      description: App-level basic authentication using Client ID and Client Secret
        that can be obtained at Aurinko Dashboard page.
      scheme: basic
      type: http
    AccountToken:
      description: Account-level authentication with account token obtained using
        `/auth/authorize` endpoint.
      scheme: bearer
      type: http
    UserSessionCookie:
      description: Cookie-based user-level authentication
      in: cookie
      name: "AUR{APPID}"
      type: apiKey
    UserSessionHeader:
      description: Token-based user-level authentication
      in: header
      name: X-Aurinko-Session
      type: apiKey
    ClientIdHeader:
      description: Client ID that can be obtained at Aurinko Dashboard page
      in: header
      name: X-Aurinko-Client-Id
      type: apiKey
    AccountIdHeader:
      description: User account id
      in: header
      name: X-Aurinko-Account-Id
      type: apiKey
    AuthTypeHeader:
      description: "Authentication type. Possible values: default, exchangeIdToken"
      in: header
      name: X-Aurinko-Auth-Type
      type: apiKey
    ExchangeIdToken:
      bearerFormat: "Exchange Identity Token (only with `X-Aurinko-Auth-Type: exchangeIdToken`\
        \ header.)"
      description: "Authentication using Exchange Identity Token. To use this method\
        \ `X-Aurinko-Auth-Type: exchangeIdToken` header should be used."
      scheme: bearer
      type: http
x-tagGroups:
- name: OAuth Flow
  tags:
  - Auth
  - Account
  - User
- name: Account management
  tags:
  - Accounts
  - Services
  - Managed accounts
- name: Email
  tags:
  - Messages
  - EmailSync
  - Drafts
  - EmailTracking
  - FollowUpRobot
- name: Calendars
  tags:
  - Calendars
  - Events
  - CalSync
  - FreeBusySchedule
  - Booking
- name: Contacts
  tags:
  - Contacts
  - ContSync
- name: Tasks
  tags:
  - TaskLists
  - Tasks
  - TaskSync
- name: Webhooks
  tags:
  - Webhooks
- name: Other
  tags:
  - Errors

