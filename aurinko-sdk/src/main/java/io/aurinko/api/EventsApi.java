/*
 * Aurinko.io API
 * ## Introduction The Aurinko API is a unified API platform allowing developers to quickly build integrations with many mailbox providers and services like Google, Office 365, Outlook.com, MS Exchange, IMAP. The unified API abstracts away differences between many email, calendar, contact, task APIs to make it easy to connect and sync the mailbox data.  The Aurinko API's focus is convenient and reliable data synchronization for all supported data categories (email, calendar, contacts, tasks) so the API provides methods to receive changes/deltas and be notified of the changes (through webhooks) in a unified manner. The API's sync/deltas model should allow developers to build reliable event based solutions easily.  The Aurinko API is built on HTTP. Our API is RESTful. It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body.  ## API Authentication When you [sign up for an account](https://app.aurinko.io/#/signUp), you are given a Client Id and Secret for every application that you create. You use those to go through OAuth flows that allow you to start syncing remote account data through Aurinko. An account OAuth flow can be started with just the Client Id and the Client Secret will be required to obtain an account access token in the \"authorization code\" flow (\"implicit grant\" flow does is secured by the \"trusted domains\" setting).  Aurinko offers two forms of authentication:  - `Basic <Client Id, Client Secret>` - used for authentication flows and administrative requests made from the server side. - `Bearer <Account Access Token>` - used for working with an account data. - `Api Key in Cookie` - for in-browser apps that use Aurinko as their backend API with user sessions. - `Api Key in Header (X-Aurinko-Session)` - for server side apps that need user sessions  Never share your client secret or access token. Keep them guarded and secure.  ## Getting Started Guide If you have a use case you would like to implement, please consult us for feedback on the best API operations for the task.  [Click here to visit our API Guides](https://docs.aurinko.io/ctg-getting-started/getting-started). 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aurinko.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.aurinko.api;

import io.aurinko.client.ApiClient;
import io.aurinko.client.ApiException;
import io.aurinko.client.ApiResponse;
import io.aurinko.client.Pair;

import io.aurinko.client.model.BodyType;
import io.aurinko.client.model.EmailAttachmentContent;
import io.aurinko.client.model.Event;
import io.aurinko.client.model.EventOrId;
import io.aurinko.client.model.EventsPageNext;
import java.time.OffsetDateTime;
import io.aurinko.client.model.OkResponse;
import io.aurinko.client.model.SeriesInfo;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

import java.util.concurrent.CompletableFuture;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-15T08:54:57.780675Z[Africa/Bamako]")
public class EventsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public EventsApi() {
    this(new ApiClient());
  }

  public EventsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  private ApiException getApiException(String operationId, HttpResponse<String> response) {
    String message = formatExceptionMessage(operationId, response.statusCode(), response.body());
    return new ApiException(response.statusCode(), message, response.headers(), response.body());
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Get an event attachment
   * 
   * @param calendarId Calendar id (required)
   * @param eventId Event id (required)
   * @param attachmentId attachment identifier (required)
   * @return CompletableFuture&lt;EmailAttachmentContent&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<EmailAttachmentContent> attachment(String calendarId, String eventId, String attachmentId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = attachmentRequestBuilder(calendarId, eventId, attachmentId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("attachment", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<EmailAttachmentContent>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get an event attachment
   * 
   * @param calendarId Calendar id (required)
   * @param eventId Event id (required)
   * @param attachmentId attachment identifier (required)
   * @return CompletableFuture&lt;ApiResponse&lt;EmailAttachmentContent&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<EmailAttachmentContent>> attachmentWithHttpInfo(String calendarId, String eventId, String attachmentId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = attachmentRequestBuilder(calendarId, eventId, attachmentId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("attachment", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  new ApiResponse<EmailAttachmentContent>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<EmailAttachmentContent>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder attachmentRequestBuilder(String calendarId, String eventId, String attachmentId) throws ApiException {
    // verify the required parameter 'calendarId' is set
    if (calendarId == null) {
      throw new ApiException(400, "Missing the required parameter 'calendarId' when calling attachment");
    }
    // verify the required parameter 'eventId' is set
    if (eventId == null) {
      throw new ApiException(400, "Missing the required parameter 'eventId' when calling attachment");
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'attachmentId' when calling attachment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/calendars/{calendarId}/events/{eventId}/attachments/{attachmentId}"
        .replace("{calendarId}", ApiClient.urlEncode(calendarId.toString()))
        .replace("{eventId}", ApiClient.urlEncode(eventId.toString()))
        .replace("{attachmentId}", ApiClient.urlEncode(attachmentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create a new event
   * 
   * @param calendarId Calendar id (required)
   * @param notifyAttendees  (optional, default to true)
   * @param bodyType  (optional)
   * @param returnRecord Whether response must contain a record that has been created. This can result in an additional request to provider API. (optional, default to true)
   * @param event  (optional)
   * @return CompletableFuture&lt;EventOrId&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<EventOrId> createEvent(String calendarId, Boolean notifyAttendees, BodyType bodyType, Boolean returnRecord, Event event) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = createEventRequestBuilder(calendarId, notifyAttendees, bodyType, returnRecord, event);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("createEvent", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<EventOrId>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create a new event
   * 
   * @param calendarId Calendar id (required)
   * @param notifyAttendees  (optional, default to true)
   * @param bodyType  (optional)
   * @param returnRecord Whether response must contain a record that has been created. This can result in an additional request to provider API. (optional, default to true)
   * @param event  (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;EventOrId&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<EventOrId>> createEventWithHttpInfo(String calendarId, Boolean notifyAttendees, BodyType bodyType, Boolean returnRecord, Event event) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = createEventRequestBuilder(calendarId, notifyAttendees, bodyType, returnRecord, event);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("createEvent", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  new ApiResponse<EventOrId>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<EventOrId>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder createEventRequestBuilder(String calendarId, Boolean notifyAttendees, BodyType bodyType, Boolean returnRecord, Event event) throws ApiException {
    // verify the required parameter 'calendarId' is set
    if (calendarId == null) {
      throw new ApiException(400, "Missing the required parameter 'calendarId' when calling createEvent");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/calendars/{calendarId}/events"
        .replace("{calendarId}", ApiClient.urlEncode(calendarId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "notifyAttendees";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("notifyAttendees", notifyAttendees));
    localVarQueryParameterBaseName = "bodyType";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("bodyType", bodyType));
    localVarQueryParameterBaseName = "returnRecord";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("returnRecord", returnRecord));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(event);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete an event
   * 
   * @param calendarId Calendar id (required)
   * @param eventId Event id (required)
   * @param notifyAttendees  (optional, default to true)
   * @return CompletableFuture&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> deleteEvent(String calendarId, String eventId, Boolean notifyAttendees) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = deleteEventRequestBuilder(calendarId, eventId, notifyAttendees);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("deleteEvent", localVarResponse));
            }
            return CompletableFuture.completedFuture(null);
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Delete an event
   * 
   * @param calendarId Calendar id (required)
   * @param eventId Event id (required)
   * @param notifyAttendees  (optional, default to true)
   * @return CompletableFuture&lt;ApiResponse&lt;Void&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Void>> deleteEventWithHttpInfo(String calendarId, String eventId, Boolean notifyAttendees) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = deleteEventRequestBuilder(calendarId, eventId, notifyAttendees);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("deleteEvent", localVarResponse));
            }
            return CompletableFuture.completedFuture(
                new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null)
            );
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder deleteEventRequestBuilder(String calendarId, String eventId, Boolean notifyAttendees) throws ApiException {
    // verify the required parameter 'calendarId' is set
    if (calendarId == null) {
      throw new ApiException(400, "Missing the required parameter 'calendarId' when calling deleteEvent");
    }
    // verify the required parameter 'eventId' is set
    if (eventId == null) {
      throw new ApiException(400, "Missing the required parameter 'eventId' when calling deleteEvent");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/calendars/{calendarId}/events/{eventId}"
        .replace("{calendarId}", ApiClient.urlEncode(calendarId.toString()))
        .replace("{eventId}", ApiClient.urlEncode(eventId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "notifyAttendees";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("notifyAttendees", notifyAttendees));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get an event
   * 
   * @param calendarId Calendar id (required)
   * @param eventId Event id (required)
   * @param nativeProperties  (optional
   * @return CompletableFuture&lt;Event&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Event> event(String calendarId, String eventId, List<String> nativeProperties) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = eventRequestBuilder(calendarId, eventId, nativeProperties);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("event", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<Event>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Get an event
   * 
   * @param calendarId Calendar id (required)
   * @param eventId Event id (required)
   * @param nativeProperties  (optional
   * @return CompletableFuture&lt;ApiResponse&lt;Event&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Event>> eventWithHttpInfo(String calendarId, String eventId, List<String> nativeProperties) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = eventRequestBuilder(calendarId, eventId, nativeProperties);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("event", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  new ApiResponse<Event>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<Event>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder eventRequestBuilder(String calendarId, String eventId, List<String> nativeProperties) throws ApiException {
    // verify the required parameter 'calendarId' is set
    if (calendarId == null) {
      throw new ApiException(400, "Missing the required parameter 'calendarId' when calling event");
    }
    // verify the required parameter 'eventId' is set
    if (eventId == null) {
      throw new ApiException(400, "Missing the required parameter 'eventId' when calling event");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/calendars/{calendarId}/events/{eventId}"
        .replace("{calendarId}", ApiClient.urlEncode(calendarId.toString()))
        .replace("{eventId}", ApiClient.urlEncode(eventId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "nativeProperties";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "nativeProperties", nativeProperties));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Request events by ICalUid&#39;s
   * 
   * @param calendarId Calendar id (required)
   * @param iCalUId Find all events that match specified ICalUid&#39;s  (required)
   * @param pageToken  (optional)
   * @return CompletableFuture&lt;EventsPageNext&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<EventsPageNext> eventsByICalUIds(String calendarId, List<String> iCalUId, String pageToken) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = eventsByICalUIdsRequestBuilder(calendarId, iCalUId, pageToken);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("eventsByICalUIds", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<EventsPageNext>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Request events by ICalUid&#39;s
   * 
   * @param calendarId Calendar id (required)
   * @param iCalUId Find all events that match specified ICalUid&#39;s  (required)
   * @param pageToken  (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;EventsPageNext&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<EventsPageNext>> eventsByICalUIdsWithHttpInfo(String calendarId, List<String> iCalUId, String pageToken) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = eventsByICalUIdsRequestBuilder(calendarId, iCalUId, pageToken);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("eventsByICalUIds", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  new ApiResponse<EventsPageNext>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<EventsPageNext>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder eventsByICalUIdsRequestBuilder(String calendarId, List<String> iCalUId, String pageToken) throws ApiException {
    // verify the required parameter 'calendarId' is set
    if (calendarId == null) {
      throw new ApiException(400, "Missing the required parameter 'calendarId' when calling eventsByICalUIds");
    }
    // verify the required parameter 'iCalUId' is set
    if (iCalUId == null) {
      throw new ApiException(400, "Missing the required parameter 'iCalUId' when calling eventsByICalUIds");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/calendars/{calendarId}/events/find"
        .replace("{calendarId}", ApiClient.urlEncode(calendarId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "iCalUId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "iCalUId", iCalUId));
    localVarQueryParameterBaseName = "pageToken";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageToken", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Request an occurrence by original start time
   * 
   * @param calendarId Calendar id (required)
   * @param masterId Master event id (required)
   * @param ost Original start time (required)
   * @return CompletableFuture&lt;Event&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Event> occurrenceByOrigStart(String calendarId, String masterId, String ost) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = occurrenceByOrigStartRequestBuilder(calendarId, masterId, ost);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("occurrenceByOrigStart", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<Event>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Request an occurrence by original start time
   * 
   * @param calendarId Calendar id (required)
   * @param masterId Master event id (required)
   * @param ost Original start time (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Event&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Event>> occurrenceByOrigStartWithHttpInfo(String calendarId, String masterId, String ost) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = occurrenceByOrigStartRequestBuilder(calendarId, masterId, ost);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("occurrenceByOrigStart", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  new ApiResponse<Event>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<Event>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder occurrenceByOrigStartRequestBuilder(String calendarId, String masterId, String ost) throws ApiException {
    // verify the required parameter 'calendarId' is set
    if (calendarId == null) {
      throw new ApiException(400, "Missing the required parameter 'calendarId' when calling occurrenceByOrigStart");
    }
    // verify the required parameter 'masterId' is set
    if (masterId == null) {
      throw new ApiException(400, "Missing the required parameter 'masterId' when calling occurrenceByOrigStart");
    }
    // verify the required parameter 'ost' is set
    if (ost == null) {
      throw new ApiException(400, "Missing the required parameter 'ost' when calling occurrenceByOrigStart");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/calendars/{calendarId}/events/{masterId}/occurrences/{ost}"
        .replace("{calendarId}", ApiClient.urlEncode(calendarId.toString()))
        .replace("{masterId}", ApiClient.urlEncode(masterId.toString()))
        .replace("{ost}", ApiClient.urlEncode(ost.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Request events in a range
   * 
   * @param calendarId Calendar id (required)
   * @param timeMin Lower bound (exclusive) for an event&#39;s end time to filter by. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. If timeMax is set, timeMin must be smaller than timeMax.  (required)
   * @param timeMax Upper bound (exclusive) for an event&#39;s start time to filter by. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMin is set, timeMax must be greater than timeMin.  (required)
   * @param pageToken  (optional)
   * @return CompletableFuture&lt;EventsPageNext&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<EventsPageNext> range(String calendarId, OffsetDateTime timeMin, OffsetDateTime timeMax, String pageToken) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = rangeRequestBuilder(calendarId, timeMin, timeMax, pageToken);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("range", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<EventsPageNext>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Request events in a range
   * 
   * @param calendarId Calendar id (required)
   * @param timeMin Lower bound (exclusive) for an event&#39;s end time to filter by. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. If timeMax is set, timeMin must be smaller than timeMax.  (required)
   * @param timeMax Upper bound (exclusive) for an event&#39;s start time to filter by. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMin is set, timeMax must be greater than timeMin.  (required)
   * @param pageToken  (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;EventsPageNext&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<EventsPageNext>> rangeWithHttpInfo(String calendarId, OffsetDateTime timeMin, OffsetDateTime timeMax, String pageToken) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = rangeRequestBuilder(calendarId, timeMin, timeMax, pageToken);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("range", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  new ApiResponse<EventsPageNext>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<EventsPageNext>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder rangeRequestBuilder(String calendarId, OffsetDateTime timeMin, OffsetDateTime timeMax, String pageToken) throws ApiException {
    // verify the required parameter 'calendarId' is set
    if (calendarId == null) {
      throw new ApiException(400, "Missing the required parameter 'calendarId' when calling range");
    }
    // verify the required parameter 'timeMin' is set
    if (timeMin == null) {
      throw new ApiException(400, "Missing the required parameter 'timeMin' when calling range");
    }
    // verify the required parameter 'timeMax' is set
    if (timeMax == null) {
      throw new ApiException(400, "Missing the required parameter 'timeMax' when calling range");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/calendars/{calendarId}/events/range"
        .replace("{calendarId}", ApiClient.urlEncode(calendarId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "timeMin";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("timeMin", timeMin));
    localVarQueryParameterBaseName = "timeMax";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("timeMax", timeMax));
    localVarQueryParameterBaseName = "pageToken";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageToken", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Request a series description
   * 
   * @param calendarId Calendar id (required)
   * @param masterId Master event id (required)
   * @return CompletableFuture&lt;SeriesInfo&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<SeriesInfo> seriesInfo(String calendarId, String masterId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = seriesInfoRequestBuilder(calendarId, masterId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("seriesInfo", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<SeriesInfo>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Request a series description
   * 
   * @param calendarId Calendar id (required)
   * @param masterId Master event id (required)
   * @return CompletableFuture&lt;ApiResponse&lt;SeriesInfo&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<SeriesInfo>> seriesInfoWithHttpInfo(String calendarId, String masterId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = seriesInfoRequestBuilder(calendarId, masterId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("seriesInfo", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  new ApiResponse<SeriesInfo>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<SeriesInfo>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder seriesInfoRequestBuilder(String calendarId, String masterId) throws ApiException {
    // verify the required parameter 'calendarId' is set
    if (calendarId == null) {
      throw new ApiException(400, "Missing the required parameter 'calendarId' when calling seriesInfo");
    }
    // verify the required parameter 'masterId' is set
    if (masterId == null) {
      throw new ApiException(400, "Missing the required parameter 'masterId' when calling seriesInfo");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/calendars/{calendarId}/events/{masterId}/series"
        .replace("{calendarId}", ApiClient.urlEncode(calendarId.toString()))
        .replace("{masterId}", ApiClient.urlEncode(masterId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update an event
   * 
   * @param calendarId Calendar id (required)
   * @param eventId Event id (required)
   * @param ifMatch The HTTP entity tag of the resource (ETag). Used for web cache validation. (required)
   * @param notifyAttendees  (optional, default to true)
   * @param returnRecord Whether response must contain a record that has been updated. This can result in an additional request to provider API. (optional, default to true)
   * @param event  (optional)
   * @return CompletableFuture&lt;EventOrId&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<EventOrId> updateEvent(String calendarId, String eventId, String ifMatch, Boolean notifyAttendees, Boolean returnRecord, Event event) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = updateEventRequestBuilder(calendarId, eventId, ifMatch, notifyAttendees, returnRecord, event);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("updateEvent", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<EventOrId>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Update an event
   * 
   * @param calendarId Calendar id (required)
   * @param eventId Event id (required)
   * @param ifMatch The HTTP entity tag of the resource (ETag). Used for web cache validation. (required)
   * @param notifyAttendees  (optional, default to true)
   * @param returnRecord Whether response must contain a record that has been updated. This can result in an additional request to provider API. (optional, default to true)
   * @param event  (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;EventOrId&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<EventOrId>> updateEventWithHttpInfo(String calendarId, String eventId, String ifMatch, Boolean notifyAttendees, Boolean returnRecord, Event event) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = updateEventRequestBuilder(calendarId, eventId, ifMatch, notifyAttendees, returnRecord, event);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("updateEvent", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  new ApiResponse<EventOrId>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<EventOrId>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder updateEventRequestBuilder(String calendarId, String eventId, String ifMatch, Boolean notifyAttendees, Boolean returnRecord, Event event) throws ApiException {
    // verify the required parameter 'calendarId' is set
    if (calendarId == null) {
      throw new ApiException(400, "Missing the required parameter 'calendarId' when calling updateEvent");
    }
    // verify the required parameter 'eventId' is set
    if (eventId == null) {
      throw new ApiException(400, "Missing the required parameter 'eventId' when calling updateEvent");
    }
    // verify the required parameter 'ifMatch' is set
    if (ifMatch == null) {
      throw new ApiException(400, "Missing the required parameter 'ifMatch' when calling updateEvent");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/calendars/{calendarId}/events/{eventId}"
        .replace("{calendarId}", ApiClient.urlEncode(calendarId.toString()))
        .replace("{eventId}", ApiClient.urlEncode(eventId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "notifyAttendees";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("notifyAttendees", notifyAttendees));
    localVarQueryParameterBaseName = "returnRecord";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("returnRecord", returnRecord));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    if (ifMatch != null) {
      localVarRequestBuilder.header("If-Match", ifMatch.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(event);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update meeting response
   * 
   * @param calendarId Calendar id (required)
   * @param eventId Event id (required)
   * @param ifMatch The HTTP entity tag of the resource (ETag). Used for web cache validation. (required)
   * @param notifyAttendees  (optional, default to true)
   * @param returnRecord Whether response must contain a record that has been updated. This can result in an additional request to provider API. (optional, default to true)
   * @param event  (optional)
   * @return CompletableFuture&lt;OkResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<OkResponse> updateMeetingResponse(String calendarId, String eventId, String ifMatch, Boolean notifyAttendees, Boolean returnRecord, Event event) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = updateMeetingResponseRequestBuilder(calendarId, eventId, ifMatch, notifyAttendees, returnRecord, event);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("updateMeetingResponse", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<OkResponse>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Update meeting response
   * 
   * @param calendarId Calendar id (required)
   * @param eventId Event id (required)
   * @param ifMatch The HTTP entity tag of the resource (ETag). Used for web cache validation. (required)
   * @param notifyAttendees  (optional, default to true)
   * @param returnRecord Whether response must contain a record that has been updated. This can result in an additional request to provider API. (optional, default to true)
   * @param event  (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;OkResponse&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<OkResponse>> updateMeetingResponseWithHttpInfo(String calendarId, String eventId, String ifMatch, Boolean notifyAttendees, Boolean returnRecord, Event event) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = updateMeetingResponseRequestBuilder(calendarId, eventId, ifMatch, notifyAttendees, returnRecord, event);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("updateMeetingResponse", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  new ApiResponse<OkResponse>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<OkResponse>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder updateMeetingResponseRequestBuilder(String calendarId, String eventId, String ifMatch, Boolean notifyAttendees, Boolean returnRecord, Event event) throws ApiException {
    // verify the required parameter 'calendarId' is set
    if (calendarId == null) {
      throw new ApiException(400, "Missing the required parameter 'calendarId' when calling updateMeetingResponse");
    }
    // verify the required parameter 'eventId' is set
    if (eventId == null) {
      throw new ApiException(400, "Missing the required parameter 'eventId' when calling updateMeetingResponse");
    }
    // verify the required parameter 'ifMatch' is set
    if (ifMatch == null) {
      throw new ApiException(400, "Missing the required parameter 'ifMatch' when calling updateMeetingResponse");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v1/calendars/{calendarId}/events/{eventId}/response"
        .replace("{calendarId}", ApiClient.urlEncode(calendarId.toString()))
        .replace("{eventId}", ApiClient.urlEncode(eventId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "notifyAttendees";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("notifyAttendees", notifyAttendees));
    localVarQueryParameterBaseName = "returnRecord";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("returnRecord", returnRecord));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    if (ifMatch != null) {
      localVarRequestBuilder.header("If-Match", ifMatch.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(event);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
