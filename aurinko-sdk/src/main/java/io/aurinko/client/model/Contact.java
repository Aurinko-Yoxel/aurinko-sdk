/*
 * Aurinko.io API
 * ## Introduction The Aurinko API is a unified API platform allowing developers to quickly build integrations with many mailbox providers and services like Google, Office 365, Outlook.com, MS Exchange, IMAP. The unified API abstracts away differences between many email, calendar, contact, task APIs to make it easy to connect and sync the mailbox data.  The Aurinko API's focus is convenient and reliable data synchronization for all supported data categories (email, calendar, contacts, tasks) so the API provides methods to receive changes/deltas and be notified of the changes (through webhooks) in a unified manner. The API's sync/deltas model should allow developers to build reliable event based solutions easily.  The Aurinko API is built on HTTP. Our API is RESTful. It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body.  ## API Authentication When you [sign up for an account](https://app.aurinko.io/#/signUp), you are given a Client Id and Secret for every application that you create. You use those to go through OAuth flows that allow you to start syncing remote account data through Aurinko. An account OAuth flow can be started with just the Client Id and the Client Secret will be required to obtain an account access token in the \"authorization code\" flow (\"implicit grant\" flow does is secured by the \"trusted domains\" setting).  Aurinko offers two forms of authentication:  - `Basic <Client Id, Client Secret>` - used for authentication flows and administrative requests made from the server side. - `Bearer <Account Access Token>` - used for working with an account data. - `Api Key in Cookie` - for in-browser apps that use Aurinko as their backend API with user sessions. - `Api Key in Header (X-Aurinko-Session)` - for server side apps that need user sessions  Never share your client secret or access token. Keep them guarded and secure.  ## Getting Started Guide If you have a use case you would like to implement, please consult us for feedback on the best API operations for the task.  [Click here to visit our API Guides](https://docs.aurinko.io/ctg-getting-started/getting-started). 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aurinko.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.aurinko.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.aurinko.client.model.ContactCompany;
import io.aurinko.client.model.ContactEmailAddress;
import io.aurinko.client.model.ContactName;
import io.aurinko.client.model.ContactPhoneNumber;
import io.aurinko.client.model.ContactPhoto;
import io.aurinko.client.model.ContactPostalAddress;
import io.aurinko.client.model.ContactRelation;
import io.aurinko.client.model.ContactUrl;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Contact
 */
@JsonPropertyOrder({
  Contact.JSON_PROPERTY_ID,
  Contact.JSON_PROPERTY_ETAG,
  Contact.JSON_PROPERTY_CREATED_TIME,
  Contact.JSON_PROPERTY_LAST_MODIFIED_TIME,
  Contact.JSON_PROPERTY_NAME,
  Contact.JSON_PROPERTY_NICK_NAME,
  Contact.JSON_PROPERTY_FILE_AS,
  Contact.JSON_PROPERTY_COMPANY,
  Contact.JSON_PROPERTY_RELATIONS,
  Contact.JSON_PROPERTY_BIRTHDAY,
  Contact.JSON_PROPERTY_KEYWORDS,
  Contact.JSON_PROPERTY_NOTES,
  Contact.JSON_PROPERTY_EMAIL_ADDRESSES,
  Contact.JSON_PROPERTY_PHONE_NUMBERS,
  Contact.JSON_PROPERTY_ADDRESSES,
  Contact.JSON_PROPERTY_URLS,
  Contact.JSON_PROPERTY_NATIVE_PROPERTIES,
  Contact.JSON_PROPERTY_HAS_PHOTO,
  Contact.JSON_PROPERTY_PHOTO
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class Contact {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_ETAG = "etag";
  private String etag;

  public static final String JSON_PROPERTY_CREATED_TIME = "createdTime";
  private OffsetDateTime createdTime;

  public static final String JSON_PROPERTY_LAST_MODIFIED_TIME = "lastModifiedTime";
  private OffsetDateTime lastModifiedTime;

  public static final String JSON_PROPERTY_NAME = "name";
  private ContactName name;

  public static final String JSON_PROPERTY_NICK_NAME = "nickName";
  private String nickName;

  public static final String JSON_PROPERTY_FILE_AS = "fileAs";
  private String fileAs;

  public static final String JSON_PROPERTY_COMPANY = "company";
  private ContactCompany company;

  public static final String JSON_PROPERTY_RELATIONS = "relations";
  private List<ContactRelation> relations;

  public static final String JSON_PROPERTY_BIRTHDAY = "birthday";
  private String birthday;

  public static final String JSON_PROPERTY_KEYWORDS = "keywords";
  private List<String> keywords;

  public static final String JSON_PROPERTY_NOTES = "notes";
  private String notes;

  public static final String JSON_PROPERTY_EMAIL_ADDRESSES = "emailAddresses";
  private List<ContactEmailAddress> emailAddresses;

  public static final String JSON_PROPERTY_PHONE_NUMBERS = "phoneNumbers";
  private List<ContactPhoneNumber> phoneNumbers;

  public static final String JSON_PROPERTY_ADDRESSES = "addresses";
  private List<ContactPostalAddress> addresses;

  public static final String JSON_PROPERTY_URLS = "urls";
  private List<ContactUrl> urls;

  public static final String JSON_PROPERTY_NATIVE_PROPERTIES = "nativeProperties";
  private Map<String, String> nativeProperties = new HashMap<>();

  public static final String JSON_PROPERTY_HAS_PHOTO = "hasPhoto";
  private Boolean hasPhoto;

  public static final String JSON_PROPERTY_PHOTO = "photo";
  private ContactPhoto photo;

  public Contact() { 
  }

  @JsonCreator
  public Contact(
    @JsonProperty(JSON_PROPERTY_ID) String id, 
    @JsonProperty(JSON_PROPERTY_ETAG) String etag, 
    @JsonProperty(JSON_PROPERTY_CREATED_TIME) OffsetDateTime createdTime, 
    @JsonProperty(JSON_PROPERTY_LAST_MODIFIED_TIME) OffsetDateTime lastModifiedTime, 
    @JsonProperty(JSON_PROPERTY_HAS_PHOTO) Boolean hasPhoto
  ) {
  this();
    this.id = id;
    this.etag = etag;
    this.createdTime = createdTime;
    this.lastModifiedTime = lastModifiedTime;
    this.hasPhoto = hasPhoto;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }




   /**
   * Get etag
   * @return etag
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ETAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEtag() {
    return etag;
  }




   /**
   * Get createdTime
   * @return createdTime
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }




   /**
   * Get lastModifiedTime
   * @return lastModifiedTime
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAST_MODIFIED_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }




  public Contact name(ContactName name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ContactName getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(ContactName name) {
    this.name = name;
  }


  public Contact nickName(String nickName) {
    this.nickName = nickName;
    return this;
  }

   /**
   * Get nickName
   * @return nickName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NICK_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNickName() {
    return nickName;
  }


  @JsonProperty(JSON_PROPERTY_NICK_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNickName(String nickName) {
    this.nickName = nickName;
  }


  public Contact fileAs(String fileAs) {
    this.fileAs = fileAs;
    return this;
  }

   /**
   * Get fileAs
   * @return fileAs
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILE_AS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFileAs() {
    return fileAs;
  }


  @JsonProperty(JSON_PROPERTY_FILE_AS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFileAs(String fileAs) {
    this.fileAs = fileAs;
  }


  public Contact company(ContactCompany company) {
    this.company = company;
    return this;
  }

   /**
   * Get company
   * @return company
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMPANY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ContactCompany getCompany() {
    return company;
  }


  @JsonProperty(JSON_PROPERTY_COMPANY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCompany(ContactCompany company) {
    this.company = company;
  }


  public Contact relations(List<ContactRelation> relations) {
    this.relations = relations;
    return this;
  }

  public Contact addRelationsItem(ContactRelation relationsItem) {
    if (this.relations == null) {
      this.relations = new ArrayList<>();
    }
    this.relations.add(relationsItem);
    return this;
  }

   /**
   * Get relations
   * @return relations
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RELATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ContactRelation> getRelations() {
    return relations;
  }


  @JsonProperty(JSON_PROPERTY_RELATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRelations(List<ContactRelation> relations) {
    this.relations = relations;
  }


  public Contact birthday(String birthday) {
    this.birthday = birthday;
    return this;
  }

   /**
   * Get birthday
   * @return birthday
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BIRTHDAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBirthday() {
    return birthday;
  }


  @JsonProperty(JSON_PROPERTY_BIRTHDAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBirthday(String birthday) {
    this.birthday = birthday;
  }


  public Contact keywords(List<String> keywords) {
    this.keywords = keywords;
    return this;
  }

  public Contact addKeywordsItem(String keywordsItem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<>();
    }
    this.keywords.add(keywordsItem);
    return this;
  }

   /**
   * Get keywords
   * @return keywords
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_KEYWORDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getKeywords() {
    return keywords;
  }


  @JsonProperty(JSON_PROPERTY_KEYWORDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKeywords(List<String> keywords) {
    this.keywords = keywords;
  }


  public Contact notes(String notes) {
    this.notes = notes;
    return this;
  }

   /**
   * Get notes
   * @return notes
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNotes() {
    return notes;
  }


  @JsonProperty(JSON_PROPERTY_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotes(String notes) {
    this.notes = notes;
  }


  public Contact emailAddresses(List<ContactEmailAddress> emailAddresses) {
    this.emailAddresses = emailAddresses;
    return this;
  }

  public Contact addEmailAddressesItem(ContactEmailAddress emailAddressesItem) {
    if (this.emailAddresses == null) {
      this.emailAddresses = new ArrayList<>();
    }
    this.emailAddresses.add(emailAddressesItem);
    return this;
  }

   /**
   * Get emailAddresses
   * @return emailAddresses
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMAIL_ADDRESSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ContactEmailAddress> getEmailAddresses() {
    return emailAddresses;
  }


  @JsonProperty(JSON_PROPERTY_EMAIL_ADDRESSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmailAddresses(List<ContactEmailAddress> emailAddresses) {
    this.emailAddresses = emailAddresses;
  }


  public Contact phoneNumbers(List<ContactPhoneNumber> phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
    return this;
  }

  public Contact addPhoneNumbersItem(ContactPhoneNumber phoneNumbersItem) {
    if (this.phoneNumbers == null) {
      this.phoneNumbers = new ArrayList<>();
    }
    this.phoneNumbers.add(phoneNumbersItem);
    return this;
  }

   /**
   * Get phoneNumbers
   * @return phoneNumbers
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PHONE_NUMBERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ContactPhoneNumber> getPhoneNumbers() {
    return phoneNumbers;
  }


  @JsonProperty(JSON_PROPERTY_PHONE_NUMBERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPhoneNumbers(List<ContactPhoneNumber> phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
  }


  public Contact addresses(List<ContactPostalAddress> addresses) {
    this.addresses = addresses;
    return this;
  }

  public Contact addAddressesItem(ContactPostalAddress addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

   /**
   * Get addresses
   * @return addresses
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDRESSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ContactPostalAddress> getAddresses() {
    return addresses;
  }


  @JsonProperty(JSON_PROPERTY_ADDRESSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddresses(List<ContactPostalAddress> addresses) {
    this.addresses = addresses;
  }


  public Contact urls(List<ContactUrl> urls) {
    this.urls = urls;
    return this;
  }

  public Contact addUrlsItem(ContactUrl urlsItem) {
    if (this.urls == null) {
      this.urls = new ArrayList<>();
    }
    this.urls.add(urlsItem);
    return this;
  }

   /**
   * Get urls
   * @return urls
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_URLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ContactUrl> getUrls() {
    return urls;
  }


  @JsonProperty(JSON_PROPERTY_URLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUrls(List<ContactUrl> urls) {
    this.urls = urls;
  }


  public Contact nativeProperties(Map<String, String> nativeProperties) {
    this.nativeProperties = nativeProperties;
    return this;
  }

  public Contact putNativePropertiesItem(String key, String nativePropertiesItem) {
    if (this.nativeProperties == null) {
      this.nativeProperties = new HashMap<>();
    }
    this.nativeProperties.put(key, nativePropertiesItem);
    return this;
  }

   /**
   * Get nativeProperties
   * @return nativeProperties
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NATIVE_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getNativeProperties() {
    return nativeProperties;
  }


  @JsonProperty(JSON_PROPERTY_NATIVE_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNativeProperties(Map<String, String> nativeProperties) {
    this.nativeProperties = nativeProperties;
  }


   /**
   * Get hasPhoto
   * @return hasPhoto
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HAS_PHOTO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHasPhoto() {
    return hasPhoto;
  }




  public Contact photo(ContactPhoto photo) {
    this.photo = photo;
    return this;
  }

   /**
   * Get photo
   * @return photo
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PHOTO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ContactPhoto getPhoto() {
    return photo;
  }


  @JsonProperty(JSON_PROPERTY_PHOTO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPhoto(ContactPhoto photo) {
    this.photo = photo;
  }


  /**
   * Return true if this Contact object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Contact contact = (Contact) o;
    return Objects.equals(this.id, contact.id) &&
        Objects.equals(this.etag, contact.etag) &&
        Objects.equals(this.createdTime, contact.createdTime) &&
        Objects.equals(this.lastModifiedTime, contact.lastModifiedTime) &&
        Objects.equals(this.name, contact.name) &&
        Objects.equals(this.nickName, contact.nickName) &&
        Objects.equals(this.fileAs, contact.fileAs) &&
        Objects.equals(this.company, contact.company) &&
        Objects.equals(this.relations, contact.relations) &&
        Objects.equals(this.birthday, contact.birthday) &&
        Objects.equals(this.keywords, contact.keywords) &&
        Objects.equals(this.notes, contact.notes) &&
        Objects.equals(this.emailAddresses, contact.emailAddresses) &&
        Objects.equals(this.phoneNumbers, contact.phoneNumbers) &&
        Objects.equals(this.addresses, contact.addresses) &&
        Objects.equals(this.urls, contact.urls) &&
        Objects.equals(this.nativeProperties, contact.nativeProperties) &&
        Objects.equals(this.hasPhoto, contact.hasPhoto) &&
        Objects.equals(this.photo, contact.photo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, etag, createdTime, lastModifiedTime, name, nickName, fileAs, company, relations, birthday, keywords, notes, emailAddresses, phoneNumbers, addresses, urls, nativeProperties, hasPhoto, photo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Contact {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nickName: ").append(toIndentedString(nickName)).append("\n");
    sb.append("    fileAs: ").append(toIndentedString(fileAs)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    relations: ").append(toIndentedString(relations)).append("\n");
    sb.append("    birthday: ").append(toIndentedString(birthday)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    emailAddresses: ").append(toIndentedString(emailAddresses)).append("\n");
    sb.append("    phoneNumbers: ").append(toIndentedString(phoneNumbers)).append("\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    urls: ").append(toIndentedString(urls)).append("\n");
    sb.append("    nativeProperties: ").append(toIndentedString(nativeProperties)).append("\n");
    sb.append("    hasPhoto: ").append(toIndentedString(hasPhoto)).append("\n");
    sb.append("    photo: ").append(toIndentedString(photo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `etag` to the URL query string
    if (getEtag() != null) {
      joiner.add(String.format("%setag%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEtag()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `createdTime` to the URL query string
    if (getCreatedTime() != null) {
      joiner.add(String.format("%screatedTime%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreatedTime()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `lastModifiedTime` to the URL query string
    if (getLastModifiedTime() != null) {
      joiner.add(String.format("%slastModifiedTime%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLastModifiedTime()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `name` to the URL query string
    if (getName() != null) {
      joiner.add(getName().toUrlQueryString(prefix + "name" + suffix));
    }

    // add `nickName` to the URL query string
    if (getNickName() != null) {
      joiner.add(String.format("%snickName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNickName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `fileAs` to the URL query string
    if (getFileAs() != null) {
      joiner.add(String.format("%sfileAs%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFileAs()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `company` to the URL query string
    if (getCompany() != null) {
      joiner.add(getCompany().toUrlQueryString(prefix + "company" + suffix));
    }

    // add `relations` to the URL query string
    if (getRelations() != null) {
      for (int i = 0; i < getRelations().size(); i++) {
        if (getRelations().get(i) != null) {
          joiner.add(getRelations().get(i).toUrlQueryString(String.format("%srelations%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `birthday` to the URL query string
    if (getBirthday() != null) {
      joiner.add(String.format("%sbirthday%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBirthday()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `keywords` to the URL query string
    if (getKeywords() != null) {
      for (int i = 0; i < getKeywords().size(); i++) {
        joiner.add(String.format("%skeywords%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getKeywords().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `notes` to the URL query string
    if (getNotes() != null) {
      joiner.add(String.format("%snotes%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNotes()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `emailAddresses` to the URL query string
    if (getEmailAddresses() != null) {
      for (int i = 0; i < getEmailAddresses().size(); i++) {
        if (getEmailAddresses().get(i) != null) {
          joiner.add(getEmailAddresses().get(i).toUrlQueryString(String.format("%semailAddresses%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `phoneNumbers` to the URL query string
    if (getPhoneNumbers() != null) {
      for (int i = 0; i < getPhoneNumbers().size(); i++) {
        if (getPhoneNumbers().get(i) != null) {
          joiner.add(getPhoneNumbers().get(i).toUrlQueryString(String.format("%sphoneNumbers%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `addresses` to the URL query string
    if (getAddresses() != null) {
      for (int i = 0; i < getAddresses().size(); i++) {
        if (getAddresses().get(i) != null) {
          joiner.add(getAddresses().get(i).toUrlQueryString(String.format("%saddresses%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `urls` to the URL query string
    if (getUrls() != null) {
      for (int i = 0; i < getUrls().size(); i++) {
        if (getUrls().get(i) != null) {
          joiner.add(getUrls().get(i).toUrlQueryString(String.format("%surls%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `nativeProperties` to the URL query string
    if (getNativeProperties() != null) {
      for (String _key : getNativeProperties().keySet()) {
        joiner.add(String.format("%snativeProperties%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getNativeProperties().get(_key), URLEncoder.encode(String.valueOf(getNativeProperties().get(_key)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `hasPhoto` to the URL query string
    if (getHasPhoto() != null) {
      joiner.add(String.format("%shasPhoto%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHasPhoto()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `photo` to the URL query string
    if (getPhoto() != null) {
      joiner.add(getPhoto().toUrlQueryString(prefix + "photo" + suffix));
    }

    return joiner.toString();
  }
}

