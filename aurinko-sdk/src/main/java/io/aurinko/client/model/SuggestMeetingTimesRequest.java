/*
 * Aurinko.io API
 * ## Introduction The Aurinko API is a unified API platform allowing developers to quickly build integrations with many mailbox providers and services like Google, Office 365, Outlook.com, MS Exchange, IMAP. The unified API abstracts away differences between many email, calendar, contact, task APIs to make it easy to connect and sync the mailbox data.  The Aurinko API's focus is convenient and reliable data synchronization for all supported data categories (email, calendar, contacts, tasks) so the API provides methods to receive changes/deltas and be notified of the changes (through webhooks) in a unified manner. The API's sync/deltas model should allow developers to build reliable event based solutions easily.  The Aurinko API is built on HTTP. Our API is RESTful. It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body.  ## API Authentication When you [sign up for an account](https://app.aurinko.io/#/signUp), you are given a Client Id and Secret for every application that you create. You use those to go through OAuth flows that allow you to start syncing remote account data through Aurinko. An account OAuth flow can be started with just the Client Id and the Client Secret will be required to obtain an account access token in the \"authorization code\" flow (\"implicit grant\" flow does is secured by the \"trusted domains\" setting).  Aurinko offers two forms of authentication:  - `Basic <Client Id, Client Secret>` - used for authentication flows and administrative requests made from the server side. - `Bearer <Account Access Token>` - used for working with an account data. - `Api Key in Cookie` - for in-browser apps that use Aurinko as their backend API with user sessions. - `Api Key in Header (X-Aurinko-Session)` - for server side apps that need user sessions  Never share your client secret or access token. Keep them guarded and secure.  ## Getting Started Guide If you have a use case you would like to implement, please consult us for feedback on the best API operations for the task.  [Click here to visit our API Guides](https://docs.aurinko.io/ctg-getting-started/getting-started). 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aurinko.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.aurinko.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.aurinko.client.model.AvailabilityIntervals;
import io.aurinko.client.model.MeetingAttendee;
import io.aurinko.client.model.ShowAs;
import io.aurinko.client.model.WeekWorkSchedule;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import io.aurinko.client.ApiClient;
/**
 * SuggestMeetingTimesRequest
 */
@JsonPropertyOrder({
  SuggestMeetingTimesRequest.JSON_PROPERTY_TIME_MIN,
  SuggestMeetingTimesRequest.JSON_PROPERTY_TIME_MAX,
  SuggestMeetingTimesRequest.JSON_PROPERTY_DURATION_MINUTES,
  SuggestMeetingTimesRequest.JSON_PROPERTY_AVAILABILITY_STEP,
  SuggestMeetingTimesRequest.JSON_PROPERTY_ATTENDEES,
  SuggestMeetingTimesRequest.JSON_PROPERTY_DEFAULT_TIMEZONE,
  SuggestMeetingTimesRequest.JSON_PROPERTY_DEFAULT_WORK_HOURS,
  SuggestMeetingTimesRequest.JSON_PROPERTY_AVAILABILITY_INTERVALS,
  SuggestMeetingTimesRequest.JSON_PROPERTY_FREE_STATUSES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class SuggestMeetingTimesRequest {
  public static final String JSON_PROPERTY_TIME_MIN = "timeMin";
  @javax.annotation.Nullable
  private OffsetDateTime timeMin;

  public static final String JSON_PROPERTY_TIME_MAX = "timeMax";
  @javax.annotation.Nullable
  private OffsetDateTime timeMax;

  public static final String JSON_PROPERTY_DURATION_MINUTES = "durationMinutes";
  @javax.annotation.Nullable
  private Integer durationMinutes;

  public static final String JSON_PROPERTY_AVAILABILITY_STEP = "availabilityStep";
  @javax.annotation.Nullable
  private Integer availabilityStep = 30;

  public static final String JSON_PROPERTY_ATTENDEES = "attendees";
  @javax.annotation.Nullable
  private List<MeetingAttendee> attendees = new ArrayList<>();

  public static final String JSON_PROPERTY_DEFAULT_TIMEZONE = "defaultTimezone";
  @javax.annotation.Nullable
  private String defaultTimezone;

  public static final String JSON_PROPERTY_DEFAULT_WORK_HOURS = "defaultWorkHours";
  @javax.annotation.Nullable
  private WeekWorkSchedule defaultWorkHours;

  public static final String JSON_PROPERTY_AVAILABILITY_INTERVALS = "availabilityIntervals";
  @javax.annotation.Nullable
  private AvailabilityIntervals availabilityIntervals;

  public static final String JSON_PROPERTY_FREE_STATUSES = "freeStatuses";
  @javax.annotation.Nullable
  private List<ShowAs> freeStatuses = new ArrayList<>(Arrays.asList(ShowAs.FREE));

  public SuggestMeetingTimesRequest() { 
  }

  public SuggestMeetingTimesRequest timeMin(@javax.annotation.Nullable OffsetDateTime timeMin) {
    this.timeMin = timeMin;
    return this;
  }

  /**
   * The lower bound of the time interval to search for available meeting times.
   * @return timeMin
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIME_MIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OffsetDateTime getTimeMin() {
    return timeMin;
  }


  @JsonProperty(JSON_PROPERTY_TIME_MIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeMin(@javax.annotation.Nullable OffsetDateTime timeMin) {
    this.timeMin = timeMin;
  }


  public SuggestMeetingTimesRequest timeMax(@javax.annotation.Nullable OffsetDateTime timeMax) {
    this.timeMax = timeMax;
    return this;
  }

  /**
   * The upper bound of the time interval to search for available meeting times.
   * @return timeMax
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIME_MAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OffsetDateTime getTimeMax() {
    return timeMax;
  }


  @JsonProperty(JSON_PROPERTY_TIME_MAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeMax(@javax.annotation.Nullable OffsetDateTime timeMax) {
    this.timeMax = timeMax;
  }


  public SuggestMeetingTimesRequest durationMinutes(@javax.annotation.Nullable Integer durationMinutes) {
    this.durationMinutes = durationMinutes;
    return this;
  }

  /**
   * The duration of the meeting to search time for.
   * @return durationMinutes
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DURATION_MINUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getDurationMinutes() {
    return durationMinutes;
  }


  @JsonProperty(JSON_PROPERTY_DURATION_MINUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDurationMinutes(@javax.annotation.Nullable Integer durationMinutes) {
    this.durationMinutes = durationMinutes;
  }


  public SuggestMeetingTimesRequest availabilityStep(@javax.annotation.Nullable Integer availabilityStep) {
    this.availabilityStep = availabilityStep;
    return this;
  }

  /**
   * Determines the interval at which new meeting slots are made available throughout the working hours.
   * @return availabilityStep
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AVAILABILITY_STEP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getAvailabilityStep() {
    return availabilityStep;
  }


  @JsonProperty(JSON_PROPERTY_AVAILABILITY_STEP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAvailabilityStep(@javax.annotation.Nullable Integer availabilityStep) {
    this.availabilityStep = availabilityStep;
  }


  public SuggestMeetingTimesRequest attendees(@javax.annotation.Nullable List<MeetingAttendee> attendees) {
    this.attendees = attendees;
    return this;
  }

  public SuggestMeetingTimesRequest addAttendeesItem(MeetingAttendee attendeesItem) {
    if (this.attendees == null) {
      this.attendees = new ArrayList<>();
    }
    this.attendees.add(attendeesItem);
    return this;
  }

  /**
   * The attendees to consider when searching for available meeting times.
   * @return attendees
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTENDEES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<MeetingAttendee> getAttendees() {
    return attendees;
  }


  @JsonProperty(JSON_PROPERTY_ATTENDEES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttendees(@javax.annotation.Nullable List<MeetingAttendee> attendees) {
    this.attendees = attendees;
  }


  public SuggestMeetingTimesRequest defaultTimezone(@javax.annotation.Nullable String defaultTimezone) {
    this.defaultTimezone = defaultTimezone;
    return this;
  }

  /**
   * Timezone (IANA) to use when no timezone information is available for the attendees.
   * @return defaultTimezone
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_TIMEZONE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDefaultTimezone() {
    return defaultTimezone;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_TIMEZONE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultTimezone(@javax.annotation.Nullable String defaultTimezone) {
    this.defaultTimezone = defaultTimezone;
  }


  public SuggestMeetingTimesRequest defaultWorkHours(@javax.annotation.Nullable WeekWorkSchedule defaultWorkHours) {
    this.defaultWorkHours = defaultWorkHours;
    return this;
  }

  /**
   * Get defaultWorkHours
   * @return defaultWorkHours
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_WORK_HOURS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public WeekWorkSchedule getDefaultWorkHours() {
    return defaultWorkHours;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_WORK_HOURS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultWorkHours(@javax.annotation.Nullable WeekWorkSchedule defaultWorkHours) {
    this.defaultWorkHours = defaultWorkHours;
  }


  public SuggestMeetingTimesRequest availabilityIntervals(@javax.annotation.Nullable AvailabilityIntervals availabilityIntervals) {
    this.availabilityIntervals = availabilityIntervals;
    return this;
  }

  /**
   * Get availabilityIntervals
   * @return availabilityIntervals
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AVAILABILITY_INTERVALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public AvailabilityIntervals getAvailabilityIntervals() {
    return availabilityIntervals;
  }


  @JsonProperty(JSON_PROPERTY_AVAILABILITY_INTERVALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAvailabilityIntervals(@javax.annotation.Nullable AvailabilityIntervals availabilityIntervals) {
    this.availabilityIntervals = availabilityIntervals;
  }


  public SuggestMeetingTimesRequest freeStatuses(@javax.annotation.Nullable List<ShowAs> freeStatuses) {
    this.freeStatuses = freeStatuses;
    return this;
  }

  public SuggestMeetingTimesRequest addFreeStatusesItem(ShowAs freeStatusesItem) {
    if (this.freeStatuses == null) {
      this.freeStatuses = new ArrayList<>(Arrays.asList(ShowAs.FREE));
    }
    this.freeStatuses.add(freeStatusesItem);
    return this;
  }

  /**
   * The statuses from /freeBusy request to consider as free time for the attendees.
   * @return freeStatuses
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FREE_STATUSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<ShowAs> getFreeStatuses() {
    return freeStatuses;
  }


  @JsonProperty(JSON_PROPERTY_FREE_STATUSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFreeStatuses(@javax.annotation.Nullable List<ShowAs> freeStatuses) {
    this.freeStatuses = freeStatuses;
  }


  /**
   * Return true if this SuggestMeetingTimesRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuggestMeetingTimesRequest suggestMeetingTimesRequest = (SuggestMeetingTimesRequest) o;
    return Objects.equals(this.timeMin, suggestMeetingTimesRequest.timeMin) &&
        Objects.equals(this.timeMax, suggestMeetingTimesRequest.timeMax) &&
        Objects.equals(this.durationMinutes, suggestMeetingTimesRequest.durationMinutes) &&
        Objects.equals(this.availabilityStep, suggestMeetingTimesRequest.availabilityStep) &&
        Objects.equals(this.attendees, suggestMeetingTimesRequest.attendees) &&
        Objects.equals(this.defaultTimezone, suggestMeetingTimesRequest.defaultTimezone) &&
        Objects.equals(this.defaultWorkHours, suggestMeetingTimesRequest.defaultWorkHours) &&
        Objects.equals(this.availabilityIntervals, suggestMeetingTimesRequest.availabilityIntervals) &&
        Objects.equals(this.freeStatuses, suggestMeetingTimesRequest.freeStatuses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timeMin, timeMax, durationMinutes, availabilityStep, attendees, defaultTimezone, defaultWorkHours, availabilityIntervals, freeStatuses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuggestMeetingTimesRequest {\n");
    sb.append("    timeMin: ").append(toIndentedString(timeMin)).append("\n");
    sb.append("    timeMax: ").append(toIndentedString(timeMax)).append("\n");
    sb.append("    durationMinutes: ").append(toIndentedString(durationMinutes)).append("\n");
    sb.append("    availabilityStep: ").append(toIndentedString(availabilityStep)).append("\n");
    sb.append("    attendees: ").append(toIndentedString(attendees)).append("\n");
    sb.append("    defaultTimezone: ").append(toIndentedString(defaultTimezone)).append("\n");
    sb.append("    defaultWorkHours: ").append(toIndentedString(defaultWorkHours)).append("\n");
    sb.append("    availabilityIntervals: ").append(toIndentedString(availabilityIntervals)).append("\n");
    sb.append("    freeStatuses: ").append(toIndentedString(freeStatuses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `timeMin` to the URL query string
    if (getTimeMin() != null) {
      joiner.add(String.format("%stimeMin%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTimeMin()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `timeMax` to the URL query string
    if (getTimeMax() != null) {
      joiner.add(String.format("%stimeMax%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTimeMax()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `durationMinutes` to the URL query string
    if (getDurationMinutes() != null) {
      joiner.add(String.format("%sdurationMinutes%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDurationMinutes()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `availabilityStep` to the URL query string
    if (getAvailabilityStep() != null) {
      joiner.add(String.format("%savailabilityStep%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAvailabilityStep()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `attendees` to the URL query string
    if (getAttendees() != null) {
      for (int i = 0; i < getAttendees().size(); i++) {
        if (getAttendees().get(i) != null) {
          joiner.add(getAttendees().get(i).toUrlQueryString(String.format("%sattendees%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `defaultTimezone` to the URL query string
    if (getDefaultTimezone() != null) {
      joiner.add(String.format("%sdefaultTimezone%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDefaultTimezone()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `defaultWorkHours` to the URL query string
    if (getDefaultWorkHours() != null) {
      joiner.add(getDefaultWorkHours().toUrlQueryString(prefix + "defaultWorkHours" + suffix));
    }

    // add `availabilityIntervals` to the URL query string
    if (getAvailabilityIntervals() != null) {
      joiner.add(getAvailabilityIntervals().toUrlQueryString(prefix + "availabilityIntervals" + suffix));
    }

    // add `freeStatuses` to the URL query string
    if (getFreeStatuses() != null) {
      for (int i = 0; i < getFreeStatuses().size(); i++) {
        if (getFreeStatuses().get(i) != null) {
          joiner.add(String.format("%sfreeStatuses%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(ApiClient.valueToString(getFreeStatuses().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }
      }
    }

    return joiner.toString();
  }
}

