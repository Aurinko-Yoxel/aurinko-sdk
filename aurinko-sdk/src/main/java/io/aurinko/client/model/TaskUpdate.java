/*
 * Aurinko.io API
 * ## Introduction The Aurinko API is a unified API platform allowing developers to quickly build integrations with many mailbox providers and services like Google, Office 365, Outlook.com, MS Exchange, IMAP. The unified API abstracts away differences between many email, calendar, contact, task APIs to make it easy to connect and sync the mailbox data.  The Aurinko API's focus is convenient and reliable data synchronization for all supported data categories (email, calendar, contacts, tasks) so the API provides methods to receive changes/deltas and be notified of the changes (through webhooks) in a unified manner. The API's sync/deltas model should allow developers to build reliable event based solutions easily.  The Aurinko API is built on HTTP. Our API is RESTful. It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body.  ## API Authentication When you [sign up for an account](https://app.aurinko.io/#/signUp), you are given a Client Id and Secret for every application that you create. You use those to go through OAuth flows that allow you to start syncing remote account data through Aurinko. An account OAuth flow can be started with just the Client Id and the Client Secret will be required to obtain an account access token in the \"authorization code\" flow (\"implicit grant\" flow does is secured by the \"trusted domains\" setting).  Aurinko offers two forms of authentication:  - `Basic <Client Id, Client Secret>` - used for authentication flows and administrative requests made from the server side. - `Bearer <Account Access Token>` - used for working with an account data. - `Api Key in Cookie` - for in-browser apps that use Aurinko as their backend API with user sessions. - `Api Key in Header (X-Aurinko-Session)` - for server side apps that need user sessions  Never share your client secret or access token. Keep them guarded and secure.  ## Getting Started Guide If you have a use case you would like to implement, please consult us for feedback on the best API operations for the task.  [Click here to visit our API Guides](https://docs.aurinko.io/ctg-getting-started/getting-started). 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aurinko.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.aurinko.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * TaskUpdate
 */
@JsonPropertyOrder({
  TaskUpdate.JSON_PROPERTY_TITLE,
  TaskUpdate.JSON_PROPERTY_PARENT_ID,
  TaskUpdate.JSON_PROPERTY_PREVIOUS_ID,
  TaskUpdate.JSON_PROPERTY_NOTES,
  TaskUpdate.JSON_PROPERTY_STATUS,
  TaskUpdate.JSON_PROPERTY_IMPORTANCE,
  TaskUpdate.JSON_PROPERTY_DUE,
  TaskUpdate.JSON_PROPERTY_START_DATE_TIME,
  TaskUpdate.JSON_PROPERTY_CATEGORIES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TaskUpdate {
  public static final String JSON_PROPERTY_TITLE = "title";
  private String title;

  public static final String JSON_PROPERTY_PARENT_ID = "parentId";
  private String parentId;

  public static final String JSON_PROPERTY_PREVIOUS_ID = "previousId";
  private String previousId;

  public static final String JSON_PROPERTY_NOTES = "notes";
  private String notes;

  /**
   * Gets or Sets status
   */
  public enum StatusEnum {
    NOTSTARTED("notStarted"),
    
    INPROGRESS("inProgress"),
    
    COMPLETED("completed"),
    
    WAITINGONOTHERS("waitingOnOthers"),
    
    DEFERRED("deferred"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  /**
   * Gets or Sets importance
   */
  public enum ImportanceEnum {
    LOW("low"),
    
    NORMAL("normal"),
    
    HIGH("high"),
    
    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    ImportanceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ImportanceEnum fromValue(String value) {
      for (ImportanceEnum b : ImportanceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_IMPORTANCE = "importance";
  private ImportanceEnum importance;

  public static final String JSON_PROPERTY_DUE = "due";
  private OffsetDateTime due;

  public static final String JSON_PROPERTY_START_DATE_TIME = "startDateTime";
  private OffsetDateTime startDateTime;

  public static final String JSON_PROPERTY_CATEGORIES = "categories";
  private List<String> categories;

  public TaskUpdate() { 
  }

  public TaskUpdate title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTitle() {
    return title;
  }


  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTitle(String title) {
    this.title = title;
  }


  public TaskUpdate parentId(String parentId) {
    this.parentId = parentId;
    return this;
  }

   /**
   * Get parentId
   * @return parentId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getParentId() {
    return parentId;
  }


  @JsonProperty(JSON_PROPERTY_PARENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParentId(String parentId) {
    this.parentId = parentId;
  }


  public TaskUpdate previousId(String previousId) {
    this.previousId = previousId;
    return this;
  }

   /**
   * Get previousId
   * @return previousId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREVIOUS_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPreviousId() {
    return previousId;
  }


  @JsonProperty(JSON_PROPERTY_PREVIOUS_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreviousId(String previousId) {
    this.previousId = previousId;
  }


  public TaskUpdate notes(String notes) {
    this.notes = notes;
    return this;
  }

   /**
   * Get notes
   * @return notes
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNotes() {
    return notes;
  }


  @JsonProperty(JSON_PROPERTY_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotes(String notes) {
    this.notes = notes;
  }


  public TaskUpdate status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public TaskUpdate importance(ImportanceEnum importance) {
    this.importance = importance;
    return this;
  }

   /**
   * Get importance
   * @return importance
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMPORTANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ImportanceEnum getImportance() {
    return importance;
  }


  @JsonProperty(JSON_PROPERTY_IMPORTANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImportance(ImportanceEnum importance) {
    this.importance = importance;
  }


  public TaskUpdate due(OffsetDateTime due) {
    this.due = due;
    return this;
  }

   /**
   * Get due
   * @return due
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getDue() {
    return due;
  }


  @JsonProperty(JSON_PROPERTY_DUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDue(OffsetDateTime due) {
    this.due = due;
  }


  public TaskUpdate startDateTime(OffsetDateTime startDateTime) {
    this.startDateTime = startDateTime;
    return this;
  }

   /**
   * Get startDateTime
   * @return startDateTime
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_START_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getStartDateTime() {
    return startDateTime;
  }


  @JsonProperty(JSON_PROPERTY_START_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartDateTime(OffsetDateTime startDateTime) {
    this.startDateTime = startDateTime;
  }


  public TaskUpdate categories(List<String> categories) {
    this.categories = categories;
    return this;
  }

  public TaskUpdate addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * Get categories
   * @return categories
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CATEGORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getCategories() {
    return categories;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCategories(List<String> categories) {
    this.categories = categories;
  }


  /**
   * Return true if this TaskUpdate object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskUpdate taskUpdate = (TaskUpdate) o;
    return Objects.equals(this.title, taskUpdate.title) &&
        Objects.equals(this.parentId, taskUpdate.parentId) &&
        Objects.equals(this.previousId, taskUpdate.previousId) &&
        Objects.equals(this.notes, taskUpdate.notes) &&
        Objects.equals(this.status, taskUpdate.status) &&
        Objects.equals(this.importance, taskUpdate.importance) &&
        Objects.equals(this.due, taskUpdate.due) &&
        Objects.equals(this.startDateTime, taskUpdate.startDateTime) &&
        Objects.equals(this.categories, taskUpdate.categories);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, parentId, previousId, notes, status, importance, due, startDateTime, categories);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskUpdate {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    previousId: ").append(toIndentedString(previousId)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    importance: ").append(toIndentedString(importance)).append("\n");
    sb.append("    due: ").append(toIndentedString(due)).append("\n");
    sb.append("    startDateTime: ").append(toIndentedString(startDateTime)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `title` to the URL query string
    if (getTitle() != null) {
      joiner.add(String.format("%stitle%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTitle()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `parentId` to the URL query string
    if (getParentId() != null) {
      joiner.add(String.format("%sparentId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getParentId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `previousId` to the URL query string
    if (getPreviousId() != null) {
      joiner.add(String.format("%spreviousId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPreviousId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `notes` to the URL query string
    if (getNotes() != null) {
      joiner.add(String.format("%snotes%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNotes()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `status` to the URL query string
    if (getStatus() != null) {
      joiner.add(String.format("%sstatus%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatus()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `importance` to the URL query string
    if (getImportance() != null) {
      joiner.add(String.format("%simportance%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getImportance()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `due` to the URL query string
    if (getDue() != null) {
      joiner.add(String.format("%sdue%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDue()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `startDateTime` to the URL query string
    if (getStartDateTime() != null) {
      joiner.add(String.format("%sstartDateTime%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStartDateTime()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `categories` to the URL query string
    if (getCategories() != null) {
      for (int i = 0; i < getCategories().size(); i++) {
        joiner.add(String.format("%scategories%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getCategories().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    return joiner.toString();
  }
}

