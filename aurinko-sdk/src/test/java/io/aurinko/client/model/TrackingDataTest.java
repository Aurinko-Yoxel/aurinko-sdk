/*
 * Aurinko.io API
 * ## Introduction The Aurinko API is a unified API platform allowing developers to quickly build integrations with many mailbox providers and services like Google, Office 365, Outlook.com, MS Exchange, IMAP. The unified API abstracts away differences between many email, calendar, contact, task APIs to make it easy to connect and sync the mailbox data.  The Aurinko API's focus is convenient and reliable data synchronization for all supported data categories (email, calendar, contacts, tasks) so the API provides methods to receive changes/deltas and be notified of the changes (through webhooks) in a unified manner. The API's sync/deltas model should allow developers to build reliable event based solutions easily.  The Aurinko API is built on HTTP. Our API is RESTful. It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body.  ## API Authentication When you [sign up for an account](https://app.aurinko.io/#/signUp), you are given a Client Id and Secret for every application that you create. You use those to go through OAuth flows that allow you to start syncing remote account data through Aurinko. An account OAuth flow can be started with just the Client Id and the Client Secret will be required to obtain an account access token in the \"authorization code\" flow (\"implicit grant\" flow does is secured by the \"trusted domains\" setting).  Aurinko offers two forms of authentication:  - `Basic <Client Id, Client Secret>` - used for authentication flows and administrative requests made from the server side. - `Bearer <Account Access Token>` - used for working with an account data. - `Api Key in Cookie` - for in-browser apps that use Aurinko as their backend API with user sessions. - `Api Key in Header (X-Aurinko-Session)` - for server side apps that need user sessions  Never share your client secret or access token. Keep them guarded and secure.  ## Getting Started Guide If you have a use case you would like to implement, please consult us for feedback on the best API operations for the task.  [Click here to visit our API Guides](https://docs.aurinko.io/ctg-getting-started/getting-started). 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aurinko.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.aurinko.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for TrackingData
 */
class TrackingDataTest {
    private final TrackingData model = new TrackingData();

    /**
     * Model tests for TrackingData
     */
    @Test
    void testTrackingData() {
        // TODO: test TrackingData
    }

    /**
     * Test the property 'id'
     */
    @Test
    void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'messageId'
     */
    @Test
    void messageIdTest() {
        // TODO: test messageId
    }

    /**
     * Test the property 'inetMessageId'
     */
    @Test
    void inetMessageIdTest() {
        // TODO: test inetMessageId
    }

    /**
     * Test the property 'threadId'
     */
    @Test
    void threadIdTest() {
        // TODO: test threadId
    }

    /**
     * Test the property 'sendDate'
     */
    @Test
    void sendDateTest() {
        // TODO: test sendDate
    }

    /**
     * Test the property 'lastActivityTime'
     */
    @Test
    void lastActivityTimeTest() {
        // TODO: test lastActivityTime
    }

    /**
     * Test the property 'lastRespondedTime'
     */
    @Test
    void lastRespondedTimeTest() {
        // TODO: test lastRespondedTime
    }

    /**
     * Test the property 'trackReplies'
     */
    @Test
    void trackRepliesTest() {
        // TODO: test trackReplies
    }

    /**
     * Test the property 'trackOpens'
     */
    @Test
    void trackOpensTest() {
        // TODO: test trackOpens
    }

    /**
     * Test the property 'trackingCode'
     */
    @Test
    void trackingCodeTest() {
        // TODO: test trackingCode
    }

    /**
     * Test the property 'context'
     */
    @Test
    void contextTest() {
        // TODO: test context
    }

    /**
     * Test the property 'location'
     */
    @Test
    void locationTest() {
        // TODO: test location
    }

    /**
     * Test the property 'userAgent'
     */
    @Test
    void userAgentTest() {
        // TODO: test userAgent
    }

    /**
     * Test the property 'remoteAddr'
     */
    @Test
    void remoteAddrTest() {
        // TODO: test remoteAddr
    }

    /**
     * Test the property 'openCount'
     */
    @Test
    void openCountTest() {
        // TODO: test openCount
    }

    /**
     * Test the property 'ignoreOpenClicks'
     */
    @Test
    void ignoreOpenClicksTest() {
        // TODO: test ignoreOpenClicks
    }

    /**
     * Test the property 'hasBounced'
     */
    @Test
    void hasBouncedTest() {
        // TODO: test hasBounced
    }

}
