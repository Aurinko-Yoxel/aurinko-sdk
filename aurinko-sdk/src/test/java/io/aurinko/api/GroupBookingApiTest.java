/*
 * Aurinko.io API
 * ## Introduction The Aurinko API is a unified API platform allowing developers to quickly build integrations with many mailbox providers and services like Google, Office 365, Outlook.com, MS Exchange, IMAP. The unified API abstracts away differences between many email, calendar, contact, task APIs to make it easy to connect and sync the mailbox data.  The Aurinko API's focus is convenient and reliable data synchronization for all supported data categories (email, calendar, contacts, tasks) so the API provides methods to receive changes/deltas and be notified of the changes (through webhooks) in a unified manner. The API's sync/deltas model should allow developers to build reliable event based solutions easily.  The Aurinko API is built on HTTP. Our API is RESTful. It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body.  ## API Authentication When you [sign up for an account](https://app.aurinko.io/#/signUp), you are given a Client Id and Secret for every application that you create. You use those to go through OAuth flows that allow you to start syncing remote account data through Aurinko. An account OAuth flow can be started with just the Client Id and the Client Secret will be required to obtain an account access token in the \"authorization code\" flow (\"implicit grant\" flow does is secured by the \"trusted domains\" setting).  Aurinko offers two forms of authentication:  - `Basic <Client Id, Client Secret>` - used for authentication flows and administrative requests made from the server side. - `Bearer <Account Access Token>` - used for working with an account data. - `Api Key in Cookie` - for in-browser apps that use Aurinko as their backend API with user sessions. - `Api Key in Header (X-Aurinko-Session)` - for server side apps that need user sessions  Never share your client secret or access token. Keep them guarded and secure.  ## Getting Started Guide If you have a use case you would like to implement, please consult us for feedback on the best API operations for the task.  [Click here to visit our API Guides](https://docs.aurinko.io/ctg-getting-started/getting-started). 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aurinko.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.aurinko.api;

import io.aurinko.client.ApiException;
import io.aurinko.client.model.BookingAttachAccountsDto;
import io.aurinko.client.model.BookingAttachGroupsDto;
import io.aurinko.client.model.BookingAttachedAccountsPage;
import io.aurinko.client.model.BookingAttachedGroupsPage;
import io.aurinko.client.model.BookingAvailableProfilesInDto;
import io.aurinko.client.model.BookingAvailableProfilesOutDto;
import io.aurinko.client.model.BookingDetachGroupAccountsDto;
import io.aurinko.client.model.BookingDetachGroupsDto;
import io.aurinko.client.model.BookingRequiredMode;
import io.aurinko.client.model.BookingSuccessOutDto;
import io.aurinko.client.model.BookingTimesOutDto;
import io.aurinko.client.model.ConfirmReservationOutDto;
import io.aurinko.client.model.ConfirmSlotDeleteOutDto;
import io.aurinko.client.model.CreateMeetingDto;
import io.aurinko.client.model.CreateMeetingResponse;
import io.aurinko.client.model.GroupBookingInDto;
import io.aurinko.client.model.GroupBookingOutDto;
import io.aurinko.client.model.GroupBookingPage;
import io.aurinko.client.model.GroupBookingUpdateDto;
import java.time.LocalDate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import java.util.concurrent.CompletableFuture;

/**
 * API tests for GroupBookingApi
 */
@Disabled
public class GroupBookingApiTest {

    private final GroupBookingApi api = new GroupBookingApi();

    
    /**
     * Assign accounts to group booking
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attachAccountsGroupBookingTest() throws ApiException {
        Long id = null;
        BookingAttachAccountsDto bookingAttachAccountsDto = null;
        CompletableFuture<BookingSuccessOutDto> response = 
        api.attachAccountsGroupBooking(id, bookingAttachAccountsDto);
        
        // TODO: test validations
    }
    
    /**
     * Assign groups to group booking
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attachGroupsBookingTest() throws ApiException {
        Long id = null;
        BookingAttachGroupsDto bookingAttachGroupsDto = null;
        CompletableFuture<BookingSuccessOutDto> response = 
        api.attachGroupsBooking(id, bookingAttachGroupsDto);
        
        // TODO: test validations
    }
    
    /**
     * List accounts of a group booking profile
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attachedAccountsGroupBookingTest() throws ApiException {
        Long id = null;
        Integer limit = null;
        Integer offset = null;
        CompletableFuture<BookingAttachedAccountsPage> response = 
        api.attachedAccountsGroupBooking(id, limit, offset);
        
        // TODO: test validations
    }
    
    /**
     * List groups of a group booking profile
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attachedGroupsBookingTest() throws ApiException {
        Long id = null;
        Integer limit = null;
        Integer offset = null;
        CompletableFuture<BookingAttachedGroupsPage> response = 
        api.attachedGroupsBooking(id, limit, offset);
        
        // TODO: test validations
    }
    
    /**
     * Get available bookings for Ð° time range
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bookingGroupAvailabilityTest() throws ApiException {
        BookingAvailableProfilesInDto bookingAvailableProfilesInDto = null;
        CompletableFuture<BookingAvailableProfilesOutDto> response = 
        api.bookingGroupAvailability(bookingAvailableProfilesInDto);
        
        // TODO: test validations
    }
    
    /**
     * Create a meeting
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bookingGroupCreateMeetingTest() throws ApiException {
        Long id = null;
        BookingRequiredMode required = null;
        Long reserveForMinutes = null;
        CreateMeetingDto createMeetingDto = null;
        CompletableFuture<CreateMeetingResponse> response = 
        api.bookingGroupCreateMeeting(id, required, reserveForMinutes, createMeetingDto);
        
        // TODO: test validations
    }
    
    /**
     * Get available meeting times
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bookingGroupMeetingTimesTest() throws ApiException {
        Long id = null;
        BookingRequiredMode required = null;
        LocalDate fromDate = null;
        String intervalLength = null;
        String pageToken = null;
        Integer limit = null;
        Integer offset = null;
        CompletableFuture<BookingTimesOutDto> response = 
        api.bookingGroupMeetingTimes(id, required, fromDate, intervalLength, pageToken, limit, offset);
        
        // TODO: test validations
    }
    
    /**
     * Convert an unconfirmed booking reservation to a calendar event
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bookingGroupReservationConfirmTest() throws ApiException {
        Long id = null;
        CompletableFuture<ConfirmReservationOutDto> response = 
        api.bookingGroupReservationConfirm(id);
        
        // TODO: test validations
    }
    
    /**
     * Cancel an unconfirmed booking reservation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bookingGroupReservationDeleteTest() throws ApiException {
        Long id = null;
        CompletableFuture<ConfirmSlotDeleteOutDto> response = 
        api.bookingGroupReservationDelete(id);
        
        // TODO: test validations
    }
    
    /**
     * Create a group booking profile
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGroupBookingTest() throws ApiException {
        GroupBookingInDto groupBookingInDto = null;
        CompletableFuture<GroupBookingOutDto> response = 
        api.createGroupBooking(groupBookingInDto);
        
        // TODO: test validations
    }
    
    /**
     * Delete a group booking profile by id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGroupBookingTest() throws ApiException {
        Long id = null;
        CompletableFuture<BookingSuccessOutDto> response = 
        api.deleteGroupBooking(id);
        
        // TODO: test validations
    }
    
    /**
     * Remove accounts from group booking
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void detachAccountsGroupBookingTest() throws ApiException {
        Long id = null;
        BookingDetachGroupAccountsDto bookingDetachGroupAccountsDto = null;
        CompletableFuture<BookingSuccessOutDto> response = 
        api.detachAccountsGroupBooking(id, bookingDetachGroupAccountsDto);
        
        // TODO: test validations
    }
    
    /**
     * Remove groups from group booking
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void detachGroupsBookingTest() throws ApiException {
        Long id = null;
        BookingDetachGroupsDto bookingDetachGroupsDto = null;
        CompletableFuture<BookingSuccessOutDto> response = 
        api.detachGroupsBooking(id, bookingDetachGroupsDto);
        
        // TODO: test validations
    }
    
    /**
     * Get a group booking profile by id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupBookingTest() throws ApiException {
        Long id = null;
        CompletableFuture<GroupBookingOutDto> response = 
        api.getGroupBooking(id);
        
        // TODO: test validations
    }
    
    /**
     * Get group booking profiles
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupBookingsTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        CompletableFuture<GroupBookingPage> response = 
        api.getGroupBookings(limit, offset);
        
        // TODO: test validations
    }
    
    /**
     * Update a group booking profile
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateGroupBookingTest() throws ApiException {
        Long id = null;
        GroupBookingUpdateDto groupBookingUpdateDto = null;
        CompletableFuture<BookingSuccessOutDto> response = 
        api.updateGroupBooking(id, groupBookingUpdateDto);
        
        // TODO: test validations
    }
    
}
